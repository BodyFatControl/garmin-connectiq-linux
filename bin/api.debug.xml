<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<debugInfo>
<pcToLineNum/>
<symbolTable>
<entry id="8388698" method="true" symbol="start"/>
<entry id="8390014" object="true" symbol="LightNetworkListener"/>
<entry field="true" id="8389986" symbol="LIGHT_MODE_OFF"/>
<entry field="true" id="8389168" symbol="COLOR_DK_BLUE"/>
<entry id="8388781" method="true" symbol="hashCode"/>
<entry id="8389049" method="true" symbol="pushView"/>
<entry id="8389076" symbol="BEHAVIOR_ON_NEXT_MODE"/>
<entry id="8388824" method="true" symbol="transmit"/>
<entry id="8388779" symbol="mMethod"/>
<entry field="true" id="8388806" symbol="BLE_QUEUE_FULL"/>
<entry field="true" id="8388753" symbol="swimStrokeType"/>
<entry id="8388644" module="true" symbol="System"/>
<entry field="true" id="8389992" symbol="LIGHT_MODE_SLOW_FLASH"/>
<entry field="true" id="8389866" symbol="total"/>
<entry id="8389334" symbol="wednesday"/>
<entry field="true" id="8389312" symbol="when"/>
<entry field="true" id="8389170" symbol="COLOR_PINK"/>
<entry field="true" id="8389755" symbol="HR_ZONE_SPORT_BIKING"/>
<entry id="8388923" method="true" symbol="today"/>
<entry field="true" id="8389843" symbol="responseCode"/>
<entry id="8389719" method="true" symbol="round"/>
<entry id="8389540" method="true" symbol="onTextEntered"/>
<entry field="true" id="8389991" symbol="LIGHT_MODE_ST_0_20"/>
<entry id="8389331" symbol="sunday"/>
<entry id="8389101" method="true" symbol="onSwipe"/>
<entry field="true" id="8389907" symbol="FONT_SYSTEM_MEDIUM"/>
<entry field="true" id="8388937" symbol="day_of_week"/>
<entry field="true" id="8388959" symbol="cadence"/>
<entry field="true" id="8388840" symbol="SPORT_TRAINING"/>
<entry id="8389308" method="true" symbol="toRadians"/>
<entry field="true" id="8389036" symbol="NUMBER_PICKER_TIME_OF_DAY"/>
<entry id="8389793" method="true" symbol="debug"/>
<entry id="8390019" method="true" symbol="getNetworkMode"/>
<entry id="8388716" method="true" symbol="trap"/>
<entry id="8389689" method="true" symbol="getFontAscent"/>
<entry field="true" id="8388974" symbol="TONE_ALARM"/>
<entry field="true" id="8388981" symbol="TONE_SUCCESS"/>
<entry field="true" id="8389631" symbol="NETWORK_PRIVATE"/>
<entry id="8389633" method="true" symbol="isBackgroundScanEnabled"/>
<entry field="true" id="8389671" symbol="screenWidth"/>
<entry field="true" id="8389420" symbol="DEVICE_STATE_CLOSED"/>
<entry id="8389781" module="true" symbol="SensorHistory"/>
<entry id="8390044" method="true" symbol="getCalculatedCadence"/>
<entry field="true" id="8389263" symbol="DEFAULT_DEVICE_TYPE"/>
<entry field="true" id="8390011" symbol="LIGHT_TYPE_OTHER"/>
<entry field="true" id="8389004" symbol="KEY_UP_LEFT"/>
<entry field="true" id="8389859" symbol="DATA_TYPE_UINT32"/>
<entry id="8389785" method="true" symbol="assert"/>
<entry field="true" id="8389206" symbol="MSG_ID_LOW_PRIORITY_SEARCH_TIMEOUT"/>
<entry id="8389242" symbol="dataHigh"/>
<entry field="true" id="8389396" symbol="UNIT_STATUTE"/>
<entry field="true" id="8389870" symbol="activeMinutesDay"/>
<entry field="true" id="8389832" symbol="OAUTH_SIGNING_METHOD_HMAC_SHA1"/>
<entry id="8389180" method="true" symbol="drawPoint"/>
<entry id="8390058" method="true" symbol="setBurstListener"/>
<entry field="true" id="8389814" symbol="timerState"/>
<entry id="8389287" method="true" symbol="saveProperties"/>
<entry id="8388987" method="true" symbol="vibrate"/>
<entry field="true" id="8388999" symbol="KEY_DOWN_LEFT"/>
<entry field="true" id="8389148" symbol="walkingStepLength"/>
<entry field="true" id="8388733" symbol="timerTime"/>
<entry id="8388926" symbol="dayHash"/>
<entry id="8389306" symbol="lon"/>
<entry id="8389917" symbol="__version"/>
<entry field="true" id="8389232" symbol="CHANNEL_TYPE_RX_NOT_TX"/>
<entry id="8388899" method="true" symbol="log"/>
<entry field="true" id="8389857" symbol="DATA_TYPE_UINT16"/>
<entry id="8388686" method="true" symbol="testLocationDegree"/>
<entry id="8389979" object="true" symbol="DeviceListener"/>
<entry id="8389883" object="true" symbol="InvalidSelectableStateException"/>
<entry id="8389102" method="true" symbol="onNumberPicked"/>
<entry field="true" id="8388744" symbol="maxPower"/>
<entry field="true" id="8389413" symbol="BATT_STATUS_OK"/>
<entry id="8388791" method="true" symbol="remove"/>
<entry id="8389124" method="true" symbol="onUpdate"/>
<entry id="8389941" object="true" symbol="Intent"/>
<entry field="true" id="8389482" symbol="powerSensorType"/>
<entry field="true" id="8388863" symbol="SUB_SPORT_TRACK_CYCLING"/>
<entry id="8388826" method="true" symbol="next"/>
<entry id="8389258" method="true" symbol="release"/>
<entry id="8389698" object="true" symbol="UnableToAcquireChannelException"/>
<entry id="8389944" object="true" symbol="AppNotInstalledException"/>
<entry field="true" id="8388866" symbol="SUB_SPORT_STAIR_CLIMBING"/>
<entry id="8388825" object="true" symbol="ConnectionListener"/>
<entry id="8389863" object="true" symbol="Field"/>
<entry id="8389349" symbol="justification"/>
<entry id="8389398" method="true" symbol="getDeviceSettings"/>
<entry id="8388637" module="true" symbol="Communications"/>
<entry id="8389587" method="true" symbol="getErrorMessage"/>
<entry field="true" id="8389528" symbol="batteryVoltage"/>
<entry field="true" id="8389810" symbol="TIMER_STATE_OFF"/>
<entry field="true" id="8389219" symbol="MSG_CODE_EVENT_TRANSFER_RX_FAILED"/>
<entry id="8389439" object="true" symbol="BikePower"/>
<entry id="8388881" method="true" symbol="isRecording"/>
<entry id="8389277" symbol="mProperties"/>
<entry id="8389716" method="true" symbol="atan2"/>
<entry field="true" id="8389002" symbol="KEY_RIGHT"/>
<entry id="8389841" method="true" symbol="registerForOAuthMessages"/>
<entry field="true" id="8389139" symbol="GENDER_FEMALE"/>
<entry field="true" id="8389226" symbol="MSG_CODE_TRANSFER_IN_PROGRESS"/>
<entry id="8389189" method="true" symbol="fillRoundedRectangle"/>
<entry id="8389712" symbol="mNewestFirst"/>
<entry field="true" id="8389993" symbol="LIGHT_MODE_FAST_FLASH"/>
<entry id="8389135" symbol="mKey"/>
<entry id="8389307" method="true" symbol="toDegrees"/>
<entry field="true" id="8389557" symbol="KEY_PAGE"/>
<entry id="8389694" symbol="dithering"/>
<entry id="8388934" method="true" symbol="momentNative"/>
<entry id="8389973" object="true" symbol="Route"/>
<entry id="8389177" method="true" symbol="clear"/>
<entry id="8389184" method="true" symbol="drawLine"/>
<entry id="8389971" method="true" symbol="getRoutes"/>
<entry field="true" id="8389222" symbol="MSG_CODE_EVENT_CHANNEL_CLOSED"/>
<entry id="8389330" symbol="december"/>
<entry id="8389962" method="true" symbol="getName"/>
<entry id="8389788" method="true" symbol="assertEqualMessage"/>
<entry id="8389318" symbol="semicircles"/>
<entry id="8389642" symbol="title"/>
<entry id="8389629" method="true" symbol="getValue"/>
<entry id="8389657" symbol="maxHeight"/>
<entry field="true" id="8388852" symbol="SUB_SPORT_STREET"/>
<entry id="8389333" symbol="tuesday"/>
<entry id="8388712" method="true" symbol="print"/>
<entry id="8389534" module="true" symbol="PersistedLocations"/>
<entry field="true" id="8388837" symbol="SPORT_SOCCER"/>
<entry id="8389641" method="true" symbol="onEvent"/>
<entry id="8390013" object="true" symbol="LightNetwork"/>
<entry field="true" id="8389165" symbol="COLOR_GREEN"/>
<entry id="8388689" method="true" symbol="testDuration"/>
<entry id="8389097" method="true" symbol="onKey"/>
<entry field="true" id="8389663" symbol="SCREEN_SHAPE_ROUND"/>
<entry id="8389072" symbol="BEHAVIOR_NEXT_PAGE"/>
<entry id="8389256" method="true" symbol="open"/>
<entry field="true" id="8389904" symbol="FONT_SYSTEM_XTINY"/>
<entry field="true" id="8388833" symbol="SPORT_TRANSITION"/>
<entry id="8388631" module="true" symbol="Activity"/>
<entry id="8390036" method="true" symbol="onTorqueEffectivenessPedalSmoothnessUpdate"/>
<entry id="8389782" module="true" symbol="StringUtil"/>
<entry field="true" id="8389229" symbol="NETWORK_PUBLIC"/>
<entry id="8388883" method="true" symbol="discard"/>
<entry id="8390034" method="true" symbol="onCalculatedWheelSpeedUpdate"/>
<entry field="true" id="8389221" symbol="MSG_CODE_EVENT_TRANSFER_TX_FAILED"/>
<entry field="true" id="8389166" symbol="COLOR_DK_GREEN"/>
<entry id="8389019" object="true" symbol="SwipeEvent"/>
<entry field="true" id="8389411" symbol="BATT_STATUS_NEW"/>
<entry id="8388931" symbol="getMonthHash"/>
<entry id="8388710" object="true" symbol="Stats"/>
<entry id="8389022" symbol="InputEvent"/>
<entry id="8388957" method="true" symbol="enableSensorEvents"/>
<entry id="8389893" symbol="mKeyToSelectable"/>
<entry field="true" id="8389416" symbol="BATT_STATUS_INVALID"/>
<entry field="true" id="8388812" symbol="INVALID_HTTP_METHOD_IN_REQUEST"/>
<entry field="true" id="8389607" symbol="LAYOUT_VALIGN_TOP"/>
<entry id="8389327" symbol="september"/>
<entry field="true" id="8389385" symbol="FONT_NUMBER_MILD"/>
<entry field="true" id="8389158" symbol="COLOR_LT_GRAY"/>
<entry field="true" id="8388975" symbol="TONE_RESET"/>
<entry id="8389056" symbol="SWITCH_VIEW"/>
<entry id="8389192" method="true" symbol="setPenWidth"/>
<entry id="8388933" method="true" symbol="moment"/>
<entry field="true" id="8389149" symbol="restingHeartRate"/>
<entry id="8388780" method="true" symbol="invoke"/>
<entry field="true" id="8389905" symbol="FONT_SYSTEM_TINY"/>
<entry id="8389235" object="true" symbol="GenericChannel"/>
<entry id="8389121" method="true" symbol="findDrawableById"/>
<entry id="8389748" method="true" symbol="onTimerStop"/>
<entry field="true" id="8389815" symbol="frontDerailleurIndex"/>
<entry id="8389827" method="true" symbol="toNumberWithBase"/>
<entry id="8388611" module="true" symbol="Toybox"/>
<entry field="true" id="8389427" symbol="BIKE_POWER_SENSOR_TYPE_POWER_ONLY"/>
<entry id="8389884" object="true" symbol="Selectable"/>
<entry id="8389074" symbol="BEHAVIOR_ON_MENU"/>
<entry field="true" id="8389089" symbol="MAX_SIZE"/>
<entry id="8388645" module="true" symbol="Time"/>
<entry id="8389336" symbol="friday"/>
<entry field="true" id="8389157" symbol="COLOR_WHITE"/>
<entry id="8390053" object="true" symbol="BurstPayload"/>
<entry id="8389791" object="true" symbol="AssertException"/>
<entry id="8390012" object="true" symbol="BikeLight"/>
<entry field="true" id="8389039" symbol="NUMBER_PICKER_CALORIES"/>
<entry field="true" id="8388916" symbol="startOfDay"/>
<entry field="true" id="8389197" symbol="MSG_ID_UNASSIGN_CHANNEL"/>
<entry field="true" id="8389756" symbol="HR_ZONE_SPORT_SWIMMING"/>
<entry id="8389516" method="true" symbol="getPedalPowerBalance"/>
<entry field="true" id="8388871" symbol="SUB_SPORT_WARM_UP"/>
<entry id="8388793" method="true" symbol="keys"/>
<entry field="true" id="8388980" symbol="TONE_FAILURE"/>
<entry id="8389823" method="true" symbol="indexOf"/>
<entry id="8389133" method="true" symbol="setJustification"/>
<entry field="true" id="8389560" symbol="KEY_RESET"/>
<entry id="8389299" method="true" symbol="parse"/>
<entry id="8389077" symbol="BEHAVIOR_ON_PREVIOUS_MODE"/>
<entry field="true" id="8389300" symbol="LOCATION_ONE_SHOT"/>
<entry field="true" id="8389980" symbol="LIGHT_NETWORK_STATE_NOT_FORMED"/>
<entry field="true" id="8389673" symbol="isTouchScreen"/>
<entry field="true" id="8389214" symbol="MSG_ID_CHANNEL_RESPONSE_EVENT"/>
<entry field="true" id="8388917" symbol="FORMAT_SHORT"/>
<entry field="true" id="8389588" symbol="HTTP_REQUEST_METHOD_GET"/>
<entry field="true" id="8388979" symbol="TONE_DISTANCE_ALERT"/>
<entry field="true" id="8389906" symbol="FONT_SYSTEM_SMALL"/>
<entry id="8389882" object="true" symbol="SelectableEvent"/>
<entry field="true" id="8389201" symbol="MSG_ID_SEARCH_TIMEOUT"/>
<entry id="8389619" method="true" symbol="onSelect"/>
<entry id="8389107" method="true" symbol="setBitmap"/>
<entry field="true" id="8388861" symbol="SUB_SPORT_CYCLOCROSS"/>
<entry field="true" id="8389674" symbol="inputButtons"/>
<entry field="true" id="8389812" symbol="TIMER_STATE_PAUSED"/>
<entry field="true" id="8388893" symbol="PI"/>
<entry field="true" id="8388720" symbol="hour"/>
<entry id="8390045" method="true" symbol="getTorqueEffectivenessPedalSmoothness"/>
<entry field="true" id="8388927" symbol="SECONDS_PER_YEAR"/>
<entry id="8389340" symbol="years"/>
<entry field="true" id="8389037" symbol="NUMBER_PICKER_WEIGHT"/>
<entry field="true" id="8388846" symbol="SPORT_MOUNTAINEERING"/>
<entry id="8389794" method="true" symbol="warning"/>
<entry id="8389961" symbol="_id"/>
<entry field="true" id="8389925" symbol="nameOfDestination"/>
<entry id="8389645" symbol="nextArrow"/>
<entry field="true" id="8389207" symbol="MSG_ID_LIB_CONFIG"/>
<entry id="8389945" object="true" symbol="PreviousOperationNotCompleteException"/>
<entry id="8389565" method="true" symbol="encodeURL"/>
<entry field="true" id="8389589" symbol="HTTP_REQUEST_METHOD_PUT"/>
<entry id="8388770" symbol="Strings"/>
<entry field="true" id="8389897" symbol="stateDefault"/>
<entry field="true" id="8389430" symbol="BIKE_POWER_SENSOR_TYPE_CRANK_TORQUE_FREQUENCY"/>
<entry id="8388783" method="true" symbol="toString"/>
<entry field="true" id="8389984" symbol="LIGHT_NETWORK_MODE_AUTO"/>
<entry id="8389305" symbol="lat"/>
<entry id="8388643" module="true" symbol="Sensor"/>
<entry field="true" id="8388950" symbol="SENSOR_BIKESPEED"/>
<entry id="8390066" method="true" symbol="saveWaypoint"/>
<entry field="true" id="8388834" symbol="SPORT_FITNESS_EQUIPMENT"/>
<entry id="8389790" method="true" symbol="assertNotEqualMessage"/>
<entry id="8389546" symbol="mHeight"/>
<entry field="true" id="8388830" symbol="SPORT_GENERIC"/>
<entry field="true" id="8389913" symbol="GOAL_TYPE_STEPS"/>
<entry id="8388777" method="true" symbol="toLong"/>
<entry id="8389247" symbol="measurementType"/>
<entry id="8388764" method="true" symbol="format"/>
<entry field="true" id="8390009" symbol="LIGHT_TYPE_SIGNAL_LEFT"/>
<entry field="true" id="8389819" symbol="rearDerailleurMax"/>
<entry id="8389620" symbol="mConfirm"/>
<entry field="true" id="8388756" symbol="averageDistance"/>
<entry field="true" id="8388965" symbol="heading"/>
<entry field="true" id="8389146" symbol="sleepTime"/>
<entry field="true" id="8389011" symbol="CLICK_TYPE_TAP"/>
<entry id="8389783" module="true" symbol="APITest"/>
<entry field="true" id="8389138" symbol="label"/>
<entry field="true" id="8388953" symbol="SENSOR_FOOTPOD"/>
<entry id="8389894" method="true" symbol="setKeyToSelectableInteraction"/>
<entry id="8389342" symbol="hours"/>
<entry field="true" id="8389614" symbol="LAYOUT_HALIGN_START"/>
<entry field="true" id="8389947" symbol="uri"/>
<entry id="8389136" method="true" symbol="getKey"/>
<entry field="true" id="8389160" symbol="COLOR_BLACK"/>
<entry id="8389195" symbol="mDrawContext"/>
<entry id="8389082" method="true" symbol="onNextMode"/>
<entry id="8389700" object="true" symbol="HeartRateSample"/>
<entry id="8389095" method="true" symbol="addItem"/>
<entry field="true" id="8388848" symbol="SPORT_MULTISPORT"/>
<entry field="true" id="8389999" symbol="LIGHT_MODE_SIGNAL_RIGHT"/>
<entry id="8388946" method="true" symbol="greaterThan"/>
<entry field="true" id="8388731" symbol="startTime"/>
<entry id="8388650" object="true" symbol="Dictionary"/>
<entry id="8389865" object="true" symbol="ActiveMinutes"/>
<entry field="true" id="8389816" symbol="frontDerailleurMax"/>
<entry id="8389958" object="true" symbol="Waypoint"/>
<entry field="true" id="8389867" symbol="moderate"/>
<entry id="8389028" object="true" symbol="MenuInputDelegate"/>
<entry id="8389878" method="true" symbol="utcInfo"/>
<entry id="8389075" symbol="BEHAVIOR_ON_BACK"/>
<entry field="true" id="8388954" symbol="SENSOR_HEARTRATE"/>
<entry id="8389280" method="true" symbol="getInitialView"/>
<entry id="8389757" method="true" symbol="getHeartRateZones"/>
<entry field="true" id="8389989" symbol="LIGHT_MODE_ST_41_60"/>
<entry id="8389275" method="true" symbol="getApp"/>
<entry field="true" id="8389522" symbol="serial"/>
<entry field="true" id="8389981" symbol="LIGHT_NETWORK_STATE_FORMING"/>
<entry id="8389799" object="true" symbol="SensorHistoryIterator"/>
<entry field="true" id="8388736" symbol="currentLocation"/>
<entry field="true" id="8389035" symbol="NUMBER_PICKER_TIME_MIN_SEC"/>
<entry field="true" id="8389664" symbol="SCREEN_SHAPE_SEMI_ROUND"/>
<entry field="true" id="8388918" symbol="FORMAT_MEDIUM"/>
<entry id="8389068" method="true" symbol="draw"/>
<entry id="8389128" symbol="mFont"/>
<entry field="true" id="8388873" symbol="SUB_SPORT_EXERCISE"/>
<entry id="8389377" method="true" symbol="onExitSleep"/>
<entry field="true" id="8389849" symbol="units"/>
<entry id="8388879" object="true" symbol="Session"/>
<entry id="8389943" object="true" symbol="UnexpectedAppTypeException"/>
<entry id="8388797" method="true" symbol="substring"/>
<entry field="true" id="8389216" symbol="MSG_CODE_EVENT_RX_SEARCH_TIMEOUT"/>
<entry id="8388718" method="true" symbol="error"/>
<entry id="8389284" method="true" symbol="deleteProperty"/>
<entry field="true" id="8388723" symbol="timeZoneOffset"/>
<entry field="true" id="8389225" symbol="MSG_CODE_CHANNEL_ID_NOT_SET"/>
<entry id="8390059" symbol="burstPayload"/>
<entry id="8388878" symbol="Symbols"/>
<entry field="true" id="8388727" symbol="totalMemory"/>
<entry field="true" id="8388849" symbol="SPORT_PADDLING"/>
<entry id="8388640" module="true" symbol="Lang"/>
<entry id="8390021" method="true" symbol="getBikeLights"/>
<entry id="8389681" symbol="mChannelNumber"/>
<entry field="true" id="8389040" symbol="NUMBER_PICKER_BIRTH_YEAR"/>
<entry field="true" id="8389169" symbol="COLOR_PURPLE"/>
<entry id="8389252" method="true" symbol="setPayload"/>
<entry id="8389625" method="true" symbol="setOptions"/>
<entry id="8388639" module="true" symbol="Graphics"/>
<entry field="true" id="8389403" symbol="paceUnits"/>
<entry field="true" id="8389033" symbol="NUMBER_PICKER_DISTANCE"/>
<entry id="8389949" object="true" symbol="SymbolNotAllowedException"/>
<entry field="true" id="8389140" symbol="GENDER_MALE"/>
<entry field="true" id="8389872" symbol="floorsClimbed"/>
<entry id="8389826" method="true" symbol="slice"/>
<entry field="true" id="8389262" symbol="DEFAULT_DEVICE_NUMBER"/>
<entry id="8388945" method="true" symbol="lessThan"/>
<entry field="true" id="8389652" symbol="energyExpenditure"/>
<entry field="true" id="8389877" symbol="activeMinutes"/>
<entry field="true" id="8388751" symbol="averageCadence"/>
<entry field="true" id="8388876" symbol="SUB_SPORT_CARDIO_TRAINING"/>
<entry id="8388794" method="true" symbol="values"/>
<entry field="true" id="8389294" symbol="QUALITY_LAST_KNOWN"/>
<entry id="8389053" object="true" symbol="BitmapResource"/>
<entry field="true" id="8389401" symbol="is24Hour"/>
<entry field="true" id="8389270" symbol="messagePeriod"/>
<entry id="8389234" object="true" symbol="DeviceConfig"/>
<entry id="8389802" method="true" symbol="getElevationHistory"/>
<entry field="true" id="8389521" symbol="modelNumber"/>
<entry field="true" id="8389928" symbol="nameOfNextPoint"/>
<entry field="true" id="8389860" symbol="DATA_TYPE_STRING"/>
<entry id="8389646" symbol="previousArrow"/>
<entry id="8389436" object="true" symbol="CalculatedWheelSpeed"/>
<entry field="true" id="8389269" symbol="DEFAULT_THRESHOLD"/>
<entry id="8389112" symbol="mType"/>
<entry field="true" id="8389208" symbol="MSG_ID_PROXIMITY_SEARCH"/>
<entry field="true" id="8389966" symbol="HTTP_RESPONSE_CONTENT_TYPE_GPX"/>
<entry id="8388769" symbol="Rez"/>
<entry id="8389176" object="true" symbol="Dc"/>
<entry field="true" id="8388850" symbol="SUB_SPORT_GENERIC"/>
<entry id="8389060" object="true" symbol="Text"/>
<entry id="8389123" method="true" symbol="onShow"/>
<entry field="true" id="8389007" symbol="ANIM_TYPE_EASE_IN"/>
<entry field="true" id="8388831" symbol="SPORT_RUNNING"/>
<entry id="8389027" object="true" symbol="Menu"/>
<entry field="true" id="8389295" symbol="QUALITY_POOR"/>
<entry id="8389117" method="true" symbol="getWidth"/>
<entry field="true" id="8389638" symbol="NETWORK_KEY_LENGTH_128BIT"/>
<entry field="true" id="8389503" symbol="pedalPowerPercent"/>
<entry id="8388924" module="true" symbol="Gregorian"/>
<entry id="8388708" object="true" symbol="BehaviorDelegate"/>
<entry id="8388782" method="true" symbol="size"/>
<entry field="true" id="8389471" symbol="leftTorqueEffectiveness"/>
<entry id="8389835" method="true" symbol="makeWebRequest"/>
<entry id="8389319" symbol="january"/>
<entry id="8389042" object="true" symbol="NumberPickerDelegate"/>
<entry id="8389916" method="true" symbol="getGoalView"/>
<entry id="8389627" method="true" symbol="getBackgroundColor"/>
<entry id="8390035" method="true" symbol="onPedalPowerBalanceUpdate"/>
<entry id="8389236" object="true" symbol="Message"/>
<entry field="true" id="8388860" symbol="SUB_SPORT_RECUMBENT"/>
<entry field="true" id="8388972" symbol="TONE_LOUD_BEEP"/>
<entry id="8389314" symbol="latitude"/>
<entry field="true" id="8389245" symbol="deviceType"/>
<entry id="8389070" method="true" symbol="setSize"/>
<entry field="true" id="8389029" symbol="CONFIRM_NO"/>
<entry field="true" id="8389526" symbol="batteryStatus"/>
<entry field="true" id="8389199" symbol="MSG_ID_CHANNEL_ID"/>
<entry field="true" id="8389291" symbol="GEO_DMS"/>
<entry field="true" id="8389015" symbol="SWIPE_UP"/>
<entry field="true" id="8388724" symbol="battery"/>
<entry field="true" id="8389523" symbol="swRevisionMain"/>
<entry id="8389062" symbol="mInitialValue"/>
<entry field="true" id="8389797" symbol="ORDER_OLDEST_FIRST"/>
<entry field="true" id="8389927" symbol="elevationAtNextPoint"/>
<entry id="8389341" symbol="days"/>
<entry field="true" id="8389891" symbol="symbol"/>
<entry field="true" id="8388868" symbol="SUB_SPORT_OPEN_WATER"/>
<entry id="8389710" symbol="mTime"/>
<entry id="8389616" object="true" symbol="PickerDelegate"/>
<entry id="8388889" symbol="mIndex"/>
<entry id="8388638" module="true" symbol="ActivityRecording"/>
<entry id="8389393" method="true" symbol="initResources"/>
<entry field="true" id="8388982" symbol="TONE_POWER"/>
<entry id="8388711" method="true" symbol="println"/>
<entry field="true" id="8389103" symbol="behavior"/>
<entry field="true" id="8389930" symbol="bearingFromStart"/>
<entry id="8389298" object="true" symbol="Location"/>
<entry field="true" id="8389998" symbol="LIGHT_MODE_SIGNAL_RIGHT_SC"/>
<entry field="true" id="8389910" symbol="FONT_SYSTEM_NUMBER_MEDIUM"/>
<entry id="8389106" method="true" symbol="getDimensions"/>
<entry field="true" id="8389855" symbol="DATA_TYPE_UINT8"/>
<entry field="true" id="8390046" symbol="numComponents"/>
<entry id="8389829" method="true" symbol="toUtf8Array"/>
<entry id="8388649" module="true" object="true" symbol="Test"/>
<entry field="true" id="8389995" symbol="LIGHT_MODE_AUTO"/>
<entry field="true" id="8388745" symbol="totalAscent"/>
<entry id="8389071" symbol="BEHAVIOR_NONE"/>
<entry id="8389118" symbol="mDirection"/>
<entry field="true" id="8389200" symbol="MSG_ID_CHANNEL_PERIOD"/>
<entry id="8389098" method="true" symbol="onTap"/>
<entry id="8389088" method="true" symbol="setDisplayString"/>
<entry field="true" id="8389817" symbol="frontDerailleurSize"/>
<entry id="8389575" symbol="mErrorCode"/>
<entry id="8388684" object="true" symbol="Object"/>
<entry id="8389626" method="true" symbol="onAccept"/>
<entry id="8388775" method="true" symbol="toNumber"/>
<entry field="true" id="8389610" symbol="LAYOUT_VALIGN_START"/>
<entry id="8389031" object="true" symbol="Confirmation"/>
<entry id="8390028" method="true" symbol="getComponentIdentifiers"/>
<entry id="8390024" method="true" symbol="setHeadlightsMode"/>
<entry field="true" id="8389808" symbol="period"/>
<entry id="8390064" method="true" symbol="onTransmitFail"/>
<entry id="8389752" method="true" symbol="onTimerReset"/>
<entry field="true" id="8388968" symbol="TONE_STOP"/>
<entry field="true" id="8388990" symbol="KEY_POWER"/>
<entry id="8389185" method="true" symbol="fillCircle"/>
<entry field="true" id="8389472" symbol="rightTorqueEffectiveness"/>
<entry id="8389512" method="true" symbol="getCalculatedPower"/>
<entry id="8388636" module="true" symbol="Attention"/>
<entry id="8389130" symbol="mColor"/>
<entry id="8389115" symbol="mMessage"/>
<entry id="8388762" object="true" symbol="Boolean"/>
<entry id="8389942" method="true" symbol="exitTo"/>
<entry id="8388729" object="true" symbol="Info"/>
<entry id="8389114" method="true" symbol="getType"/>
<entry id="8389052" object="true" symbol="FontResource"/>
<entry field="true" id="8389714" symbol="INVALID_HR_SAMPLE"/>
<entry id="8389687" method="true" symbol="drawArc"/>
<entry id="8388822" method="true" symbol="setMailboxListener"/>
<entry field="true" id="8388737" symbol="calories"/>
<entry field="true" id="8388832" symbol="SPORT_CYCLING"/>
<entry field="true" id="8388955" symbol="SENSOR_TEMPERATURE"/>
<entry id="8389887" symbol="mInstance"/>
<entry id="8389131" method="true" symbol="setColor"/>
<entry id="8389972" method="true" symbol="getTracks"/>
<entry field="true" id="8389380" symbol="OBSCURE_TOP"/>
<entry field="true" id="8388804" symbol="BLE_NO_DATA"/>
<entry field="true" id="8389900" symbol="stateDisabled"/>
<entry field="true" id="8389908" symbol="FONT_SYSTEM_LARGE"/>
<entry field="true" id="8389807" symbol="data"/>
<entry id="8388702" method="true" symbol="initialize"/>
<entry id="8389515" method="true" symbol="getCalculatedWheelSpeed"/>
<entry id="8388728" method="true" symbol="getActivityInfo"/>
<entry id="8389320" symbol="february"/>
<entry id="8390026" method="true" symbol="toggleSignalLight"/>
<entry id="8389554" method="true" symbol="onKeyReleased"/>
<entry field="true" id="8389562" symbol="KEY_CLOCK"/>
<entry id="8388790" method="true" symbol="hasKey"/>
<entry id="8389283" method="true" symbol="setProperty"/>
<entry id="8389758" method="true" symbol="getCurrentSport"/>
<entry id="8390033" method="true" symbol="onCalculatedWheelDistanceUpdate"/>
<entry field="true" id="8390008" symbol="LIGHT_TYPE_SIGNAL_CONFIG"/>
<entry id="8389864" method="true" symbol="setData"/>
<entry id="8389953" module="true" symbol="PersistedContent"/>
<entry field="true" id="8389172" symbol="TEXT_JUSTIFY_RIGHT"/>
<entry id="8389343" symbol="minutes"/>
<entry id="8389254" method="true" symbol="getDeviceConfig"/>
<entry id="8389113" method="true" symbol="getCoordinates"/>
<entry field="true" id="8389898" symbol="stateHighlighted"/>
<entry id="8390061" method="true" symbol="onReceiveComplete"/>
<entry id="8388880" method="true" symbol="addLap"/>
<entry id="8388935" method="true" symbol="duration"/>
<entry field="true" id="8389543" symbol="phoneConnected"/>
<entry id="8389957" method="true" symbol="getWorkouts"/>
<entry id="8389397" object="true" symbol="DeviceSettings"/>
<entry id="8388818" method="true" symbol="makeJsonRequestNative"/>
<entry field="true" id="8389289" symbol="GEO_DEG"/>
<entry id="8389055" symbol="POP_VIEW"/>
<entry field="true" id="8389853" symbol="MESG_TYPE_RECORD"/>
<entry id="8388986" object="true" symbol="VibeProfile"/>
<entry id="8389410" module="true" symbol="AntPlus"/>
<entry field="true" id="8388967" symbol="TONE_START"/>
<entry id="8389977" object="true" symbol="ManufacturerInfo"/>
<entry field="true" id="8389915" symbol="GOAL_TYPE_ACTIVE_MINUTES"/>
<entry field="true" id="8389244" symbol="deviceNumber"/>
<entry field="true" id="8389669" symbol="BUTTON_INPUT_MENU"/>
<entry field="true" id="8389388" symbol="FONT_NUMBER_THAI_HOT"/>
<entry field="true" id="8388973" symbol="TONE_INTERVAL_ALERT"/>
<entry field="true" id="8389250" symbol="timestamp"/>
<entry field="true" id="8389924" symbol="elevationAtDestination"/>
<entry id="8388647" module="true" symbol="UserProfile"/>
<entry id="8388888" symbol="mLocation"/>
<entry field="true" id="8388795" method="true" symbol="length"/>
<entry field="true" id="8389899" symbol="stateSelected"/>
<entry id="8388761" object="true" symbol="Double"/>
<entry id="8389375" object="true" symbol="WatchFace"/>
<entry field="true" id="8389594" symbol="headers"/>
<entry field="true" id="8389143" symbol="weight"/>
<entry id="8389621" symbol="mNextArrow"/>
<entry id="8389069" method="true" symbol="setLocation"/>
<entry field="true" id="8389268" symbol="DEFAULT_SEARCH_TIMEOUT_HIGH"/>
<entry field="true" id="8389399" symbol="vibrateOn"/>
<entry field="true" id="8389421" symbol="DEVICE_STATE_SEARCHING"/>
<entry id="8389282" method="true" symbol="getProperty"/>
<entry id="8389433" object="true" symbol="CalculatedPower"/>
<entry id="8389806" method="true" symbol="getOldestSampleTime"/>
<entry field="true" id="8389692" symbol="IMAGE_DITHERING_NONE"/>
<entry field="true" id="8389301" symbol="LOCATION_CONTINUOUS"/>
<entry id="8388766" object="true" symbol="Array"/>
<entry id="8389902" method="true" symbol="getState"/>
<entry field="true" id="8389293" symbol="QUALITY_NOT_AVAILABLE"/>
<entry id="8390015" object="true" symbol="CalculatedCadence"/>
<entry id="8388685" method="true" symbol="testLocationRadians"/>
<entry field="true" id="8389198" symbol="MSG_ID_ASSIGN_CHANNEL"/>
<entry id="8388922" method="true" symbol="now"/>
<entry field="true" id="8388991" symbol="KEY_LIGHT"/>
<entry field="true" id="8389400" symbol="tonesOn"/>
<entry field="true" id="8388952" symbol="SENSOR_BIKEPOWER"/>
<entry field="true" id="8389267" symbol="DEFAULT_SEARCH_TIMEOUT_LOW"/>
<entry id="8389954" object="true" symbol="Iterator"/>
<entry id="8389126" method="true" symbol="setLayout"/>
<entry field="true" id="8388890" symbol="sport"/>
<entry field="true" id="8389558" symbol="KEY_START"/>
<entry field="true" id="8389163" symbol="COLOR_ORANGE"/>
<entry id="8389705" symbol="mMin"/>
<entry field="true" id="8388914" symbol="moveBarLevel"/>
<entry field="true" id="8390050" symbol="BURST_ERROR_SEQUENCE_NUMBER_FAIL"/>
<entry field="true" id="8388892" symbol="name"/>
<entry id="8389183" method="true" symbol="drawBitmap"/>
<entry id="8389061" symbol="mMode"/>
<entry id="8389178" method="true" symbol="drawCircle"/>
<entry field="true" id="8389911" symbol="FONT_SYSTEM_NUMBER_HOT"/>
<entry field="true" id="8389203" symbol="MSG_ID_NETWORK_KEY"/>
<entry field="true" id="8389605" symbol="accel"/>
<entry field="true" id="8388810" symbol="INVALID_HTTP_HEADER_FIELDS_IN_REQUEST"/>
<entry id="8389080" method="true" symbol="onMenu"/>
<entry id="8389655" method="true" symbol="stillAlive"/>
<entry id="8389194" method="true" symbol="getFontHeight"/>
<entry field="true" id="8389876" symbol="metersDescended"/>
<entry id="8389105" symbol="mBitmapData"/>
<entry field="true" id="8388962" symbol="temperature"/>
<entry field="true" id="8389833" symbol="HTTP_RESPONSE_CONTENT_TYPE_JSON"/>
<entry id="8388904" method="true" symbol="srand"/>
<entry field="true" id="8389239" symbol="DATA_PAYLOAD_LENGTH"/>
<entry id="8389127" symbol="mText"/>
<entry id="8389090" symbol="MenuItem"/>
<entry id="8389789" method="true" symbol="assertNotEqual"/>
<entry field="true" id="8389768" symbol="SWIM_STROKE_BREASTSTROKE"/>
<entry id="8389084" method="true" symbol="handleEvent"/>
<entry field="true" id="8389046" symbol="SLIDE_RIGHT"/>
<entry id="8389078" method="true" symbol="onNextPage"/>
<entry id="8390022" method="true" symbol="restoreHeadlightsNetworkModeControl"/>
<entry field="true" id="8389475" symbol="rightPedalSmoothness"/>
<entry field="true" id="8390000" symbol="LIGHT_MODE_HAZARD"/>
<entry field="true" id="8388964" symbol="pressure"/>
<entry field="true" id="8389164" symbol="COLOR_YELLOW"/>
<entry field="true" id="8389672" symbol="screenHeight"/>
<entry id="8388884" symbol="GeometryIterator"/>
<entry id="8389188" method="true" symbol="fillRectangle"/>
<entry field="true" id="8389426" symbol="BIKE_POWER_SENSOR_TYPE_NONE"/>
<entry id="8390027" method="true" symbol="getBatteryStatus"/>
<entry id="8389057" method="true" symbol="pageCtrlNative"/>
<entry field="true" id="8389038" symbol="NUMBER_PICKER_HEIGHT"/>
<entry field="true" id="8388815" symbol="INVALID_HTTP_HEADER_FIELDS_IN_NETWORK_RESPONSE"/>
<entry field="true" id="8389636" symbol="DEFAULT_NETWORK_KEY"/>
<entry id="8389481" symbol="setListener"/>
<entry id="8390040" method="true" symbol="onDeviceStateUpdate"/>
<entry field="true" id="8389474" symbol="leftOrCombinedPedalSmoothness"/>
<entry field="true" id="8389417" symbol="BATT_STATUS_CNT"/>
<entry id="8388690" method="true" symbol="testMoment"/>
<entry id="8388817" method="true" symbol="makeJsonRequest"/>
<entry field="true" id="8388803" symbol="BLE_SERVER_TIMEOUT"/>
<entry id="8388768" object="true" symbol="Exception"/>
<entry field="true" id="8388992" symbol="KEY_ZIN"/>
<entry field="true" id="8389412" symbol="BATT_STATUS_GOOD"/>
<entry field="true" id="8389675" symbol="partNumber"/>
<entry id="8388641" module="true" symbol="Math"/>
<entry field="true" id="8389045" symbol="SLIDE_LEFT"/>
<entry id="8389021" method="true" symbol="loadResource"/>
<entry id="8388688" method="true" symbol="testSystemError"/>
<entry id="8390062" method="true" symbol="onReceiveFail"/>
<entry field="true" id="8389668" symbol="BUTTON_INPUT_DOWN"/>
<entry field="true" id="8389211" symbol="MSG_ID_CLOSE_CHANNEL"/>
<entry id="8390017" object="true" symbol="BikePowerListener"/>
<entry field="true" id="8389809" symbol="order"/>
<entry field="true" id="8389770" symbol="SWIM_STROKE_DRILL"/>
<entry id="8389803" symbol="mNewestSampleTime"/>
<entry id="8389329" symbol="november"/>
<entry id="8389108" method="true" symbol="onResponse"/>
<entry id="8389821" object="true" symbol="Char"/>
<entry id="8389321" symbol="march"/>
<entry field="true" id="8388976" symbol="TONE_LAP"/>
<entry id="8389539" symbol="mInitialText"/>
<entry field="true" id="8389387" symbol="FONT_NUMBER_HOT"/>
<entry field="true" id="8388847" symbol="SPORT_HIKING"/>
<entry field="true" id="8389769" symbol="SWIM_STORKE_BUTTERFLY"/>
<entry id="8389073" symbol="BEHAVIOR_PREVIOUS_PAGE"/>
<entry field="true" id="8389290" symbol="GEO_DM"/>
<entry id="8389260" method="true" symbol="sendBroadcast"/>
<entry field="true" id="8388730" symbol="startLocation"/>
<entry id="8389623" symbol="mPattern"/>
<entry field="true" id="8389473" symbol="separatePedalSmoothnessSupport"/>
<entry id="8389704" symbol="mMax"/>
<entry id="8388646" module="true" object="true" symbol="Timer"/>
<entry field="true" id="8388853" symbol="SUB_SPORT_TRAIL"/>
<entry id="8389683" method="true" symbol="onSettingsChanged"/>
<entry id="8389801" method="true" symbol="getPressureHistory"/>
<entry id="8389286" method="true" symbol="loadProperties"/>
<entry id="8388799" method="true" symbol="toUpper"/>
<entry field="true" id="8389213" symbol="MSG_ID_ACKNOWLEDGED_DATA"/>
<entry id="8390054" object="true" symbol="BurstPayloadIterator"/>
<entry id="8389569" symbol="mSettings"/>
<entry field="true" id="8388719" symbol="dst"/>
<entry field="true" id="8389266" symbol="DEFAULT_RADIO_FREQUENCY"/>
<entry field="true" id="8388869" symbol="SUB_SPORT_FLEXIBILITY_TRAINING"/>
<entry id="8389978" object="true" symbol="ProductInfo"/>
<entry id="8389825" method="true" symbol="reverse"/>
<entry id="8388773" method="true" symbol="toFloat"/>
<entry id="8388634" module="true" symbol="Ant"/>
<entry field="true" id="8389677" symbol="monkeyVersion"/>
<entry field="true" id="8389104" symbol="event"/>
<entry id="8389679" method="true" symbol="cancelAllRequests"/>
<entry id="8390016" object="true" symbol="TorqueEffectivenessPedalSmoothness"/>
<entry id="8389660" symbol="palette"/>
<entry id="8389081" method="true" symbol="onBack"/>
<entry id="8389259" method="true" symbol="sendAcknowledge"/>
<entry field="true" id="8388697" symbol="timer2"/>
<entry field="true" id="8388696" symbol="timer1"/>
<entry field="true" id="8388875" symbol="SUB_SPORT_INDOOR_SKIING"/>
<entry field="true" id="8388786" method="true" symbol="method"/>
<entry id="8388948" method="true" symbol="multiply"/>
<entry id="8389086" symbol="mProgressValue"/>
<entry field="true" id="8389640" symbol="networkKey128Bit"/>
<entry id="8388796" method="true" symbol="find"/>
<entry field="true" id="8389795" symbol="doNotDisturb"/>
<entry id="8388988" method="true" symbol="backlight"/>
<entry field="true" id="8389676" symbol="firmwareVersion"/>
<entry id="8388648" module="true" symbol="WatchUi"/>
<entry field="true" id="8388996" symbol="KEY_FIND"/>
<entry id="8389553" method="true" symbol="onKeyPressed"/>
<entry id="8388921" object="true" symbol="Duration"/>
<entry id="8388798" method="true" symbol="toLower"/>
<entry field="true" id="8388748" symbol="averageHeartRate"/>
<entry field="true" id="8389018" symbol="SWIPE_LEFT"/>
<entry field="true" id="8389227" symbol="MSG_CODE_INVALID_MESSAGE"/>
<entry id="8389083" method="true" symbol="onPreviousMode"/>
<entry field="true" id="8389152" symbol="FONT_XTINY"/>
<entry id="8389281" method="true" symbol="onStop"/>
<entry field="true" id="8388971" symbol="TONE_ALERT_LO"/>
<entry field="true" id="8388915" symbol="isSleepMode"/>
<entry field="true" id="8389386" symbol="FONT_NUMBER_MEDIUM"/>
<entry field="true" id="8389419" symbol="DEVICE_STATE_DEAD"/>
<entry id="8389707" method="true" symbol="getMin"/>
<entry id="8388829" method="true" symbol="onComplete"/>
<entry id="8388691" object="true" symbol="TimerStop"/>
<entry id="8388885" method="true" symbol="getGeometry"/>
<entry id="8389335" symbol="thursday"/>
<entry id="8388925" symbol="monthHash"/>
<entry id="8389435" object="true" symbol="CalculatedWheelDistance"/>
<entry field="true" id="8389224" symbol="MSG_CODE_CHANNEL_IN_WRONG_STATE"/>
<entry field="true" id="8389395" symbol="UNIT_METRIC"/>
<entry id="8389025" object="true" symbol="SimpleDataField"/>
<entry id="8389545" symbol="mWidth"/>
<entry id="8388687" method="true" symbol="testLocationSemicircles"/>
<entry field="true" id="8388816" symbol="NETWORK_RESPONSE_TOO_LARGE"/>
<entry field="true" id="8388845" symbol="SPORT_ROWING"/>
<entry field="true" id="8388811" symbol="INVALID_HTTP_BODY_IN_REQUEST"/>
<entry id="8389141" object="true" symbol="Profile"/>
<entry id="8390048" method="true" symbol="onBikeLightUpdate"/>
<entry field="true" id="8389272" symbol="searchTimeoutLowPriority"/>
<entry field="true" id="8388749" symbol="maxHeartRate"/>
<entry field="true" id="8389065" symbol="locY"/>
<entry field="true" id="8389064" symbol="locX"/>
<entry id="8389120" symbol="mLayout"/>
<entry field="true" id="8388750" symbol="currentCadence"/>
<entry field="true" id="8388993" symbol="KEY_ZOUT"/>
<entry field="true" id="8389525" symbol="hwRevision"/>
<entry id="8388771" symbol="Drawables"/>
<entry id="8389193" method="true" symbol="getTextWidthInPixels"/>
<entry id="8389137" method="true" symbol="compute"/>
<entry id="8388920" object="true" symbol="Moment"/>
<entry field="true" id="8389923" symbol="distanceToDestination"/>
<entry id="8389901" symbol="mCurrentState"/>
<entry field="true" id="8389034" symbol="NUMBER_PICKER_TIME"/>
<entry field="true" id="8388891" symbol="subSport"/>
<entry field="true" id="8389209" symbol="MSG_ID_RESET_SYSTEM"/>
<entry field="true" id="8388854" symbol="SUB_SPORT_TRACK"/>
<entry id="8389964" method="true" symbol="toIntent"/>
<entry id="8389285" method="true" symbol="clearProperties"/>
<entry field="true" id="8389929" symbol="bearing"/>
<entry id="8389537" object="true" symbol="TextPicker"/>
<entry id="8389881" method="true" symbol="encodeBase64"/>
<entry id="8389122" method="true" symbol="onLayout"/>
<entry id="8388717" method="true" symbol="exit"/>
<entry field="true" id="8388963" symbol="altitude"/>
<entry field="true" id="8388977" symbol="TONE_CANARY"/>
<entry field="true" id="8389693" symbol="IMAGE_DITHERING_FLOYD_STEINBERG"/>
<entry field="true" id="8388970" symbol="TONE_ALERT_HI"/>
<entry field="true" id="8389649" symbol="activityTrackingOn"/>
<entry field="true" id="8389154" symbol="FONT_SMALL"/>
<entry field="true" id="8389796" symbol="ORDER_NEWEST_FIRST"/>
<entry field="true" id="8389936" symbol="nativeNum"/>
<entry field="true" id="8388732" symbol="elapsedTime"/>
<entry field="true" id="8389932" symbol="offCourseDistance"/>
<entry id="8389233" object="true" symbol="ChannelAssignment"/>
<entry id="8389879" method="true" symbol="charArrayToString"/>
<entry id="8389026" method="true" symbol="requestUpdate"/>
<entry id="8389654" object="true" symbol="WeakReference"/>
<entry field="true" id="8389144" symbol="gender"/>
<entry field="true" id="8388940" symbol="year"/>
<entry field="true" id="8389632" symbol="CHANNEL_TYPE_RX_ONLY"/>
<entry id="8389786" method="true" symbol="assertMessage"/>
<entry field="true" id="8388725" symbol="usedMemory"/>
<entry field="true" id="8388842" symbol="SPORT_CROSS_COUNTRY_SKIING"/>
<entry id="8389888" method="true" symbol="getPreviousState"/>
<entry field="true" id="8388844" symbol="SPORT_SNOWBOARDING"/>
<entry id="8389956" method="true" symbol="getCourses"/>
<entry id="8389322" symbol="april"/>
<entry id="8389181" method="true" symbol="drawRectangle"/>
<entry field="true" id="8388872" symbol="SUB_SPORT_MATCH"/>
<entry id="8389279" method="true" symbol="onStart"/>
<entry id="8388877" method="true" symbol="createSession"/>
<entry field="true" id="8389297" symbol="QUALITY_GOOD"/>
<entry field="true" id="8389670" symbol="screenShape"/>
<entry id="8389278" symbol="mPropertiesChanged"/>
<entry id="8388942" method="true" symbol="add"/>
<entry field="true" id="8389212" symbol="MSG_ID_BROADCAST_DATA"/>
<entry id="8388909" method="true" symbol="getInfo"/>
<entry id="8390038" method="true" symbol="onManufacturerInfoUpdate"/>
<entry field="true" id="8389556" symbol="EXTENDED_KEYS"/>
<entry field="true" id="8389985" symbol="LIGHT_NETWORK_MODE_HIGH_VIS"/>
<entry id="8389304" method="true" symbol="testInfoString"/>
<entry field="true" id="8388800" symbol="UNKNOWN_ERROR"/>
<entry field="true" id="8389591" symbol="HTTP_REQUEST_METHOD_DELETE"/>
<entry id="8390063" method="true" symbol="onTransmitComplete"/>
<entry field="true" id="8389820" symbol="rearDerailleurSize"/>
<entry id="8389747" method="true" symbol="onTimerStart"/>
<entry field="true" id="8389868" symbol="vigorous"/>
<entry id="8390032" method="true" symbol="onCalculatedPowerUpdate"/>
<entry id="8389288" method="true" symbol="validateProperty"/>
<entry id="8389309" method="true" symbol="toGeoString"/>
<entry id="8388901" method="true" symbol="rand"/>
<entry id="8389690" method="true" symbol="getFontDescent"/>
<entry id="8389383" method="true" symbol="getObscurityFlags"/>
<entry id="8389706" method="true" symbol="getMax"/>
<entry id="8388774" method="true" symbol="abs"/>
<entry id="8389647" symbol="confirm"/>
<entry field="true" id="8389834" symbol="HTTP_RESPONSE_CONTENT_TYPE_URL_ENCODED"/>
<entry id="8389032" object="true" symbol="ConfirmationDelegate"/>
<entry id="8388985" method="true" symbol="playTone"/>
<entry field="true" id="8388836" symbol="SPORT_BASKETBALL"/>
<entry field="true" id="8389171" symbol="COLOR_TRANSPARENT"/>
<entry field="true" id="8388738" symbol="currentSpeed"/>
<entry field="true" id="8389520" symbol="manufacturerId"/>
<entry field="true" id="8389302" symbol="LOCATION_DISABLE"/>
<entry field="true" id="8388867" symbol="SUB_SPORT_LAP_SWIMMING"/>
<entry field="true" id="8389218" symbol="MSG_CODE_EVENT_TX"/>
<entry id="8390030" method="true" symbol="getProductInfo"/>
<entry field="true" id="8389637" symbol="NETWORK_KEY_LENGTH_64BIT"/>
<entry id="8389344" symbol="seconds"/>
<entry field="true" id="8388734" symbol="elapsedDistance"/>
<entry field="true" id="8389851" symbol="MESG_TYPE_SESSION"/>
<entry field="true" id="8388928" symbol="SECONDS_PER_DAY"/>
<entry field="true" id="8389048" symbol="SLIDE_UP"/>
<entry field="true" id="8388865" symbol="SUB_SPORT_ELLIPTICAL"/>
<entry field="true" id="8388858" symbol="SUB_SPORT_MOUNTAIN"/>
<entry field="true" id="8388984" symbol="TONE_ERROR"/>
<entry id="8389376" method="true" symbol="onEnterSleep"/>
<entry field="true" id="8389310" symbol="position"/>
<entry id="8388701" method="true" symbol="callback2"/>
<entry id="8389190" method="true" symbol="drawText"/>
<entry id="8388700" method="true" symbol="callback1"/>
<entry id="8388821" method="true" symbol="getMailbox"/>
<entry field="true" id="8388747" symbol="currentHeartRate"/>
<entry id="8389348" symbol="font"/>
<entry field="true" id="8389667" symbol="BUTTON_INPUT_UP"/>
<entry field="true" id="8389871" symbol="activeMinutesWeekGoal"/>
<entry field="true" id="8389686" symbol="ARC_CLOCKWISE"/>
<entry field="true" id="8389926" symbol="distanceToNextPoint"/>
<entry field="true" id="8389414" symbol="BATT_STATUS_LOW"/>
<entry id="8389510" symbol="DEVICE_TYPE_BIKE_POWER"/>
<entry field="true" id="8389001" symbol="KEY_LEFT"/>
<entry id="8389249" symbol="thresholdConfiguration"/>
<entry field="true" id="8389161" symbol="COLOR_RED"/>
<entry id="8389896" method="true" symbol="setBackgroundColor"/>
<entry id="8389187" method="true" symbol="fillPolygon"/>
<entry id="8389132" method="true" symbol="setFont"/>
<entry field="true" id="8389223" symbol="MSG_CODE_EVENT_RX_FAIL_GO_TO_SEARCH"/>
<entry id="8389784" object="true" symbol="Logger"/>
<entry id="8389535" method="true" symbol="persistLocation"/>
<entry field="true" id="8388874" symbol="SUB_SPORT_CHALLENGE"/>
<entry id="8389718" method="true" symbol="floor"/>
<entry field="true" id="8389407" symbol="temperatureUnits"/>
<entry id="8389787" method="true" symbol="assertEqual"/>
<entry field="true" id="8389173" symbol="TEXT_JUSTIFY_CENTER"/>
<entry id="8389969" symbol="_data"/>
<entry id="8389963" method="true" symbol="getId"/>
<entry id="8389743" symbol="backgroundColor"/>
<entry id="8389347" symbol="color"/>
<entry field="true" id="8389967" symbol="HTTP_RESPONSE_CONTENT_TYPE_FIT"/>
<entry field="true" id="8389771" symbol="SWIM_STROKE_MIXED"/>
<entry field="true" id="8390001" symbol="LIGHT_MODE_CUSTOM_5"/>
<entry field="true" id="8390002" symbol="LIGHT_MODE_CUSTOM_4"/>
<entry field="true" id="8390003" symbol="LIGHT_MODE_CUSTOM_3"/>
<entry field="true" id="8390004" symbol="LIGHT_MODE_CUSTOM_2"/>
<entry field="true" id="8390005" symbol="LIGHT_MODE_CUSTOM_1"/>
<entry id="8389842" method="true" symbol="openWebPage"/>
<entry id="8389328" symbol="october"/>
<entry field="true" id="8389997" symbol="LIGHT_MODE_SIGNAL_LEFT"/>
<entry field="true" id="8390007" symbol="LIGHT_TYPE_TAILLIGHT"/>
<entry id="8388947" method="true" symbol="value"/>
<entry field="true" id="8388930" symbol="SECONDS_PER_MINUTE"/>
<entry id="8388763" object="true" symbol="String"/>
<entry field="true" id="8389912" symbol="FONT_SYSTEM_NUMBER_THAI_HOT"/>
<entry field="true" id="8389524" symbol="swRevisionSupplemental"/>
<entry field="true" id="8389846" symbol="type"/>
<entry id="8388905" method="true" symbol="tan"/>
<entry id="8389903" method="true" symbol="setState"/>
<entry field="true" id="8389848" symbol="fieldId"/>
<entry field="true" id="8389948" symbol="arguments"/>
<entry field="true" id="8388808" symbol="BLE_UNKNOWN_SEND_ERROR"/>
<entry field="true" id="8389271" symbol="radioFrequency"/>
<entry field="true" id="8388958" symbol="speed"/>
<entry field="true" id="8388939" symbol="day"/>
<entry id="8389119" method="true" symbol="getDirection"/>
<entry field="true" id="8389246" symbol="transmissionType"/>
<entry id="8389043" object="true" symbol="ProgressBar"/>
<entry field="true" id="8389990" symbol="LIGHT_MODE_ST_21_40"/>
<entry id="8388819" method="true" symbol="makeImageRequest"/>
<entry field="true" id="8388801" symbol="BLE_ERROR"/>
<entry id="8389889" method="true" symbol="getInstance"/>
<entry field="true" id="8389608" symbol="LAYOUT_VALIGN_BOTTOM"/>
<entry id="8389538" object="true" symbol="TextPickerDelegate"/>
<entry field="true" id="8388809" symbol="BLE_CONNECTION_UNAVAILABLE"/>
<entry field="true" id="8389382" symbol="OBSCURE_BOTTOM"/>
<entry field="true" id="8389273" symbol="searchTimeoutHighPriority"/>
<entry field="true" id="8389067" symbol="height"/>
<entry field="true" id="8389237" symbol="channelType"/>
<entry id="8388692" object="true" symbol="TimerStart"/>
<entry id="8388709" object="true" symbol="ClockTime"/>
<entry field="true" id="8388951" symbol="SENSOR_BIKECADENCE"/>
<entry field="true" id="8389174" symbol="TEXT_JUSTIFY_LEFT"/>
<entry id="8389251" method="true" symbol="getPayload"/>
<entry field="true" id="8388805" symbol="BLE_REQUEST_CANCELLED"/>
<entry field="true" id="8389422" symbol="DEVICE_STATE_TRACKING"/>
<entry id="8389338" symbol="minute"/>
<entry field="true" id="8388814" symbol="INVALID_HTTP_BODY_IN_NETWORK_RESPONSE"/>
<entry id="8390020" method="true" symbol="getNetworkState"/>
<entry field="true" id="8389611" symbol="LAYOUT_HALIGN_LEFT"/>
<entry id="8388787" method="true" symbol="equals"/>
<entry id="8388789" method="true" symbol="get"/>
<entry id="8388897" method="true" symbol="atan"/>
<entry id="8389109" method="true" symbol="onMenuItem"/>
<entry id="8389243" symbol="flag"/>
<entry id="8389182" method="true" symbol="drawRoundedRectangle"/>
<entry field="true" id="8389240" symbol="messageId"/>
<entry field="true" id="8388739" symbol="averageSpeed"/>
<entry id="8389822" method="true" symbol="addAll"/>
<entry field="true" id="8390049" symbol="BURST_ERROR_OUT_OF_MEMORY"/>
<entry id="8389091" symbol="mItems"/>
<entry field="true" id="8389030" symbol="CONFIRM_YES"/>
<entry id="8390018" symbol="DEVICE_TYPE_BIKE_LIGHT"/>
<entry id="8389129" symbol="mJustification"/>
<entry id="8389845" method="true" symbol="createField"/>
<entry id="8389750" method="true" symbol="onTimerResume"/>
<entry id="8388714" method="true" symbol="getClockTime"/>
<entry field="true" id="8389405" symbol="weightUnits"/>
<entry id="8389276" object="true" symbol="AppBase"/>
<entry id="8389702" method="true" symbol="getHeartRateHistory"/>
<entry id="8389339" symbol="second"/>
<entry id="8389058" object="true" symbol="Drawable"/>
<entry field="true" id="8388838" symbol="SPORT_TENNIS"/>
<entry id="8388788" method="true" symbol="put"/>
<entry field="true" id="8389296" symbol="QUALITY_USABLE"/>
<entry field="true" id="8388757" symbol="currentHeading"/>
<entry field="true" id="8389766" symbol="SWIM_STROKE_FREESTYLE"/>
<entry id="8389514" method="true" symbol="getCalculatedWheelDistance"/>
<entry field="true" id="8388746" symbol="totalDescent"/>
<entry field="true" id="8389012" symbol="CLICK_TYPE_HOLD"/>
<entry field="true" id="8389292" symbol="GEO_MGRS"/>
<entry id="8388765" object="true" symbol="Symbol"/>
<entry id="8390037" method="true" symbol="onBatteryStatusUpdate"/>
<entry field="true" id="8389238" symbol="network"/>
<entry id="8389959" object="true" symbol="Course"/>
<entry id="8389014" object="true" symbol="ClickEvent"/>
<entry field="true" id="8389583" symbol="alarmCount"/>
<entry field="true" id="8388754" symbol="swimSwolf"/>
<entry field="true" id="8388726" symbol="freeMemory"/>
<entry id="8390060" symbol="burstPayloadIndex"/>
<entry field="true" id="8388862" symbol="SUB_SPORT_HAND_CYCLING"/>
<entry id="8389241" symbol="dataLow"/>
<entry field="true" id="8388752" symbol="maxCadence"/>
<entry field="true" id="8389754" symbol="HR_ZONE_SPORT_RUNNING"/>
<entry field="true" id="8388929" symbol="SECONDS_PER_HOUR"/>
<entry field="true" id="8388851" symbol="SUB_SPORT_TREADMILL"/>
<entry field="true" id="8389428" symbol="BIKE_POWER_SENSOR_TYPE_WHEEL_TORQUE"/>
<entry id="8390039" method="true" symbol="onProductInfoUpdate"/>
<entry field="true" id="8389009" symbol="ANIM_TYPE_EASE_IN_OUT"/>
<entry field="true" id="8389988" symbol="LIGHT_MODE_ST_61_80"/>
<entry field="true" id="8389431" symbol="BIKE_POWER_SENSOR_TYPE_CNT"/>
<entry field="true" id="8388870" symbol="SUB_SPORT_STRENGTH_TRAINING"/>
<entry field="true" id="8388938" symbol="month"/>
<entry id="8389890" method="true" symbol="onSelectable"/>
<entry field="true" id="8388966" symbol="TONE_KEY"/>
<entry field="true" id="8388911" symbol="distance"/>
<entry field="true" id="8389592" symbol="REQUEST_CONTENT_TYPE_URL_ENCODED"/>
<entry field="true" id="8388841" symbol="SPORT_WALKING"/>
<entry field="true" id="8389151" symbol="birthYear"/>
<entry field="true" id="8389666" symbol="BUTTON_INPUT_SELECT"/>
<entry id="8389576" method="true" symbol="printStackTrace"/>
<entry id="8389179" method="true" symbol="drawEllipse"/>
<entry id="8389624" symbol="mDefaults"/>
<entry field="true" id="8388912" symbol="steps"/>
<entry id="8389316" symbol="radians"/>
<entry id="8389142" method="true" symbol="getProfile"/>
<entry id="8389479" method="true" symbol="getDeviceState"/>
<entry id="8388642" module="true" symbol="Position"/>
<entry field="true" id="8389379" symbol="OBSCURE_LEFT"/>
<entry field="true" id="8389854" symbol="DATA_TYPE_SINT8"/>
<entry id="8389079" method="true" symbol="onPreviousPage"/>
<entry field="true" id="8389402" symbol="distanceUnits"/>
<entry field="true" id="8389875" symbol="metersClimbed"/>
<entry field="true" id="8389982" symbol="LIGHT_NETWORK_STATE_FORMED"/>
<entry id="8388693" method="true" symbol="testUserProfile"/>
<entry field="true" id="8389156" symbol="FONT_LARGE"/>
<entry id="8389585" object="true" symbol="UnexpectedTypeException"/>
<entry id="8389886" symbol="mPreviousState"/>
<entry field="true" id="8388983" symbol="TONE_LOW_BATTERY"/>
<entry id="8388932" symbol="getDayHash"/>
<entry id="8388713" method="true" symbol="getTimer"/>
<entry field="true" id="8389047" symbol="SLIDE_DOWN"/>
<entry id="8389257" method="true" symbol="close"/>
<entry id="8388900" method="true" symbol="pow"/>
<entry id="8389051" method="true" symbol="switchToView"/>
<entry id="8389093" symbol="mTitle"/>
<entry id="8389418" object="true" symbol="CommonData"/>
<entry field="true" id="8389274" symbol="searchThreshold"/>
<entry field="true" id="8388721" symbol="min"/>
<entry field="true" id="8389651" symbol="trainingEffect"/>
<entry id="8388949" method="true" symbol="divide"/>
<entry id="8390025" method="true" symbol="setTaillightsMode"/>
<entry id="8389125" method="true" symbol="onHide"/>
<entry field="true" id="8389983" symbol="LIGHT_NETWORK_MODE_INDIVIDUAL"/>
<entry id="8388820" object="true" symbol="MailboxIterator"/>
<entry field="true" id="8388843" symbol="SPORT_ALPINE_SKIING"/>
<entry id="8390047" method="true" symbol="onLightNetworkStateUpdate"/>
<entry field="true" id="8389551" symbol="PRESS_TYPE_UP"/>
<entry id="8389094" method="true" symbol="setTitle"/>
<entry id="8388910" method="true" symbol="getHistory"/>
<entry field="true" id="8388835" symbol="SPORT_SWIMMING"/>
<entry field="true" id="8388989" symbol="dutyCycle"/>
<entry field="true" id="8389167" symbol="COLOR_BLUE"/>
<entry field="true" id="8389609" symbol="LAYOUT_VALIGN_CENTER"/>
<entry field="true" id="8389892" symbol="background"/>
<entry field="true" id="8389987" symbol="LIGHT_MODE_ST_81_100"/>
<entry id="8389041" object="true" symbol="NumberPicker"/>
<entry field="true" id="8389159" symbol="COLOR_DK_GRAY"/>
<entry field="true" id="8390006" symbol="LIGHT_TYPE_HEADLIGHT"/>
<entry field="true" id="8389552" symbol="PRESS_TYPE_ACTION"/>
<entry field="true" id="8389231" symbol="CHANNEL_TYPE_TX_NOT_RX"/>
<entry id="8389634" method="true" symbol="setBackgroundScan"/>
<entry id="8389830" method="true" symbol="toChar"/>
<entry field="true" id="8388802" symbol="BLE_HOST_TIMEOUT"/>
<entry id="8389023" object="true" symbol="View"/>
<entry id="8389635" symbol="backgroundScanEnabled"/>
<entry id="8389191" method="true" symbol="getTextDimensions"/>
<entry field="true" id="8388740" symbol="maxSpeed"/>
<entry field="true" id="8389909" symbol="FONT_SYSTEM_NUMBER_MILD"/>
<entry field="true" id="8390051" symbol="BURST_ERROR_RF_FAIL"/>
<entry field="true" id="8389210" symbol="MSG_ID_OPEN_CHANNEL"/>
<entry id="8388943" method="true" symbol="subtract"/>
<entry id="8389345" symbol="rezId"/>
<entry field="true" id="8389931" symbol="track"/>
<entry field="true" id="8389196" symbol="MSG_ID_RF_EVENT"/>
<entry id="8389749" method="true" symbol="onTimerPause"/>
<entry field="true" id="8389590" symbol="HTTP_REQUEST_METHOD_POST"/>
<entry id="8390057" method="true" symbol="sendBurst"/>
<entry id="8389437" object="true" symbol="PedalPowerBalance"/>
<entry id="8389425" object="true" symbol="Device"/>
<entry id="8388758" object="true" symbol="Number"/>
<entry id="8388882" method="true" symbol="save"/>
<entry field="true" id="8389017" symbol="SWIPE_DOWN"/>
<entry id="8388828" method="true" symbol="onError"/>
<entry id="8389615" object="true" symbol="PickerFactory"/>
<entry field="true" id="8389584" symbol="notificationCount"/>
<entry id="8389099" method="true" symbol="onHold"/>
<entry id="8389317" symbol="degrees"/>
<entry field="true" id="8388855" symbol="SUB_SPORT_SPIN"/>
<entry field="true" id="8390041" symbol="mode"/>
<entry id="8388944" method="true" symbol="compare"/>
<entry id="8389880" method="true" symbol="utf8ArrayToString"/>
<entry id="8389050" method="true" symbol="popView"/>
<entry field="true" id="8389563" symbol="KEY_MODE"/>
<entry id="8389780" module="true" symbol="FitContributor"/>
<entry field="true" id="8389145" symbol="wakeTime"/>
<entry field="true" id="8389914" symbol="GOAL_TYPE_FLOORS_CLIMBED"/>
<entry field="true" id="8389005" symbol="KEY_UP_RIGHT"/>
<entry id="8389644" symbol="defaults"/>
<entry field="true" id="8389561" symbol="KEY_SPORT"/>
<entry id="8389628" method="true" symbol="getDrawable"/>
<entry field="true" id="8389230" symbol="NETWORK_PLUS"/>
<entry id="8388656" object="true" symbol="InputDelegate"/>
<entry field="true" id="8388978" symbol="TONE_TIME_ALERT"/>
<entry field="true" id="8389844" symbol="responseType"/>
<entry field="true" id="8389162" symbol="COLOR_DK_RED"/>
<entry field="true" id="8389811" symbol="TIMER_STATE_STOPPED"/>
<entry id="8390043" method="true" symbol="setMode"/>
<entry id="8388778" symbol="mClass"/>
<entry field="true" id="8389612" symbol="LAYOUT_HALIGN_RIGHT"/>
<entry id="8389087" method="true" symbol="setProgress"/>
<entry field="true" id="8389850" symbol="count"/>
<entry id="8389346" symbol="text"/>
<entry id="8389828" method="true" symbol="toCharArray"/>
<entry field="true" id="8388742" symbol="currentPower"/>
<entry field="true" id="8389066" symbol="width"/>
<entry id="8388898" method="true" symbol="cos"/>
<entry field="true" id="8389204" symbol="MSG_ID_TRANSMIT_POWER"/>
<entry id="8389836" method="true" symbol="generateSignedOAuthHeader"/>
<entry id="8388759" object="true" symbol="Long"/>
<entry id="8388903" method="true" symbol="sqrt"/>
<entry field="true" id="8388859" symbol="SUB_SPORT_DOWNHILL"/>
<entry id="8389617" object="true" symbol="Picker"/>
<entry id="8389824" method="true" symbol="removeAll"/>
<entry field="true" id="8389063" symbol="identifier"/>
<entry field="true" id="8388997" symbol="KEY_MENU"/>
<entry field="true" id="8389818" symbol="rearDerailleurIndex"/>
<entry field="true" id="8388695" symbol="count2"/>
<entry field="true" id="8388694" symbol="count1"/>
<entry field="true" id="8388907" symbol="MOVE_BAR_LEVEL_MIN"/>
<entry id="8389111" symbol="mY"/>
<entry field="true" id="8389858" symbol="DATA_TYPE_SINT32"/>
<entry id="8390023" method="true" symbol="restoreTaillightsNetworkModeControl"/>
<entry id="8389110" symbol="mX"/>
<entry id="8389134" method="true" symbol="setText"/>
<entry id="8389323" symbol="may"/>
<entry id="8389332" symbol="monday"/>
<entry field="true" id="8389205" symbol="MSG_ID_CHANNEL_TRANSMIT_POWER"/>
<entry field="true" id="8389155" symbol="FONT_MEDIUM"/>
<entry field="true" id="8389869" symbol="activeMinutesWeek"/>
<entry field="true" id="8389606" symbol="mag"/>
<entry field="true" id="8389772" symbol="SWIM_STROKE_IM"/>
<entry id="8389092" symbol="mSize"/>
<entry field="true" id="8388735" symbol="currentLocationAccuracy"/>
<entry field="true" id="8388807" symbol="BLE_REQUEST_TOO_LARGE"/>
<entry id="8388908" object="true" symbol="History"/>
<entry id="8389837" method="true" symbol="makeOAuthRequest"/>
<entry field="true" id="8388919" symbol="FORMAT_LONG"/>
<entry id="8388941" symbol="mDateTime"/>
<entry id="8388895" method="true" symbol="acos"/>
<entry field="true" id="8389856" symbol="DATA_TYPE_SINT16"/>
<entry id="8390029" method="true" symbol="getManufacturerInfo"/>
<entry field="true" id="8389217" symbol="MSG_CODE_EVENT_RX_FAIL"/>
<entry field="true" id="8389550" symbol="PRESS_TYPE_DOWN"/>
<entry field="true" id="8388960" symbol="heartRate"/>
<entry id="8390055" object="true" symbol="BurstListener"/>
<entry id="8389085" symbol="mDisplayString"/>
<entry field="true" id="8389016" symbol="SWIPE_RIGHT"/>
<entry field="true" id="8389874" symbol="floorsClimbedGoal"/>
<entry id="8389054" symbol="PUSH_VIEW"/>
<entry id="8389751" method="true" symbol="onTimerLap"/>
<entry id="8388827" symbol="mOffset"/>
<entry field="true" id="8389994" symbol="LIGHT_MODE_RANDOM_FLASH"/>
<entry id="8388956" method="true" symbol="setEnabledSensors"/>
<entry field="true" id="8389264" symbol="DEFAULT_TRANSMISSION_TYPE"/>
<entry id="8389618" symbol="BEHAVIOR_ON_SELECT"/>
<entry id="8388776" method="true" symbol="toDouble"/>
<entry id="8389800" method="true" symbol="getTemperatureHistory"/>
<entry field="true" id="8389265" symbol="DEFAULT_MESSAGE_PERIOD"/>
<entry field="true" id="8389593" symbol="REQUEST_CONTENT_TYPE_JSON"/>
<entry field="true" id="8389311" symbol="accuracy"/>
<entry id="8389840" object="true" symbol="OAuthMessage"/>
<entry field="true" id="8389406" symbol="heightUnits"/>
<entry field="true" id="8389415" symbol="BATT_STATUS_CRITICAL"/>
<entry field="true" id="8389423" symbol="DEVICE_STATE_CNT"/>
<entry id="8388823" method="true" symbol="emptyMailbox"/>
<entry id="8390056" symbol="burstDataBlob"/>
<entry id="8388902" method="true" symbol="sin"/>
<entry id="8389186" method="true" symbol="fillEllipse"/>
<entry field="true" id="8388961" symbol="power"/>
<entry field="true" id="8389381" symbol="OBSCURE_RIGHT"/>
<entry id="8389255" method="true" symbol="setDeviceConfig"/>
<entry field="true" id="8389215" symbol="MSG_CODE_RESPONSE_NO_ERROR"/>
<entry id="8389717" method="true" symbol="ceil"/>
<entry field="true" id="8389613" symbol="LAYOUT_HALIGN_CENTER"/>
<entry field="true" id="8388813" symbol="NETWORK_REQUEST_TIMED_OUT"/>
<entry id="8389643" symbol="pattern"/>
<entry id="8389303" method="true" symbol="enableLocationEvents"/>
<entry id="8389622" symbol="mPreviousArrow"/>
<entry field="true" id="8389248" symbol="rssi"/>
<entry id="8388936" method="true" symbol="info"/>
<entry field="true" id="8389685" symbol="ARC_COUNTER_CLOCKWISE"/>
<entry id="8389574" symbol="mPcStack"/>
<entry field="true" id="8388856" symbol="SUB_SPORT_INDOOR_CYCLING"/>
<entry id="8389010" object="true" symbol="KeyEvent"/>
<entry field="true" id="8388839" symbol="SPORT_AMERICAN_FOOTBALL"/>
<entry field="true" id="8389003" symbol="KEY_UP"/>
<entry field="true" id="8388864" symbol="SUB_SPORT_INDOOR_ROWING"/>
<entry id="8389804" symbol="mOldestSampleTime"/>
<entry field="true" id="8388857" symbol="SUB_SPORT_ROAD"/>
<entry id="8389885" object="true" symbol="Button"/>
<entry id="8389798" object="true" symbol="SensorSample"/>
<entry field="true" id="8389873" symbol="floorsDescended"/>
<entry field="true" id="8388994" symbol="KEY_ENTER"/>
<entry id="8389895" symbol="mBackgroundColor"/>
<entry id="8388760" object="true" symbol="Float"/>
<entry field="true" id="8389559" symbol="KEY_LAP"/>
<entry id="8389659" method="true" symbol="makeImageRequestNative"/>
<entry id="8388896" method="true" symbol="asin"/>
<entry id="8390042" method="true" symbol="getCapableModes"/>
<entry field="true" id="8389861" symbol="DATA_TYPE_FLOAT"/>
<entry id="8388767" object="true" symbol="Method"/>
<entry field="true" id="8388906" symbol="MOVE_BAR_LEVEL_MAX"/>
<entry id="8389059" object="true" symbol="Bitmap"/>
<entry id="8389424" object="true" symbol="DeviceState"/>
<entry field="true" id="8388743" symbol="averagePower"/>
<entry field="true" id="8390052" symbol="BURST_ERROR_TRANSFER_IN_PROGRESS"/>
<entry field="true" id="8388913" symbol="stepGoal"/>
<entry field="true" id="8389220" symbol="MSG_CODE_EVENT_TRANSFER_TX_COMPLETED"/>
<entry id="8389477" symbol="mDeviceType"/>
<entry field="true" id="8389996" symbol="LIGHT_MODE_SIGNAL_LEFT_SC"/>
<entry field="true" id="8389753" symbol="HR_ZONE_SPORT_GENERIC"/>
<entry field="true" id="8389965" symbol="STORAGE_FULL"/>
<entry id="8389100" method="true" symbol="onRelease"/>
<entry field="true" id="8388998" symbol="KEY_DOWN"/>
<entry field="true" id="8388995" symbol="KEY_ESC"/>
<entry id="8388699" method="true" symbol="stop"/>
<entry field="true" id="8389000" symbol="KEY_DOWN_RIGHT"/>
<entry field="true" id="8389847" symbol="mesgType"/>
<entry id="8389976" object="true" symbol="BatteryStatus"/>
<entry id="8388772" symbol="Fonts"/>
<entry field="true" id="8388722" symbol="sec"/>
<entry id="8388887" symbol="mData"/>
<entry id="8389805" method="true" symbol="getNewestSampleTime"/>
<entry id="8389630" method="true" symbol="getSize"/>
<entry id="8389020" method="true" symbol="animate"/>
<entry field="true" id="8390010" symbol="LIGHT_TYPE_SIGNAL_RIGHT"/>
<entry id="8389324" symbol="june"/>
<entry id="8389315" symbol="longitude"/>
<entry field="true" id="8389852" symbol="MESG_TYPE_LAP"/>
<entry id="8389955" method="true" symbol="getWaypoints"/>
<entry id="8388715" method="true" symbol="getSystemStats"/>
<entry field="true" id="8389147" symbol="runningStepLength"/>
<entry field="true" id="8389639" symbol="networkKey64Bit"/>
<entry field="true" id="8389813" symbol="TIMER_STATE_ON"/>
<entry id="8388633" module="true" symbol="ActivityMonitor"/>
<entry field="true" id="8389502" symbol="rightPedalIndicator"/>
<entry id="8390031" method="true" symbol="onCalculatedCadenceUpdate"/>
<entry field="true" id="8389153" symbol="FONT_TINY"/>
<entry id="8389024" object="true" symbol="DataField"/>
<entry id="8389960" object="true" symbol="Workout"/>
<entry id="8389974" object="true" symbol="Track"/>
<entry id="8389116" method="true" symbol="getHeight"/>
<entry field="true" id="8389767" symbol="SWIM_STROKE_BACKSTROKE"/>
<entry field="true" id="8388894" symbol="E"/>
<entry id="8389326" symbol="august"/>
<entry id="8389325" symbol="july"/>
<entry field="true" id="8389013" symbol="CLICK_TYPE_RELEASE"/>
<entry id="8389701" object="true" symbol="HeartRateIterator"/>
<entry id="8389541" method="true" symbol="onCancel"/>
<entry field="true" id="8389008" symbol="ANIM_TYPE_EASE_OUT"/>
<entry field="true" id="8389487" symbol="state"/>
<entry field="true" id="8389404" symbol="elevationUnits"/>
<entry field="true" id="8389175" symbol="TEXT_JUSTIFY_VCENTER"/>
<entry field="true" id="8389429" symbol="BIKE_POWER_SENSOR_TYPE_CRANK_TORQUE"/>
<entry field="true" id="8389202" symbol="MSG_ID_CHANNEL_RF_FREQUENCY"/>
<entry id="8389656" method="true" symbol="weak"/>
<entry id="8388635" module="true" symbol="Application"/>
<entry field="true" id="8389831" symbol="OAUTH_RESULT_TYPE_URL"/>
<entry id="8389934" symbol="mFitContributorFields"/>
<entry field="true" id="8389150" symbol="activityClass"/>
<entry field="true" id="8389665" symbol="SCREEN_SHAPE_RECTANGLE"/>
<entry id="8388792" method="true" symbol="isEmpty"/>
<entry field="true" id="8389527" symbol="operatingTime"/>
<entry id="8389661" symbol="maxWidth"/>
<entry field="true" id="8389228" symbol="MSG_CODE_EVENT_QUE_OVERFLOW"/>
<entry field="true" id="8388969" symbol="TONE_MSG"/>
<entry field="true" id="8389006" symbol="ANIM_TYPE_LINEAR"/>
<entry field="true" id="8389044" symbol="SLIDE_IMMEDIATE"/>
<entry field="true" id="8389862" symbol="DATA_TYPE_DOUBLE"/>
</symbolTable>
<localVars>
<entry endPc="805306565" name="success" stackId="2" startPc="805306521"/>
<entry endPc="805307468" name="i" stackId="2" startPc="805306570"/>
<entry endPc="805307652" name="previousValue" stackId="2" startPc="805307556"/>
<entry endPc="805307971" name="i" stackId="7" startPc="805307767"/>
<entry endPc="805307971" name="keys" stackId="6" startPc="805307767"/>
<entry endPc="805308025" name="requestType" stackId="5" startPc="805307683"/>
<entry endPc="805308264" name="i" stackId="6" startPc="805308063"/>
<entry endPc="805308264" name="keys" stackId="5" startPc="805308063"/>
<entry endPc="805308456" name="dithering" stackId="10" startPc="805308056"/>
<entry endPc="805308456" name="palette" stackId="7" startPc="805308056"/>
<entry endPc="805308456" name="maxHeight" stackId="9" startPc="805308056"/>
<entry endPc="805308456" name="maxWidth" stackId="8" startPc="805308056"/>
<entry endPc="805308838" name="i" stackId="3" startPc="805308788"/>
<entry endPc="805308851" name="len" stackId="2" startPc="805308753"/>
<entry endPc="805308851" name="result" stackId="1" startPc="805308753"/>
<entry endPc="805309031" name="idx" stackId="3" startPc="805308949"/>
<entry endPc="805309044" name="k" stackId="1" startPc="805308905"/>
<entry endPc="805309044" name="string" stackId="2" startPc="805308905"/>
<entry endPc="805309696" name="fmt" stackId="2" startPc="805309473"/>
<entry endPc="805309696" name="SEMICONVERT" stackId="4" startPc="805309473"/>
<entry endPc="805309696" name="DOUBLEPI" stackId="3" startPc="805309473"/>
<entry endPc="805309768" name="degreeLat" stackId="1" startPc="805309701"/>
<entry endPc="805309768" name="degreeLon" stackId="2" startPc="805309701"/>
<entry endPc="805309857" name="radianLat" stackId="2" startPc="805309773"/>
<entry endPc="805309857" name="radianLon" stackId="3" startPc="805309773"/>
<entry endPc="805309857" name="DOUBLEPI" stackId="1" startPc="805309773"/>
<entry endPc="805310868" name="delta" stackId="2" startPc="805310812"/>
<entry endPc="805311299" name="delta" stackId="2" startPc="805311246"/>
<entry endPc="805312455" name="hour" stackId="5" startPc="805312076"/>
<entry endPc="805312455" name="today" stackId="8" startPc="805312076"/>
<entry endPc="805312455" name="day" stackId="4" startPc="805312076"/>
<entry endPc="805312455" name="second" stackId="7" startPc="805312076"/>
<entry endPc="805312455" name="year" stackId="2" startPc="805312076"/>
<entry endPc="805312455" name="monthHash" stackId="9" startPc="805312076"/>
<entry endPc="805312455" name="month" stackId="3" startPc="805312076"/>
<entry endPc="805312455" name="minute" stackId="6" startPc="805312076"/>
<entry endPc="805312663" name="result" stackId="7" startPc="805312460"/>
<entry endPc="805312663" name="hours" stackId="4" startPc="805312460"/>
<entry endPc="805312663" name="minutes" stackId="5" startPc="805312460"/>
<entry endPc="805312663" name="years" stackId="2" startPc="805312460"/>
<entry endPc="805312663" name="seconds" stackId="6" startPc="805312460"/>
<entry endPc="805312663" name="days" stackId="3" startPc="805312460"/>
<entry endPc="805313159" name="type" stackId="4" startPc="805313044"/>
<entry endPc="805313291" name="type" stackId="5" startPc="805313176"/>
<entry endPc="805313329" name="event" stackId="3" startPc="805312964"/>
<entry endPc="805313329" name="handled" stackId="2" startPc="805312964"/>
<entry endPc="805313717" name="behavior" stackId="3" startPc="805313414"/>
<entry endPc="805313717" name="symbol" stackId="4" startPc="805313414"/>
<entry endPc="805313717" name="handled" stackId="2" startPc="805313414"/>
<entry endPc="805313905" name="i" stackId="3" startPc="805313817"/>
<entry endPc="805313911" name="drawable" stackId="2" startPc="805313736"/>
<entry endPc="805314079" name="idx" stackId="2" startPc="805314043"/>
<entry endPc="805314530" name="item" stackId="3" startPc="805314431"/>
<entry endPc="805315138" name="value" stackId="2" startPc="805314887"/>
<entry endPc="805315295" name="value" stackId="2" startPc="805315198"/>
<entry endPc="805315718" name="x" stackId="2" startPc="805315424"/>
<entry endPc="805315718" name="y" stackId="3" startPc="805315424"/>
<entry endPc="805316115" name="value" stackId="2" startPc="805315808"/>
<entry endPc="805316248" name="dimensions" stackId="5" startPc="805316187"/>
<entry endPc="805316595" name="x" stackId="2" startPc="805316120"/>
<entry endPc="805316595" name="justification" stackId="4" startPc="805316120"/>
<entry endPc="805316595" name="y" stackId="3" startPc="805316120"/>
<entry endPc="805317165" name="state" stackId="2" startPc="805316946"/>
<entry endPc="805320594" name="location" stackId="3" startPc="805320524"/>
<entry endPc="805320669" name="location" stackId="3" startPc="805320599"/>
<entry endPc="805320744" name="location" stackId="3" startPc="805320674"/>
<entry endPc="805321999" name="durDiff" stackId="9" startPc="805320777"/>
<entry endPc="805321999" name="durOne" stackId="1" startPc="805320777"/>
<entry endPc="805321999" name="durThree" stackId="6" startPc="805320777"/>
<entry endPc="805321999" name="durationTest" stackId="5" startPc="805320777"/>
<entry endPc="805321999" name="momentTwo" stackId="10" startPc="805320777"/>
<entry endPc="805321999" name="durThreeVal" stackId="7" startPc="805320777"/>
<entry endPc="805321999" name="durOneVal" stackId="2" startPc="805320777"/>
<entry endPc="805321999" name="durTwo" stackId="3" startPc="805320777"/>
<entry endPc="805321999" name="durTwoVal" stackId="4" startPc="805320777"/>
<entry endPc="805321999" name="momentOne" stackId="8" startPc="805320777"/>
<entry endPc="805322786" name="durationTest" stackId="5" startPc="805322004"/>
<entry endPc="805322786" name="momentOneVal" stackId="2" startPc="805322004"/>
<entry endPc="805322786" name="momentThreeVal" stackId="7" startPc="805322004"/>
<entry endPc="805322786" name="momentTwo" stackId="3" startPc="805322004"/>
<entry endPc="805322786" name="momentOne" stackId="1" startPc="805322004"/>
<entry endPc="805322786" name="momentThree" stackId="6" startPc="805322004"/>
<entry endPc="805322786" name="momentTwoVal" stackId="4" startPc="805322004"/>
<entry endPc="805323602" name="profile" stackId="1" startPc="805323582"/>
</localVars>
<annotations>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Activity" module="Toybox" symbol="getActivityInfo"/>
<annotationEntry annotation="hasPowerSupport" class="Info" module="Toybox_Activity" symbol="currentPower"/>
<annotationEntry annotation="hasPowerSupport" class="Info" module="Toybox_Activity" symbol="averagePower"/>
<annotationEntry annotation="hasPowerSupport" class="Info" module="Toybox_Activity" symbol="maxPower"/>
<annotationEntry annotation="hasSwimSupport" class="Info" module="Toybox_Activity" symbol="swimStrokeType"/>
<annotationEntry annotation="hasSwimSupport" class="Info" module="Toybox_Activity" symbol="swimSwolf"/>
<annotationEntry annotation="hasSwimSupport" class="Info" module="Toybox_Activity" symbol="averageDistance"/>
<annotationEntry annotation="hasFirstbeat" class="Info" module="Toybox_Activity" symbol="trainingEffect"/>
<annotationEntry annotation="hasFirstbeat" class="Info" module="Toybox_Activity" symbol="energyExpenditure"/>
<annotationEntry annotation="hasShiftingSupport" class="Info" module="Toybox_Activity" symbol="frontDerailleurIndex"/>
<annotationEntry annotation="hasShiftingSupport" class="Info" module="Toybox_Activity" symbol="frontDerailleurMax"/>
<annotationEntry annotation="hasShiftingSupport" class="Info" module="Toybox_Activity" symbol="frontDerailleurSize"/>
<annotationEntry annotation="hasShiftingSupport" class="Info" module="Toybox_Activity" symbol="rearDerailleurIndex"/>
<annotationEntry annotation="hasShiftingSupport" class="Info" module="Toybox_Activity" symbol="rearDerailleurMax"/>
<annotationEntry annotation="hasShiftingSupport" class="Info" module="Toybox_Activity" symbol="rearDerailleurSize"/>
<annotationEntry annotation="hasNavigationDataSupport" class="Info" module="Toybox_Activity" symbol="distanceToDestination"/>
<annotationEntry annotation="hasNavigationDataSupport" class="Info" module="Toybox_Activity" symbol="elevationAtDestination"/>
<annotationEntry annotation="hasNavigationDataSupport" class="Info" module="Toybox_Activity" symbol="nameOfDestination"/>
<annotationEntry annotation="hasNavigationDataSupport" class="Info" module="Toybox_Activity" symbol="distanceToNextPoint"/>
<annotationEntry annotation="hasNavigationDataSupport" class="Info" module="Toybox_Activity" symbol="elevationAtNextPoint"/>
<annotationEntry annotation="hasNavigationDataSupport" class="Info" module="Toybox_Activity" symbol="nameOfNextPoint"/>
<annotationEntry annotation="hasNavigationDataSupport" class="Info" module="Toybox_Activity" symbol="bearing"/>
<annotationEntry annotation="hasNavigationDataSupport" class="Info" module="Toybox_Activity" symbol="bearingFromStart"/>
<annotationEntry annotation="hasNavigationDataSupport" class="Info" module="Toybox_Activity" symbol="track"/>
<annotationEntry annotation="hasNavigationDataSupport" class="Info" module="Toybox_Activity" symbol="offCourseDistance"/>
<annotationEntry annotation="hasHeartRateHistory" class="ActivityMonitor" module="Toybox" symbol="INVALID_HR_SAMPLE"/>
<annotationEntry annotation="hasSleepMode" class="Info" module="Toybox_ActivityMonitor" symbol="isSleepMode"/>
<annotationEntry annotation="hasActiveMinutes" class="Info" module="Toybox_ActivityMonitor" symbol="activeMinutesWeek"/>
<annotationEntry annotation="hasActiveMinutes" class="Info" module="Toybox_ActivityMonitor" symbol="activeMinutesDay"/>
<annotationEntry annotation="hasActiveMinutes" class="Info" module="Toybox_ActivityMonitor" symbol="activeMinutesWeekGoal"/>
<annotationEntry annotation="hasFloorsClimbed" class="Info" module="Toybox_ActivityMonitor" symbol="floorsClimbed"/>
<annotationEntry annotation="hasFloorsClimbed" class="Info" module="Toybox_ActivityMonitor" symbol="floorsDescended"/>
<annotationEntry annotation="hasFloorsClimbed" class="Info" module="Toybox_ActivityMonitor" symbol="floorsClimbedGoal"/>
<annotationEntry annotation="hasFloorsClimbed" class="Info" module="Toybox_ActivityMonitor" symbol="metersClimbed"/>
<annotationEntry annotation="hasFloorsClimbed" class="Info" module="Toybox_ActivityMonitor" symbol="metersDescended"/>
<annotationEntry annotation="hasFloorsClimbed" class="History" module="Toybox_ActivityMonitor" symbol="floorsClimbed"/>
<annotationEntry annotation="hasFloorsClimbed" class="History" module="Toybox_ActivityMonitor" symbol="floorsDescended"/>
<annotationEntry annotation="hasFloorsClimbed" class="History" module="Toybox_ActivityMonitor" symbol="floorsClimbedGoal"/>
<annotationEntry annotation="hasActiveMinutes" class="History" module="Toybox_ActivityMonitor" symbol="activeMinutes"/>
<annotationEntry annotation="minSdk(&quot;1.2.2&quot;)" class="HeartRateIterator" module="Toybox_ActivityMonitor" symbol="next"/>
<annotationEntry annotation="minSdk(&quot;1.2.2&quot;)" class="HeartRateIterator" module="Toybox_ActivityMonitor" symbol="getMax"/>
<annotationEntry annotation="minSdk(&quot;1.2.2&quot;)" class="HeartRateIterator" module="Toybox_ActivityMonitor" symbol="getMin"/>
<annotationEntry annotation="minSdk(&quot;1.2.1&quot;)" class="ActivityMonitor" module="Toybox" symbol="getHeartRateHistory"/>
<annotationEntry annotation="hasHeartRateHistory" class="ActivityMonitor" module="Toybox" symbol="getHeartRateHistory"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="ActivityMonitor" module="Toybox" symbol="getInfo"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="ActivityMonitor" module="Toybox" symbol="getHistory"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="BurstPayload" module="Toybox_Ant" symbol="add"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="BurstPayload" module="Toybox_Ant" symbol="getSize"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="BurstPayload" module="Toybox_Ant" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="BurstPayloadIterator" module="Toybox_Ant" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="BurstPayloadIterator" module="Toybox_Ant" symbol="next"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="BurstListener" module="Toybox_Ant" symbol="onReceiveComplete"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="BurstListener" module="Toybox_Ant" symbol="onReceiveFail"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="BurstListener" module="Toybox_Ant" symbol="onTransmitComplete"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="BurstListener" module="Toybox_Ant" symbol="onTransmitFail"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="ChannelAssignment" module="Toybox_Ant" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;1.2.0&quot;)" class="ChannelAssignment" module="Toybox_Ant" symbol="isBackgroundScanEnabled"/>
<annotationEntry annotation="minSdk(&quot;1.2.0&quot;)" class="ChannelAssignment" module="Toybox_Ant" symbol="setBackgroundScan"/>
<annotationEntry annotation="minSdk(&quot;1.2.0&quot;)" class="DeviceConfig" module="Toybox_Ant" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="GenericChannel" module="Toybox_Ant" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="GenericChannel" module="Toybox_Ant" symbol="getDeviceConfig"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="GenericChannel" module="Toybox_Ant" symbol="setDeviceConfig"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="GenericChannel" module="Toybox_Ant" symbol="open"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="GenericChannel" module="Toybox_Ant" symbol="close"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="GenericChannel" module="Toybox_Ant" symbol="release"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="GenericChannel" module="Toybox_Ant" symbol="sendAcknowledge"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="GenericChannel" module="Toybox_Ant" symbol="sendBroadcast"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="GenericChannel" module="Toybox_Ant" symbol="sendBurst"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="GenericChannel" module="Toybox_Ant" symbol="setBurstListener"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Message" module="Toybox_Ant" symbol="getPayload"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Message" module="Toybox_Ant" symbol="setPayload"/>
<annotationEntry annotation="minSdk(&quot;1.2.0&quot;)" class="UnableToAcquireChannelException" module="Toybox_Ant" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Application" module="Toybox" symbol="getApp"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="AppBase" module="Toybox_Application" symbol="onStart"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="AppBase" module="Toybox_Application" symbol="getInitialView"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="AppBase" module="Toybox_Application" symbol="getGoalView"/>
<annotationEntry annotation="minSdk(&quot;1.2.0&quot;)" class="AppBase" module="Toybox_Application" symbol="onSettingsChanged"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="AppBase" module="Toybox_Application" symbol="onStop"/>
<annotationEntry annotation="minSdk(&quot;1.2.0&quot;)" class="AppBase" module="Toybox_Application" symbol="onEvent"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="AppBase" module="Toybox_Application" symbol="getProperty"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="AppBase" module="Toybox_Application" symbol="setProperty"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="AppBase" module="Toybox_Application" symbol="deleteProperty"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="AppBase" module="Toybox_Application" symbol="clearProperties"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="AppBase" module="Toybox_Application" symbol="loadProperties"/>
<annotationEntry annotation="deprecated" class="AppBase" module="Toybox_Application" symbol="loadProperties"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="AppBase" module="Toybox_Application" symbol="saveProperties"/>
<annotationEntry annotation="deprecated" class="AppBase" module="Toybox_Application" symbol="saveProperties"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="AppBase" module="Toybox_Application" symbol="validateProperty"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Attention" module="Toybox" symbol="playTone"/>
<annotationEntry annotation="hasToneSupport" class="Attention" module="Toybox" symbol="playTone"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="VibeProfile" module="Toybox_Attention" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Attention" module="Toybox" symbol="vibrate"/>
<annotationEntry annotation="hasVibeSupport" class="Attention" module="Toybox" symbol="vibrate"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Attention" module="Toybox" symbol="backlight"/>
<annotationEntry annotation="hasBacklightSupport" class="Attention" module="Toybox" symbol="backlight"/>
<annotationEntry annotation="minSdk(&quot;1.1.2&quot;)" class="Communications" module="Toybox" symbol="encodeURL"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Communications" module="Toybox" symbol="makeJsonRequest"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="Communications" module="Toybox" symbol="makeWebRequest"/>
<annotationEntry annotation="minSdk(&quot;1.2.0&quot;)" class="Communications" module="Toybox" symbol="makeImageRequest"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="Communications" module="Toybox" symbol="generateSignedOAuthHeader"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="Communications" module="Toybox" symbol="makeOAuthRequest"/>
<annotationEntry annotation="minSdk(&quot;1.2.0&quot;)" class="Communications" module="Toybox" symbol="cancelAllRequests"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="MailboxIterator" module="Toybox_Communications" symbol="next"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Communications" module="Toybox" symbol="getMailbox"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Communications" module="Toybox" symbol="setMailboxListener"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Communications" module="Toybox" symbol="emptyMailbox"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Communications" module="Toybox" symbol="transmit"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="ConnectionListener" module="Toybox_Communications" symbol="onError"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="ConnectionListener" module="Toybox_Communications" symbol="onComplete"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="OAuthMessage" module="Toybox_Communications" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;1.4.0&quot;)" class="PhoneAppMessage" module="Toybox_Communications" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="Communications" module="Toybox" symbol="registerForOAuthMessages"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="Communications" module="Toybox" symbol="openWebPage"/>
<annotationEntry annotation="minSdk(&quot;1.4.0&quot;)" class="Communications" module="Toybox" symbol="registerForPhoneAppMessages"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="ActivityRecording" module="Toybox" symbol="createSession"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Session" module="Toybox_ActivityRecording" symbol="start"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Session" module="Toybox_ActivityRecording" symbol="stop"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Session" module="Toybox_ActivityRecording" symbol="addLap"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Session" module="Toybox_ActivityRecording" symbol="isRecording"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Session" module="Toybox_ActivityRecording" symbol="save"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Session" module="Toybox_ActivityRecording" symbol="discard"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="Session" module="Toybox_ActivityRecording" symbol="createField"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Session" module="Toybox_ActivityRecording" symbol="getGeometry"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="Field" module="Toybox_FitContributor" symbol="setData"/>
<annotationEntry annotation="minSdk(&quot;1.2.0&quot;)" class="Graphics" module="Toybox" symbol="getFontAscent"/>
<annotationEntry annotation="minSdk(&quot;1.2.0&quot;)" class="Graphics" module="Toybox" symbol="getFontDescent"/>
<annotationEntry annotation="minSdk(&quot;1.2.0&quot;)" class="Graphics" module="Toybox" symbol="getFontHeight"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Dc" module="Toybox_Graphics" symbol="clear"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Dc" module="Toybox_Graphics" symbol="drawCircle"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Dc" module="Toybox_Graphics" symbol="drawEllipse"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Dc" module="Toybox_Graphics" symbol="drawPoint"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Dc" module="Toybox_Graphics" symbol="drawRectangle"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Dc" module="Toybox_Graphics" symbol="drawRoundedRectangle"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Dc" module="Toybox_Graphics" symbol="drawBitmap"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Dc" module="Toybox_Graphics" symbol="drawLine"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Dc" module="Toybox_Graphics" symbol="fillCircle"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Dc" module="Toybox_Graphics" symbol="fillEllipse"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Dc" module="Toybox_Graphics" symbol="fillPolygon"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Dc" module="Toybox_Graphics" symbol="fillRectangle"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Dc" module="Toybox_Graphics" symbol="fillRoundedRectangle"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Dc" module="Toybox_Graphics" symbol="drawText"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Dc" module="Toybox_Graphics" symbol="getTextDimensions"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Dc" module="Toybox_Graphics" symbol="setColor"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Dc" module="Toybox_Graphics" symbol="setPenWidth"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Dc" module="Toybox_Graphics" symbol="getWidth"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Dc" module="Toybox_Graphics" symbol="getHeight"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Dc" module="Toybox_Graphics" symbol="getTextWidthInPixels"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Dc" module="Toybox_Graphics" symbol="getFontHeight"/>
<annotationEntry annotation="minSdk(&quot;1.2.0&quot;)" class="Dc" module="Toybox_Graphics" symbol="drawArc"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Object" module="Toybox_Lang" symbol="toString"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Object" module="Toybox_Lang" symbol="method"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Object" module="Toybox_Lang" symbol="hashCode"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Object" module="Toybox_Lang" symbol="equals"/>
<annotationEntry annotation="minSdk(&quot;1.2.0&quot;)" class="Object" module="Toybox_Lang" symbol="weak"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Number" module="Toybox_Lang" symbol="abs"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Number" module="Toybox_Lang" symbol="toNumber"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Number" module="Toybox_Lang" symbol="toFloat"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Number" module="Toybox_Lang" symbol="toLong"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Number" module="Toybox_Lang" symbol="toDouble"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Number" module="Toybox_Lang" symbol="format"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="Number" module="Toybox_Lang" symbol="toChar"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Long" module="Toybox_Lang" symbol="abs"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Long" module="Toybox_Lang" symbol="toLong"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Long" module="Toybox_Lang" symbol="toNumber"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Long" module="Toybox_Lang" symbol="toFloat"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Long" module="Toybox_Lang" symbol="toDouble"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Long" module="Toybox_Lang" symbol="format"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Long" module="Toybox_Lang" symbol="toString"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="Long" module="Toybox_Lang" symbol="equals"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Float" module="Toybox_Lang" symbol="toFloat"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Float" module="Toybox_Lang" symbol="abs"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Float" module="Toybox_Lang" symbol="toNumber"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Float" module="Toybox_Lang" symbol="toDouble"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Float" module="Toybox_Lang" symbol="toLong"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Float" module="Toybox_Lang" symbol="format"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Double" module="Toybox_Lang" symbol="abs"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Double" module="Toybox_Lang" symbol="toDouble"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Double" module="Toybox_Lang" symbol="toNumber"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Double" module="Toybox_Lang" symbol="toFloat"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Double" module="Toybox_Lang" symbol="toLong"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Double" module="Toybox_Lang" symbol="format"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="Double" module="Toybox_Lang" symbol="equals"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="String" module="Toybox_Lang" symbol="toNumber"/>
<annotationEntry annotation="minSdk(&quot;1.4.1&quot;)" class="String" module="Toybox_Lang" symbol="toNumberWithBase"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="String" module="Toybox_Lang" symbol="toFloat"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="String" module="Toybox_Lang" symbol="hashCode"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="String" module="Toybox_Lang" symbol="length"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="String" module="Toybox_Lang" symbol="equals"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="String" module="Toybox_Lang" symbol="find"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="String" module="Toybox_Lang" symbol="substring"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="String" module="Toybox_Lang" symbol="toLower"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="String" module="Toybox_Lang" symbol="toUpper"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="String" module="Toybox_Lang" symbol="toString"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="String" module="Toybox_Lang" symbol="toCharArray"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="String" module="Toybox_Lang" symbol="toUtf8Array"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="Char" module="Toybox_Lang" symbol="toNumber"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="Char" module="Toybox_Lang" symbol="toString"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="Char" module="Toybox_Lang" symbol="toLower"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="Char" module="Toybox_Lang" symbol="toUpper"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Lang" module="Toybox" symbol="format"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Symbol" module="Toybox_Lang" symbol="toString"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="Array" module="Toybox_Lang" symbol="add"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="Array" module="Toybox_Lang" symbol="addAll"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="Array" module="Toybox_Lang" symbol="indexOf"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="Array" module="Toybox_Lang" symbol="remove"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="Array" module="Toybox_Lang" symbol="removeAll"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="Array" module="Toybox_Lang" symbol="reverse"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Array" module="Toybox_Lang" symbol="size"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="Array" module="Toybox_Lang" symbol="slice"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Array" module="Toybox_Lang" symbol="toString"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Method" module="Toybox_Lang" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Method" module="Toybox_Lang" symbol="invoke"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Method" module="Toybox_Lang" symbol="hashCode"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Dictionary" module="Toybox_Lang" symbol="put"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Dictionary" module="Toybox_Lang" symbol="get"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Dictionary" module="Toybox_Lang" symbol="hasKey"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Dictionary" module="Toybox_Lang" symbol="remove"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Dictionary" module="Toybox_Lang" symbol="size"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Dictionary" module="Toybox_Lang" symbol="isEmpty"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Dictionary" module="Toybox_Lang" symbol="keys"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Dictionary" module="Toybox_Lang" symbol="values"/>
<annotationEntry annotation="minSdk(&quot;1.0.1&quot;)" class="Dictionary" module="Toybox_Lang" symbol="toString"/>
<annotationEntry annotation="minSdk(&quot;1.1.2&quot;)" class="Exception" module="Toybox_Lang" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;1.1.2&quot;)" class="Exception" module="Toybox_Lang" symbol="printStackTrace"/>
<annotationEntry annotation="minSdk(&quot;1.2.0&quot;)" class="Exception" module="Toybox_Lang" symbol="getErrorMessage"/>
<annotationEntry annotation="minSdk(&quot;1.2.0&quot;)" class="UnexpectedTypeException" module="Toybox_Lang" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="SymbolNotAllowedException" module="Toybox_Lang" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;1.2.0&quot;)" class="WeakReference" module="Toybox_Lang" symbol="stillAlive"/>
<annotationEntry annotation="minSdk(&quot;1.2.0&quot;)" class="WeakReference" module="Toybox_Lang" symbol="get"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Math" module="Toybox" symbol="acos"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Math" module="Toybox" symbol="asin"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Math" module="Toybox" symbol="atan"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="Math" module="Toybox" symbol="atan2"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="Math" module="Toybox" symbol="ceil"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Math" module="Toybox" symbol="cos"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="Math" module="Toybox" symbol="floor"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Math" module="Toybox" symbol="log"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Math" module="Toybox" symbol="pow"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Math" module="Toybox" symbol="rand"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="Math" module="Toybox" symbol="round"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Math" module="Toybox" symbol="sin"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Math" module="Toybox" symbol="sqrt"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Math" module="Toybox" symbol="srand"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Math" module="Toybox" symbol="tan"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="Math" module="Toybox" symbol="toDegrees"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="Math" module="Toybox" symbol="toRadians"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="Iterator" module="Toybox_PersistedContent" symbol="next"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="PersistedContent" module="Toybox" symbol="getCourses"/>
<annotationEntry annotation="hasCourseSupport" class="PersistedContent" module="Toybox" symbol="getCourses"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="PersistedContent" module="Toybox" symbol="getRoutes"/>
<annotationEntry annotation="hasRouteSupport" class="PersistedContent" module="Toybox" symbol="getRoutes"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="PersistedContent" module="Toybox" symbol="getTracks"/>
<annotationEntry annotation="hasTrackSupport" class="PersistedContent" module="Toybox" symbol="getTracks"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="PersistedContent" module="Toybox" symbol="getWaypoints"/>
<annotationEntry annotation="hasWaypointSupport" class="PersistedContent" module="Toybox" symbol="getWaypoints"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="PersistedContent" module="Toybox" symbol="getWorkouts"/>
<annotationEntry annotation="hasWorkoutSupport" class="PersistedContent" module="Toybox" symbol="getWorkouts"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="PersistedContent" module="Toybox" symbol="saveWaypoint"/>
<annotationEntry annotation="hasWaypointSupport" class="PersistedContent" module="Toybox" symbol="saveWaypoint"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="Course" module="Toybox_PersistedContent" symbol="getName"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="Course" module="Toybox_PersistedContent" symbol="getId"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="Course" module="Toybox_PersistedContent" symbol="toIntent"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="Route" module="Toybox_PersistedContent" symbol="getName"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="Route" module="Toybox_PersistedContent" symbol="getId"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="Route" module="Toybox_PersistedContent" symbol="toIntent"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="Track" module="Toybox_PersistedContent" symbol="getName"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="Track" module="Toybox_PersistedContent" symbol="getId"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="Track" module="Toybox_PersistedContent" symbol="toIntent"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="Waypoint" module="Toybox_PersistedContent" symbol="getName"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="Waypoint" module="Toybox_PersistedContent" symbol="getId"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="Waypoint" module="Toybox_PersistedContent" symbol="toIntent"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="Workout" module="Toybox_PersistedContent" symbol="getName"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="Workout" module="Toybox_PersistedContent" symbol="getId"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="Workout" module="Toybox_PersistedContent" symbol="toIntent"/>
<annotationEntry annotation="minSdk(&quot;1.0.2&quot;)" class="PersistedLocations" module="Toybox" symbol="persistLocation"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Location" module="Toybox_Position" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Location" module="Toybox_Position" symbol="toDegrees"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Location" module="Toybox_Position" symbol="toRadians"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Location" module="Toybox_Position" symbol="toGeoString"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Position" module="Toybox" symbol="parse"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Position" module="Toybox" symbol="enableLocationEvents"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Position" module="Toybox" symbol="getInfo"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Position" module="Toybox" symbol="testInfoString"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Sensor" module="Toybox" symbol="setEnabledSensors"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Sensor" module="Toybox" symbol="enableSensorEvents"/>
<annotationEntry annotation="hasAccelerometer" class="Info" module="Toybox_Sensor" symbol="accel"/>
<annotationEntry annotation="hasMagnetometer" class="Info" module="Toybox_Sensor" symbol="mag"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Sensor" module="Toybox" symbol="getInfo"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="SensorHistoryIterator" module="Toybox_SensorHistory" symbol="next"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="SensorHistoryIterator" module="Toybox_SensorHistory" symbol="getMax"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="SensorHistoryIterator" module="Toybox_SensorHistory" symbol="getMin"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="SensorHistoryIterator" module="Toybox_SensorHistory" symbol="getNewestSampleTime"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="SensorHistoryIterator" module="Toybox_SensorHistory" symbol="getOldestSampleTime"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="SensorHistory" module="Toybox" symbol="getHeartRateHistory"/>
<annotationEntry annotation="hasHeartRateHistory" class="SensorHistory" module="Toybox" symbol="getHeartRateHistory"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="SensorHistory" module="Toybox" symbol="getTemperatureHistory"/>
<annotationEntry annotation="hasTemperatureHistory" class="SensorHistory" module="Toybox" symbol="getTemperatureHistory"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="SensorHistory" module="Toybox" symbol="getPressureHistory"/>
<annotationEntry annotation="hasPressureHistory" class="SensorHistory" module="Toybox" symbol="getPressureHistory"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="SensorHistory" module="Toybox" symbol="getElevationHistory"/>
<annotationEntry annotation="hasElevationHistory" class="SensorHistory" module="Toybox" symbol="getElevationHistory"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="StringUtil" module="Toybox" symbol="charArrayToString"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="StringUtil" module="Toybox" symbol="utf8ArrayToString"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="StringUtil" module="Toybox" symbol="encodeBase64"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="Intent" module="Toybox_System" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="System" module="Toybox" symbol="println"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="System" module="Toybox" symbol="print"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="System" module="Toybox" symbol="getTimer"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="System" module="Toybox" symbol="getClockTime"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="System" module="Toybox" symbol="getDeviceSettings"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="System" module="Toybox" symbol="getSystemStats"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="System" module="Toybox" symbol="trap"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="System" module="Toybox" symbol="exit"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="System" module="Toybox" symbol="error"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="System" module="Toybox" symbol="exitTo"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="UnexpectedAppTypeException" module="Toybox_System" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="AppNotInstalledException" module="Toybox_System" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="PreviousOperationNotCompleteException" module="Toybox_System" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="Logger" module="Toybox_Test" symbol="debug"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="Logger" module="Toybox_Test" symbol="warning"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="Logger" module="Toybox_Test" symbol="error"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="Test" module="Toybox" symbol="assert"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="Test" module="Toybox" symbol="assertMessage"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="Test" module="Toybox" symbol="assertEqual"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="Test" module="Toybox" symbol="assertEqualMessage"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="Test" module="Toybox" symbol="assertNotEqual"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="Test" module="Toybox" symbol="assertNotEqualMessage"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="Test" module="Toybox_Test" symbol="getNumberOfTests"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="Test" module="Toybox_Test" symbol="runTest"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="Test" module="Toybox_Test" symbol="passed"/>
<annotationEntry annotation="minSdk(&quot;1.1.2&quot;)" class="Moment" module="Toybox_Time" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Moment" module="Toybox_Time" symbol="add"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Moment" module="Toybox_Time" symbol="subtract"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Moment" module="Toybox_Time" symbol="compare"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Moment" module="Toybox_Time" symbol="lessThan"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Moment" module="Toybox_Time" symbol="greaterThan"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Moment" module="Toybox_Time" symbol="value"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Duration" module="Toybox_Time" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Duration" module="Toybox_Time" symbol="add"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Duration" module="Toybox_Time" symbol="subtract"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Duration" module="Toybox_Time" symbol="multiply"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Duration" module="Toybox_Time" symbol="divide"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Duration" module="Toybox_Time" symbol="compare"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Duration" module="Toybox_Time" symbol="lessThan"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Duration" module="Toybox_Time" symbol="greaterThan"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Duration" module="Toybox_Time" symbol="value"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Time" module="Toybox" symbol="now"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Time" module="Toybox" symbol="today"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Gregorian" module="Toybox_Time" symbol="moment"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Gregorian" module="Toybox_Time" symbol="momentNative"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Gregorian" module="Toybox_Time" symbol="duration"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Gregorian" module="Toybox_Time" symbol="info"/>
<annotationEntry annotation="minSdk(&quot;2.0.0&quot;)" class="Gregorian" module="Toybox_Time" symbol="utcInfo"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Timer" module="Toybox_Timer" symbol="start"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Timer" module="Toybox_Timer" symbol="stop"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="UserProfile" module="Toybox" symbol="getProfile"/>
<annotationEntry annotation="minSdk(&quot;1.2.6&quot;)" class="UserProfile" module="Toybox" symbol="getHeartRateZones"/>
<annotationEntry annotation="minSdk(&quot;1.2.6&quot;)" class="UserProfile" module="Toybox" symbol="getCurrentSport"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="KeyEvent" module="Toybox_WatchUi" symbol="getKey"/>
<annotationEntry annotation="minSdk(&quot;1.1.2&quot;)" class="KeyEvent" module="Toybox_WatchUi" symbol="getType"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="ClickEvent" module="Toybox_WatchUi" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="ClickEvent" module="Toybox_WatchUi" symbol="getCoordinates"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="ClickEvent" module="Toybox_WatchUi" symbol="getType"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="SwipeEvent" module="Toybox_WatchUi" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="SwipeEvent" module="Toybox_WatchUi" symbol="getDirection"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="SelectableEvent" module="Toybox_WatchUi" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="SelectableEvent" module="Toybox_WatchUi" symbol="getPreviousState"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="SelectableEvent" module="Toybox_WatchUi" symbol="getInstance"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="WatchUi" module="Toybox" symbol="animate"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="WatchUi" module="Toybox" symbol="loadResource"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="InputDelegate" module="Toybox_WatchUi" symbol="onKey"/>
<annotationEntry annotation="minSdk(&quot;1.1.2&quot;)" class="InputDelegate" module="Toybox_WatchUi" symbol="onKeyPressed"/>
<annotationEntry annotation="minSdk(&quot;1.1.2&quot;)" class="InputDelegate" module="Toybox_WatchUi" symbol="onKeyReleased"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="InputDelegate" module="Toybox_WatchUi" symbol="onTap"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="InputDelegate" module="Toybox_WatchUi" symbol="onHold"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="InputDelegate" module="Toybox_WatchUi" symbol="onRelease"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="InputDelegate" module="Toybox_WatchUi" symbol="onSwipe"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="InputDelegate" module="Toybox_WatchUi" symbol="onSelectable"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="InputDelegate" module="Toybox_WatchUi" symbol="handleEvent"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="BehaviorDelegate" module="Toybox_WatchUi" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="BehaviorDelegate" module="Toybox_WatchUi" symbol="onNextPage"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="BehaviorDelegate" module="Toybox_WatchUi" symbol="onPreviousPage"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="BehaviorDelegate" module="Toybox_WatchUi" symbol="onMenu"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="BehaviorDelegate" module="Toybox_WatchUi" symbol="onBack"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="BehaviorDelegate" module="Toybox_WatchUi" symbol="onNextMode"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="BehaviorDelegate" module="Toybox_WatchUi" symbol="onPreviousMode"/>
<annotationEntry annotation="minSdk(&quot;1.2.0&quot;)" class="BehaviorDelegate" module="Toybox_WatchUi" symbol="onSelect"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="BehaviorDelegate" module="Toybox_WatchUi" symbol="handleEvent"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="View" module="Toybox_WatchUi" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="View" module="Toybox_WatchUi" symbol="findDrawableById"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="View" module="Toybox_WatchUi" symbol="onLayout"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="View" module="Toybox_WatchUi" symbol="onShow"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="View" module="Toybox_WatchUi" symbol="onUpdate"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="View" module="Toybox_WatchUi" symbol="onHide"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="View" module="Toybox_WatchUi" symbol="setLayout"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="View" module="Toybox_WatchUi" symbol="setKeyToSelectableInteraction"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="WatchFace" module="Toybox_WatchUi" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="WatchFace" module="Toybox_WatchUi" symbol="onEnterSleep"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="WatchFace" module="Toybox_WatchUi" symbol="onExitSleep"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="DataField" module="Toybox_WatchUi" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="DataField" module="Toybox_WatchUi" symbol="compute"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="DataField" module="Toybox_WatchUi" symbol="onTimerStart"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="DataField" module="Toybox_WatchUi" symbol="onTimerStop"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="DataField" module="Toybox_WatchUi" symbol="onTimerPause"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="DataField" module="Toybox_WatchUi" symbol="onTimerResume"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="DataField" module="Toybox_WatchUi" symbol="onTimerLap"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="DataField" module="Toybox_WatchUi" symbol="onTimerReset"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="DataField" module="Toybox_WatchUi" symbol="getObscurityFlags"/>
<annotationEntry annotation="minSdk(&quot;1.2.0&quot;)" class="DataField" module="Toybox_WatchUi" symbol="getBackgroundColor"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="DataField" module="Toybox_WatchUi" symbol="createField"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="SimpleDataField" module="Toybox_WatchUi" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="SimpleDataField" module="Toybox_WatchUi" symbol="compute"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="WatchUi" module="Toybox" symbol="requestUpdate"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Menu" module="Toybox_WatchUi" symbol="setTitle"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Menu" module="Toybox_WatchUi" symbol="addItem"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="MenuInputDelegate" module="Toybox_WatchUi" symbol="onMenuItem"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Confirmation" module="Toybox_WatchUi" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="ConfirmationDelegate" module="Toybox_WatchUi" symbol="onResponse"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="NumberPicker" module="Toybox_WatchUi" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="NumberPickerDelegate" module="Toybox_WatchUi" symbol="onNumberPicked"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="ProgressBar" module="Toybox_WatchUi" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="ProgressBar" module="Toybox_WatchUi" symbol="setProgress"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="ProgressBar" module="Toybox_WatchUi" symbol="setDisplayString"/>
<annotationEntry annotation="minSdk(&quot;1.1.0&quot;)" class="TextPicker" module="Toybox_WatchUi" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;1.1.0&quot;)" class="TextPickerDelegate" module="Toybox_WatchUi" symbol="onTextEntered"/>
<annotationEntry annotation="minSdk(&quot;1.1.0&quot;)" class="TextPickerDelegate" module="Toybox_WatchUi" symbol="onCancel"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="WatchUi" module="Toybox" symbol="pushView"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="WatchUi" module="Toybox" symbol="popView"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="WatchUi" module="Toybox" symbol="switchToView"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="BitmapResource" module="Toybox_WatchUi" symbol="getHeight"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="BitmapResource" module="Toybox_WatchUi" symbol="getWidth"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="BitmapResource" module="Toybox_WatchUi" symbol="toString"/>
<annotationEntry annotation="property" class="Drawable" module="Toybox_WatchUi" symbol="identifier"/>
<annotationEntry annotation="property" class="Drawable" module="Toybox_WatchUi" symbol="locX"/>
<annotationEntry annotation="property" class="Drawable" module="Toybox_WatchUi" symbol="locY"/>
<annotationEntry annotation="property" class="Drawable" module="Toybox_WatchUi" symbol="width"/>
<annotationEntry annotation="property" class="Drawable" module="Toybox_WatchUi" symbol="height"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Drawable" module="Toybox_WatchUi" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Drawable" module="Toybox_WatchUi" symbol="draw"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Drawable" module="Toybox_WatchUi" symbol="setLocation"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Drawable" module="Toybox_WatchUi" symbol="setSize"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Bitmap" module="Toybox_WatchUi" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Bitmap" module="Toybox_WatchUi" symbol="getDimensions"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Bitmap" module="Toybox_WatchUi" symbol="draw"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Bitmap" module="Toybox_WatchUi" symbol="setBitmap"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Text" module="Toybox_WatchUi" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Text" module="Toybox_WatchUi" symbol="draw"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Text" module="Toybox_WatchUi" symbol="setColor"/>
<annotationEntry annotation="minSdk(&quot;1.3.0&quot;)" class="Text" module="Toybox_WatchUi" symbol="setBackgroundColor"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Text" module="Toybox_WatchUi" symbol="setFont"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Text" module="Toybox_WatchUi" symbol="setJustification"/>
<annotationEntry annotation="minSdk(&quot;1.0.0&quot;)" class="Text" module="Toybox_WatchUi" symbol="setText"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="InvalidSelectableStateException" module="Toybox_WatchUi" symbol="initialize"/>
<annotationEntry annotation="property" class="Selectable" module="Toybox_WatchUi" symbol="stateDefault"/>
<annotationEntry annotation="property" class="Selectable" module="Toybox_WatchUi" symbol="stateHighlighted"/>
<annotationEntry annotation="property" class="Selectable" module="Toybox_WatchUi" symbol="stateSelected"/>
<annotationEntry annotation="property" class="Selectable" module="Toybox_WatchUi" symbol="stateDisabled"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="Selectable" module="Toybox_WatchUi" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="Selectable" module="Toybox_WatchUi" symbol="getState"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="Selectable" module="Toybox_WatchUi" symbol="setState"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="Selectable" module="Toybox_WatchUi" symbol="draw"/>
<annotationEntry annotation="property" class="Button" module="Toybox_WatchUi" symbol="background"/>
<annotationEntry annotation="property" class="Button" module="Toybox_WatchUi" symbol="behavior"/>
<annotationEntry annotation="minSdk(&quot;2.1.0&quot;)" class="Button" module="Toybox_WatchUi" symbol="draw"/>
<annotationEntry annotation="minSdk(&quot;1.2.0&quot;)" class="PickerFactory" module="Toybox_WatchUi" symbol="getDrawable"/>
<annotationEntry annotation="minSdk(&quot;1.2.0&quot;)" class="PickerFactory" module="Toybox_WatchUi" symbol="getValue"/>
<annotationEntry annotation="minSdk(&quot;1.2.0&quot;)" class="PickerFactory" module="Toybox_WatchUi" symbol="getSize"/>
<annotationEntry annotation="minSdk(&quot;1.2.0&quot;)" class="PickerDelegate" module="Toybox_WatchUi" symbol="onAccept"/>
<annotationEntry annotation="minSdk(&quot;1.2.0&quot;)" class="PickerDelegate" module="Toybox_WatchUi" symbol="onCancel"/>
<annotationEntry annotation="minSdk(&quot;1.2.0&quot;)" class="Picker" module="Toybox_WatchUi" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="BatteryStatus" module="Toybox_AntPlus" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="ManufacturerInfo" module="Toybox_AntPlus" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="ProductInfo" module="Toybox_AntPlus" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="Device" module="Toybox_AntPlus" symbol="getBatteryStatus"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="Device" module="Toybox_AntPlus" symbol="getComponentIdentifiers"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="Device" module="Toybox_AntPlus" symbol="getManufacturerInfo"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="Device" module="Toybox_AntPlus" symbol="getProductInfo"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="Device" module="Toybox_AntPlus" symbol="getDeviceState"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="Device" module="Toybox_AntPlus" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="Device" module="Toybox_AntPlus" symbol="setListener"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="DeviceListener" module="Toybox_AntPlus" symbol="onBatteryStatusUpdate"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="DeviceListener" module="Toybox_AntPlus" symbol="onManufacturerInfoUpdate"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="DeviceListener" module="Toybox_AntPlus" symbol="onProductInfoUpdate"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="DeviceListener" module="Toybox_AntPlus" symbol="onDeviceStateUpdate"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="BikeLight" module="Toybox_AntPlus" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="BikeLight" module="Toybox_AntPlus" symbol="getCapableModes"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="BikeLight" module="Toybox_AntPlus" symbol="setMode"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="LightNetwork" module="Toybox_AntPlus" symbol="getNetworkMode"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="LightNetwork" module="Toybox_AntPlus" symbol="getNetworkState"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="LightNetwork" module="Toybox_AntPlus" symbol="getBikeLights"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="LightNetwork" module="Toybox_AntPlus" symbol="restoreHeadlightsNetworkModeControl"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="LightNetwork" module="Toybox_AntPlus" symbol="restoreTaillightsNetworkModeControl"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="LightNetwork" module="Toybox_AntPlus" symbol="setHeadlightsMode"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="LightNetwork" module="Toybox_AntPlus" symbol="setTaillightsMode"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="LightNetwork" module="Toybox_AntPlus" symbol="toggleSignalLight"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="LightNetwork" module="Toybox_AntPlus" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="LightNetworkListener" module="Toybox_AntPlus" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="LightNetworkListener" module="Toybox_AntPlus" symbol="onLightNetworkStateUpdate"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="LightNetworkListener" module="Toybox_AntPlus" symbol="onBikeLightUpdate"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="BikePower" module="Toybox_AntPlus" symbol="getCalculatedCadence"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="BikePower" module="Toybox_AntPlus" symbol="getCalculatedPower"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="BikePower" module="Toybox_AntPlus" symbol="getCalculatedWheelDistance"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="BikePower" module="Toybox_AntPlus" symbol="getCalculatedWheelSpeed"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="BikePower" module="Toybox_AntPlus" symbol="getPedalPowerBalance"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="BikePower" module="Toybox_AntPlus" symbol="getTorqueEffectivenessPedalSmoothness"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="BikePower" module="Toybox_AntPlus" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="BikePowerListener" module="Toybox_AntPlus" symbol="initialize"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="BikePowerListener" module="Toybox_AntPlus" symbol="onCalculatedCadenceUpdate"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="BikePowerListener" module="Toybox_AntPlus" symbol="onCalculatedPowerUpdate"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="BikePowerListener" module="Toybox_AntPlus" symbol="onCalculatedWheelDistanceUpdate"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="BikePowerListener" module="Toybox_AntPlus" symbol="onCalculatedWheelSpeedUpdate"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="BikePowerListener" module="Toybox_AntPlus" symbol="onPedalPowerBalanceUpdate"/>
<annotationEntry annotation="minSdk(&quot;2.2.0&quot;)" class="BikePowerListener" module="Toybox_AntPlus" symbol="onTorqueEffectivenessPedalSmoothnessUpdate"/>
</annotations>
<functions>
<functionEntry name="getActivityInfo" parent="Activity">
<documentation><![CDATA[<div class="description"> To retrieve the current Activity.Info, call getActivityInfo()<br/> <div class="returns">Returns  [Activity.Info] The current Activity.Info</div><br/>    or null if there is no activity running.<br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="HeartRateIterator">
<documentation/>
</functionEntry>
<functionEntry name="next" parent="HeartRateIterator">
<documentation><![CDATA[<div class="description"> Get the next entry in the iterator. This must be called to get the initial<br/> data from the iterator.<br/> @since 1.2.2<br/> <div class="returns">Returns  [HeartRateSample] returns the next HeartRateSample, or null if</div><br/>                            there are no more samples<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getMax" parent="HeartRateIterator">
<documentation><![CDATA[<div class="description"> Get the maximium heart rate contained in this iterator.<br/> @since 1.2.2<br/> <div class="returns">Returns  [Number] the maximum heart rate (bpm)</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getMin" parent="HeartRateIterator">
<documentation><![CDATA[<div class="description"> Get the minimium heart rate contained in this iterator.<br/> @since 1.2.2<br/> <div class="returns">Returns  [Number] the minimum heart rate (bpm)</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getHeartRateHistory" parent="ActivityMonitor">
<param id="period"/>
<param id="newestFirst"/>
<documentation><![CDATA[<div class="description"> Retrieve the heart rate history for the given period, up to the last power cycle. This function always<br/> returns the most recent heart rate samples. The time between each HeartRateSample in the iterator<br/> may be device dependent.<br/> @since 1.2.1<br/> <div class="param"> period If period is null, the entire available history is retrieved. If period is a Duration,</div><br/>               then the history for the given Duration is retrieved. If period is a Number, then the<br/>               last Number entries are retrieved.<br/> <div class="param"> newestFirst true to get the samples newest first, false to get them oldest first</div><br/> <div class="returns">Returns  [ActivityMonitor.HeartRateIterator] an iterator for the heart rate history for the given period</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getInfo" parent="ActivityMonitor">
<documentation><![CDATA[<div class="description"> Use getInfo() to retrieve the current ActivityMonitor.Info<br/> @since 1.0.0<br/> <div class="returns">Returns  [ActivityMonitor.Info] object with current information.</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getHistory" parent="ActivityMonitor">
<documentation><![CDATA[<div class="description"> Use getHistory() to retrieve an array of ActivityMonitor.History objects<br/> @since 1.0.0<br/> <div class="returns">Returns  [Array] of ActivityMonitor.History objects.</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="add" parent="BurstPayload">
<param id="message"/>
<documentation><![CDATA[<div class="description"> Adds a Message object to the end of the burst data.<br/> <div class="param"> [Array] message Array of integers representing the bytes of the data payload</div><br/> @since 2.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getSize" parent="BurstPayload">
<documentation><![CDATA[<div class="description"> Returns the number of burst messages contained in the payload.<br/> <div class="returns">Returns  [Number] The number of messages</div><br/> @since 2.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="BurstPayload">
<documentation><![CDATA[<div class="description"> Constructor for the payload object<br/> @since 2.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="BurstPayloadIterator">
<param id="newBurstPayload"/>
<documentation><![CDATA[<div class="description"> Constructor for the payload iterator object<br/> @since 2.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="next" parent="BurstPayloadIterator">
<documentation><![CDATA[<div class="description"> Returns the next message in the burst payload.<br/> <div class="returns">Returns  [Array] Array of integers representing the bytes of the data payload, or null if one does not exist.</div><br/> @since 2.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onReceiveComplete" parent="BurstListener">
<param id="burstPayload"/>
<documentation><![CDATA[<div class="description"> Callback when a burst reception completes successfully<br/> <div class="param"> [BurstPayload] burstPayload The burst data received across the channel</div><br/> @since 2.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onReceiveFail" parent="BurstListener">
<param id="errorCode"/>
<documentation><![CDATA[<div class="description"> Callback when a burst reception fails over the air<br/> <div class="param"> [Number] errorCode The type of burst failure that occurred</div><br/> @since 2.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onTransmitComplete" parent="BurstListener">
<documentation><![CDATA[<div class="description"> Callback when a burst transmission completes successfully<br/> @since 2.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onTransmitFail" parent="BurstListener">
<param id="errorCode"/>
<documentation><![CDATA[<div class="description"> Callback when a burst transmission fails over the air<br/> <div class="param"> [Number] errorCode The type of burst failure that occurred</div><br/> @since 2.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="ChannelAssignment">
<param id="c"/>
<param id="n"/>
<documentation><![CDATA[<div class="description"> Constructor for the channel object.<br/> By default disables background scanning.<br/> <div class="param"> c [enum] Channel type specifier</div><br/> @option [CHANNEL_TYPE_TX_NOT_RX] Bidirectional Transmit (Master)<br/> @option [CHANNEL_TYPE_RX_NOT_TX] Bidirectional Receive (Slave)<br/> @option [CHANNEL_TYPE_RX_ONLY] Receive Only (Slave)<br/> <div class="param"> n Network</div><br/> @option [NETWORK_PUBLIC] ANT public network<br/> @option [NETWORK_PLUS] ANT+ network<br/> @option [NETWORK_PRIVATE] ANT private network<br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="isBackgroundScanEnabled" parent="ChannelAssignment">
<documentation><![CDATA[<div class="description"> See if background scanning is enabled for the channel assignment.<br/> <div class="returns">Returns  [Boolean] true - If background scan is enabled.</div><br/> @since 1.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="setBackgroundScan" parent="ChannelAssignment">
<param id="isBackgroundScanEnabled"/>
<documentation><![CDATA[<div class="description"> Set background scan to be enabled or disabled.<br/> Enabling background scan can only be done on Receive Only channels.<br/> <div class="param"> [Boolean] isBackgroundScanEnabled true to enable background scan, false otherwise.</div><br/> <div class="returns">Returns  [Boolean] true - If the background scan property was successfully set.</div><br/> @since 1.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="DeviceConfig">
<param id="options"/>
<documentation><![CDATA[<div class="description"> Constructor for the device config object<br/> <div class="param"> options [Dictionary] initialization options</div><br/> @option [:deviceNumber] ANT-id of the device to search for. Not setting enables a<br/>    wildcard search<br/> @option [:deviceType]  1-Byte device type identifier (See ANT Protocol for pre-defined Device Types)<br/> @option [:transmissionType] Manufacturer-specific transport type and extended device number<br/> @option [:messagePeriod] Message period that the sensor uses<br/> @option [:radioFrequency] Radio frequency that the sensor operates on. Range of 2 to 80.<br/> @option [:searchTimeoutLowPriority] Low Priority search timeout that a receiving channel<br/>     will wait for in order to start tracking a master. Low Priority search provides the capability of<br/>     searching for a master without interrupting other channels on the device. Range of 0 to 12<br/>     (2.5s increments). Default 6 (15s).<br/> @option [:searchTimeoutHighPriority] High Priority search timeout that a receiving channel<br/>     will wait for in order to start tracking a master. High Priority search mode is triggered after<br/>     the Low Priority search mode times out. High Priority search will interrupt other channels, and<br/>     it will take priority over any other open channels on that device. Any time a High Priority search<br/>     overlaps another channel the High Priority search takes priority and that other channel is blocked.<br/>     It is recommended to keep this search type disabled unless you have great difficulty acquiring a<br/>     master through Low Priority search. High Priority searches are disabled in data-fields, and this<br/>     key will be ignored if specified for that application type. Range of 0 to 2 (2.5s increments).<br/>     Default 0 (disabled).<br/> @option [:searchThreshold] Proximity threshold bin<br/> @option [:networkKey64Bit] 64 bit network key. Set this when NETWORK_PRIVATE was chosen in the channel<br/>     assignment.<br/> @option [:networkKey128Bit] 128 bit network key. Set this when NETWORK_PRIVATE was chosen in the channel<br/>     assignment.<br/> @since 1.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="GenericChannel">
<param id="listener"/>
<param id="ca"/>
<documentation><![CDATA[<div class="description"> Constructor for the generic channel<br/> throws UnableToAcquireChannelException if the the system does not have a channel available.<br/> <div class="param"> listener [Method] Method object to call with sensor updates.</div><br/> <div class="param"> ca [ChannelAssignment] ChannelAssignment object for the channel</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getDeviceConfig" parent="GenericChannel">
<documentation><![CDATA[<div class="description"> Get the current ANT channel configuration<br/> @since 1.0.0<br/> <div class="returns">Returns  [DeviceConfig] DeviceConfig object with current channel device configuration.</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="setDeviceConfig" parent="GenericChannel">
<param id="config"/>
<documentation><![CDATA[<div class="description"> Set the current ANT channel configuration<br/> <div class="param"> config [DeviceConfig] DeviceConfig object to set</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="open" parent="GenericChannel">
<documentation><![CDATA[<div class="description"> Open a generic ANT Channel<br/> <div class="returns">Returns  [Boolean] true - If successfully opened the channel</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="close" parent="GenericChannel">
<documentation><![CDATA[<div class="description"> Close a generic ANT Channel<br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="release" parent="GenericChannel">
<documentation><![CDATA[<div class="description"> Release the generic ANT Channel back to the system.  If it is open it will be automatically closed.<br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="sendAcknowledge" parent="GenericChannel">
<param id="data"/>
<documentation><![CDATA[<div class="description"> Sends an acknowledge message<br/> <div class="param"> data [Integer] 8 byte data packet</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="sendBroadcast" parent="GenericChannel">
<param id="data"/>
<documentation><![CDATA[<div class="description"> Sends a broadcast message<br/> <div class="param"> data [Integer] 8 byte data packet</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="sendBurst" parent="GenericChannel">
<param id="burstData"/>
<documentation><![CDATA[<div class="description"> Sends an array of Messages as a burst across the ANT channel<br/> Success / fail is received by the BurstListener<br/> <div class="param"> [BurstPayload] burstData The data to burst across the channel</div><br/> @since 2.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="setBurstListener" parent="GenericChannel">
<param id="listener"/>
<documentation><![CDATA[<div class="description"> Sets the listener for burst events.<br/> Failed bursts or those larger than the specified threshold will be discarded.<br/> <div class="param"> [BurstListener] listener An extension of the BurstListener class</div><br/> @since 2.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getPayload" parent="Message">
<documentation><![CDATA[<div class="description"> Get the ANT data packet<br/> <div class="returns">Returns  [Array] Array of integers representing the bytes of the data payload</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="setPayload" parent="Message">
<param id="data"/>
<documentation><![CDATA[<div class="description"> Set the ANT data packet.<br/> <div class="param"> data [Array] Array of integers representing the bytes of the data payload</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="UnableToAcquireChannelException">
<documentation><![CDATA[<div class="description"> Constructor<br/> @since 1.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getApp" parent="Application">
<documentation><![CDATA[<div class="description"> Call getApp() to retrieve the AppBase object that is currently running.<br/> <div class="returns">Returns  [AppBase] The currently running AppBase object</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onStart" parent="AppBase">
<param id="state"/>
<documentation><![CDATA[<div class="description"> Before the initial WatchUi.View is retrieved, onStart() is called. This is where app<br/> level settings can be initialized or retrieved from the object store before<br/> the initial View is created.<br/> <div class="param"> state [Dictionary] Unused</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getInitialView" parent="AppBase">
<documentation><![CDATA[<div class="description"> To retrieve the initial WatchUi.View and WatchUi.InputDelegate<br/> of the application, call getInitialView(). Providing a WatchUi.InputDelegate<br/> is optional for widgets and watch-apps. For watchfaces and datafields, an<br/> array containing just a WatchUi.View should be returned as input is not available<br/> for these app types.<br/> <div class="returns">Returns  [Array] An array containing [ WatchUi.View, WatchUi.InputDelegate (optional) ]</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getGoalView" parent="AppBase">
<param id="goalType"/>
<documentation><![CDATA[<div class="description"> Retrives the WatchUi.View for a goal that has triggered within a watchface.<br/> If a goal is reached when a watchface is running, this function will be triggered.<br/> The type of goal that was met will be provided, and the AppBase should return<br/> a View that displays a goal reached message and/or animations for that goal.<br/> If a View is returned from this function, the main watchface view will be<br/> shutdown, and then new View will pushed. If this method is not overridden<br/> in the AppBase, or if it returns null, the native goal screens will be shown.<br/> <div class="param"> goalType [Number] The goal type that has triggered from. From the GOAL_TYPE_??? enumeration.</div><br/> <div class="returns">Returns  [Array] An array containing [ WatchUi.View ]</div><br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onSettingsChanged" parent="AppBase">
<documentation><![CDATA[<div class="description"> Called when the application settings have been changed by Garmin Connect Mobile while<br/> while the app is running.<br/> @since 1.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onStop" parent="AppBase">
<param id="state"/>
<documentation><![CDATA[<div class="description"> When the system is going to terminate an application, onStop() is called.<br/> If the application needs to save state to the object store it should be<br/> done in this function.<br/> <div class="param"> state [Dictionary] Unused</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onEvent" parent="AppBase">
<param id="properties"/>
<documentation><![CDATA[<div class="description"> When an application is started as a result of a system Event, the<br/> the onEvent method is called after onStart.<br/> <div class="param"> properties [Dictionary] The properties provided when the Event was scheduled</div><br/> @since 1.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getProperty" parent="AppBase">
<param id="key"/>
<documentation><![CDATA[<div class="description"> To get the data associated with the given key from the object store, use getProperty().<br/> <div class="param"> key Key of the value to retrieve from the object store (cannot be a Symbol)</div><br/> <div class="returns">Returns  [Object] Content associated with the key, or null if the key is not in the object store</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="setProperty" parent="AppBase">
<param id="key"/>
<param id="value"/>
<documentation><![CDATA[<div class="description"> Using a key, store the given data in the object by calling setProperty().<br/> Keys can be of type String, Number, Float, and Boolean.<br/> Values can be of type String, Number, Float, Boolean, null, and Arrays or Dictionaries containing those types.<br/> There is a limit on the size of the Properties of 8KB. If you reach this limit, the properties will not be<br/> saved or reloaded.<br/> <div class="param"> key The key used to store and retrieve the value from the object store (cannot be a Symbol)</div><br/> <div class="param"> value The value to put into the object store</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="deleteProperty" parent="AppBase">
<param id="key"/>
<documentation><![CDATA[<div class="description"> Deletes the given key from the object store.<br/> <div class="param"> key The key to delete</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="clearProperties" parent="AppBase">
<documentation><![CDATA[<div class="description"> Clears the object store for the application.<br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="loadProperties" parent="AppBase">
<documentation><![CDATA[<div class="description"> Load the properties for this app<br/> @since 1.0.0<br/> @deprecated loadProperties() will be removed in Connect IQ 3.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="saveProperties" parent="AppBase">
<documentation><![CDATA[<div class="description"> Save the properties for this app<br/> @since 1.0.0<br/> @deprecated saveProperties() will be removed in Connect IQ 3.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="validateProperty" parent="AppBase">
<param id="key"/>
<param id="value"/>
<documentation><![CDATA[<div class="description"> Validate a property being stored<br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="playTone" parent="Attention">
<param id="tone"/>
<documentation><![CDATA[<div class="description"> Play a tone.<br/> <div class="param"> tone TONE_XXX value to play</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="VibeProfile">
<param id="dutyCycleVal"/>
<param id="lengthVal"/>
<documentation><![CDATA[<div class="description"> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="vibrate" parent="Attention">
<param id="vibe"/>
<documentation><![CDATA[<div class="description"> Use the vibe motor<br/> <div class="param"> [Array] vibe Array of VibeProfile objects to play in sequence. Maximum of 8 supported.</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="backlight" parent="Attention">
<param id="onOff"/>
<documentation><![CDATA[<div class="description"> Turn on or off the backlight.<br/> <div class="param"> [Boolean] onOff true to turn on backlight, false otherwise.</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="encodeURL" parent="Communications">
<param id="url"/>
<documentation><![CDATA[<div class="description"> Convert a URL string into a percent-encoded string.<br/> The reserved characters in the string will be replaced with their corresponding<br/> hex-value pairs. This follows the URI-encoding scheme as detailed by RFC 3986<br/> which can be found here: https://www.ietf.org/rfc/rfc3986.txt<br/> <div class="param">  [String] url The URL string to be encoded</div><br/> <div class="returns">Returns  [String] Percent-encoded string</div><br/> @since 1.1.2<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="makeJsonRequest" parent="Communications">
<param id="url"/>
<param id="parameters"/>
<param id="options"/>
<param id="responseCallback"/>
<documentation><![CDATA[<div class="description"> To use Garmin Connect Mobile as a proxy to the web, use makeJsonRequest().<br/> The request is asynchronous; the responseCallback will be called when the request returns.<br/> <div class="param"> [String] url The URL being requested</div><br/> <div class="param"> [Dictionary] parameters Dictionary of keys and values, appended to the URL as a GET/DELETE request or set as the</div><br/>                                body for a POST/PUT request. These values must be URL encoded. Can be null.<br/> <div class="param"> [Dictionary] options Dictionary of options. Can be null.</div><br/> @option options [Number] :method The HTTP method of the request. Should be a HTTP_REQUEST_METHOD_* value.<br/> @option options [Dictionary] :headers A Dictionary of HTTP headers to include in the request. The "Content-Type"<br/>                                       header for the body of the request can be specified using a REQUEST_CONTENT_TYPE_*<br/>                                       value. This is only valid for methods PUT and POST (you cannot set a body for a GET<br/>                                       or DELETE request). If the content type is not specified, it will default to<br/>                                       "application/x-www-form-urlencoded".<br/> <div class="param"> [Method] responseCallback This is a callback in the format function responseCallback(responseCode, data);</div><br/>     responseCode has the server response code, and data contains a Dictionary of content if the request was successful.<br/> @since 1.0.0<br/> @deprecated makeJsonRequest() class will be dropped in Connect IQ 4.0.0. Please use makeWebRequest().<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="makeWebRequest" parent="Communications">
<param id="url"/>
<param id="parameters"/>
<param id="options"/>
<param id="responseCallback"/>
<documentation><![CDATA[<div class="description"> To use Garmin Connect Mobile as a proxy to the web, use makeWebRequest().<br/> The request is asynchronous; the responseCallback will be called when the request returns.<br/> <div class="param"> [String] url The URL being requested</div><br/> <div class="param"> [Dictionary] parameters Dictionary of keys and values. These values should not be URL encoded. Can be null.</div><br/> <div class="param"> [Dictionary] options Dictionary of options. Can be null.</div><br/> @option options [Number] :method The HTTP method of the request. Should be a HTTP_REQUEST_METHOD_* value.<br/> @option options [Dictionary] :headers A Dictionary of HTTP headers to include in the request. The "Content-Type"<br/>                                       header for the body of the request can be specified using a REQUEST_CONTENT_TYPE_*<br/>                                       value. If the content type is not specified, it will default to "application/json"<br/>                                       for POST and PUT requests. By default, GET and DELETE requests will have their<br/>                                       parameters appended to the URL. Setting the method as GET or DELETE as well as a<br/>                                       "Content-Type" header will result in the parameters being set in the body of the<br/>                                       request and they will not be appended to the URL.<br/> @option options [Number] :responseType The format of the response. Should be a HTTP_RESPONSE_CONTENT_TYPE_* value. If HTTP_RESPONSE_CONTENT_TYPE_FIT or<br/>                                        HTTP_RESPONSE_CONTENT_TYPE_GPX is given, the system will attempt to download and parse a FIT or GPX file and store<br/>                                        the contained data in the device, based on the contents of the file. Use If not given, the system will use the Content-Type<br/>                                        header from the server response.<br/> <div class="param"> [Method] responseCallback This is a callback in the format function responseCallback(responseCode, data);</div><br/>                                  responseCode has the server response code or a BLE_* error type, and data contains a Dictionary of content if the request was successful.<br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="makeImageRequest" parent="Communications">
<param id="url"/>
<param id="parameters"/>
<param id="options"/>
<param id="responseCallback"/>
<documentation><![CDATA[<div class="description"> To request an image through Garmin Connect Mobile, call makeImageRequest(). GCM<br/> will scale and dither the image based on the capabilities of the device, but<br/> the user will be able to pass additional options (like dithering it down to a<br/> one color image)<br/> <div class="param"> [String] url URL of image to request</div><br/> <div class="param"> [Dictionary] parameters Dictionary of keys and values, appended to the URL. Can be null.</div><br/> <div class="param"> [Dictionary] options Additional image options</div><br/> @option options [Array] :palette The color palette to restrict the image dithering to. Using a smaller palette can reduce the size of the image data to speed up transfers.<br/> @option options [Number] :maxWidth The maximum width an image should be scaled to<br/> @option options [Number] :maxHeight The maximum height an image should be scaled to<br/> @option options [Number] :dithering The type of dithering to use when processing the image. Defaults to Floyd-Steinberg.<br/> <div class="param"> [Method] responseCallback This is a callback in the format function responseCallback(responseCode, data);</div><br/>      responseCode has the server response code, and data contains a WatchUi.BitmapResource if it was successful.<br/> @since 1.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="generateSignedOAuthHeader" parent="Communications">
<param id="url"/>
<param id="params"/>
<param id="requestMethod"/>
<param id="signatureMethod"/>
<param id="token"/>
<param id="tokenSecret"/>
<param id="consumerKey"/>
<param id="consumerSecret"/>
<documentation><![CDATA[<div class="description"> Generate the value for the "Authorization" header in an OAuth 1.0a request. The returned value can be set as the<br/> "Authorization" header for makeWebRequest().<br/> <div class="param"> url [String] The request URL</div><br/> <div class="param"> params [Dictionary] The parameters of the request</div><br/> <div class="param"> requestMethod [Number] An HTTP_REQUEST_METHOD_* value</div><br/> <div class="param"> signatureMethod [Number] An OAUTH_SIGNING_METHOD_* value</div><br/> <div class="param"> token [String] The token given by the OAuth service. Can be null.</div><br/> <div class="param"> tokenSecret [String] The token secret given by the OAuth service. Used to sign the request.</div><br/> <div class="param"> consumerKey [String] The key that identifies your application</div><br/> <div class="param"> consumerSecret [String] The consumer secret that is used to sign the request.</div><br/> <div class="returns">Returns  [String] The value for the "Authorization" header.</div><br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="makeOAuthRequest" parent="Communications">
<param id="requestUrl"/>
<param id="requestParams"/>
<param id="resultUrl"/>
<param id="resultType"/>
<param id="resultKeys"/>
<documentation><![CDATA[<div class="description"> Request an OAuth sign-in on Garmin Connect Mobile. A notification will trigger on the phone, that when clicked,<br/> provides a webview that shows initialUrl. If the user grants permission to the app the function given to<br/> registerForOAuthMessages() will be called with a Dictionary of keys from the OAuth process.<br/> <div class="param"> [String] requestUrl The URL to load in the web view to begin authentication.</div><br/> <div class="param"> [Dictionary] requestParams A dictionary of non-URL encoded parameters for the initial url.</div><br/> <div class="param"> [String] resultUrl The URL of the final page of authentication that contains the resultKeys.</div><br/> <div class="param"> [Number] resultType What format the result will be in. Should be a OAUTH_RESULT_TYPE_XXX value.</div><br/> <div class="param"> [Dictionary] resultKeys A dictionary of the keys Garmin Connect Mobile will need to pull out of the OAuth response and given to the</div><br/>                     registered callback in registerForOAuthMessages().<br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="makeJsonRequestNative" parent="Communications">
<param id="url"/>
<param id="request"/>
<param id="options"/>
<param id="responseCallback"/>
<documentation/>
</functionEntry>
<functionEntry name="makeImageRequestNative" parent="Communications">
<param id="url"/>
<param id="options"/>
<param id="responseCallback"/>
<param id="maxWidth"/>
<param id="maxHeight"/>
<param id="dithering"/>
<documentation/>
</functionEntry>
<functionEntry name="cancelAllRequests" parent="Communications">
<documentation><![CDATA[<div class="description"> To cancel all pending JSON and Image requests use cancelAllRequests()<br/> @since 1.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="next" parent="MailboxIterator">
<documentation><![CDATA[<div class="description"> Call next() to get the next message from the mailbox.<br/> <div class="returns">Returns  Message content, or null if no messages</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getMailbox" parent="Communications">
<documentation><![CDATA[<div class="description"> Call getMailbox() to get the MailboxIterator for this App's mailbox.<br/> <div class="returns">Returns  [MailboxIterator] Iterator for the mailbox</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="setMailboxListener" parent="Communications">
<param id="listener"/>
<documentation><![CDATA[<div class="description"> Add a listener for mailbox events.  The listener method is called whenever a<br/> new message is received<br/> <div class="param"> [Method] listener Callback in the format function listener(iterator) where iterator is the mailbox iterator for the app</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="emptyMailbox" parent="Communications">
<documentation><![CDATA[<div class="description"> To clear the contents of the mailbox, call emptyMailbox().<br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="transmit" parent="Communications">
<param id="content"/>
<param id="options"/>
<param id="listener"/>
<documentation><![CDATA[<div class="description"> Send data across the the BLE link.<br/> <div class="param"> [Object] content The object to be sent</div><br/> <div class="param"> [Dictionary] options Additional transmit options (TBD)</div><br/> <div class="param"> [ConnectionListener] listener An extension of the ConnectionListener class</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onError" parent="ConnectionListener">
<documentation><![CDATA[<div class="description"> Callback when a communications operation error occurs.<br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onComplete" parent="ConnectionListener">
<documentation><![CDATA[<div class="description"> Callback when a communications operation completes.<br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="OAuthMessage">
<documentation><![CDATA[<div class="description"> Constructor<br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="registerForOAuthMessages" parent="Communications">
<param id="method"/>
<documentation><![CDATA[<div class="description"> Register a callback for receiving OAuth messages. The callback will be called once for<br/> each received OAuth message. If there are messages waiting for the app when this<br/> function is called, the callback will immediately be called once for each<br/> waiting message.<br/> <div class="param"> method [Method] The callback with the signature callback(data). data will be of</div><br/>                        type OAuthMessage<br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="openWebPage" parent="Communications">
<param id="url"/>
<param id="params"/>
<param id="options"/>
<documentation><![CDATA[<div class="description"> Request that GCM issue a phone notification that will open a web page.<br/> <div class="param"> url [String] The URL to open.</div><br/> <div class="param"> params [Dictionary] The request parameters. Parameters should not be URL encoded.</div><br/> <div class="param"> options [Dictionary] Additional options for the request. (TBD)</div><br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="createSession" parent="ActivityRecording">
<param id="options"/>
<documentation><![CDATA[<div class="description"> Use createSession() to create a session object with options determined by the caller.<br/> Only one session object is allowed to exist at a time. If there<br/> is an existing object that has not been closed using the save() or<br/> discard() methods, this method will return that object instead of creating a new one.<br/> On some products running the 1.x SDK, creating a session object requires a large memory<br/> allocation. To free this memory, the session must first be succesfully saved or<br/> or discarded, and then app references to the session object should be set to null.<br/> <div class="param"> [Dictionary] options A Dictionary containing session creation options</div><br/> @option options :sport The primary sport being recorded (SPORT_GENERIC by default)<br/> @option options :subSport The sport subcategory being recorded (SUB_SPORT_GENERIC by default)<br/> @option options [String] :name Required. This is the name that will be associated with the sport being recorded. The suggested maximum length of the name is 15 characters (some devices support longer names).<br/> <div class="returns">Returns  [Session] A new session object, or the existing session object if a session is active and has not been saved or discarded</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="Session">
<documentation><![CDATA[<div class="description"> There is no public constructor; Session objects must be created with createSession().<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="start" parent="Session">
<documentation><![CDATA[<div class="description"> To begin recording a FIT file on the system, start() should be called.<br/> <div class="returns">Returns  [Boolean] true if recording was successfully started, or false if it could not be started</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="stop" parent="Session">
<documentation><![CDATA[<div class="description"> To stop recording a FIT file on the system, stop() should be called.<br/> <div class="returns">Returns  [Boolean] true if recording was successfully stopped, or false if it could not be stopped</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="addLap" parent="Session">
<documentation><![CDATA[<div class="description"> Add a lap to the current recording by calling addLap().<br/> <div class="returns">Returns  [Boolean] true if a lap was successfully created, or false if a lap could not be created</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="isRecording" parent="Session">
<documentation><![CDATA[<div class="description"> Use isRecording() to check if recording is active for this session.<br/> <div class="returns">Returns  [Boolean] true if recording is active, false otherwise</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="save" parent="Session">
<documentation><![CDATA[<div class="description"> After recording is complete, the save() method will complete the session by storing the FIT file on the file system.<br/> <div class="returns">Returns  [Boolean] true if the session was succesfully saved, or false if it was unable to save</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="discard" parent="Session">
<documentation><![CDATA[<div class="description"> After recording is complete, the discard() method will complete the session by discarding the recorded data.<br/> <div class="returns">Returns  [Boolean] true if the session was succesfully discarded, else false</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="createField" parent="Session">
<param id="name"/>
<param id="fieldId"/>
<param id="type"/>
<param id="options"/>
<documentation><![CDATA[<div class="description"> Used to create a new field. Field is updated in the FIT file by changing the the value of the data within the Field.<br/> <div class="param"> [String] name The name of the Field as a string. The maximum length may vary between products. At least 64 bytes are availalble.</div><br/> <div class="param"> [Number] fieldId The unique Field Identifier for the Field</div><br/> <div class="param"> [type] type The type definiton for the field from the DATA_TYPE_ enumeration</div><br/> <div class="param"> [Dictionary] options Optional parameters that can be specified for field creation</div><br/> @option options [Number] :count Optional. The number of elements to add to the field if it is an array. This is also the maximum combined size of strings plus null terminators if the type is DATA_TYPE_STRING (Default 1). Apps are limited to 256 total bytes per message and data fields are limited to 32 bytes per message. Messages larger than the limit will result in a "New Field out of memory for FIT data" error.<br/> @option options [Number] :mesgType Optional. The message type that this field should be added to. Defaults to MESG_TYPE_RECORD if not provided. Note that if mesgType == MESG_TYPE_RECORD, DATA_TYPE_STRING cannot be used as the field type.<br/> @option options [String] :units Optional. The display units as a String. This should use the current device language.  The maximum length may vary between products. At least 16 bytes are availalble.<br/> @option options [Number] :nativeNum Optional. If this field can be treated equivalently to a field that is included in the FIT SDK use this to indicate the Field Number that is specified by the FIT Profile. For reference see: Messages Sheet in Profile.xlsx included in the FIT SDK available at https://www.thisisant.com/resources/fit<br/> <div class="returns">Returns  [Field] the resulting field object</div><br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="next" parent="GeometryIterator">
<documentation><![CDATA[<div class="description"> Go to the next point.<br/> <div class="returns">Returns  [Boolean] true if there is a next point, false otherwise</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="get" parent="GeometryIterator">
<documentation><![CDATA[<div class="description"> Get the location object of the current point.<br/> <div class="returns">Returns  [Location] Location object from cache</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getGeometry" parent="Session">
<documentation><![CDATA[<div class="description"> Get a GeometryIterator for the session. Call get() to retrieve<br/> the Location. Use next() to iterate to the next point. It is<br/> important that the geometryIterator doesn't persist as this locks<br/> down the ActivityRecording. Use it to iterate the points and then<br/> let it go. If there are no points, null is returned.<br/> <div class="returns">Returns  [GeometryIterator] A geometry iterator for the session or null</div><br/> @since 1.0.0<br/> @deprecated The GeometryIterator class will be dropped in Connect IQ 3.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="Field">
<documentation><![CDATA[<div class="description"> There is no public constructor; Field objects must be created with<br/> createField().<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="setData" parent="Field">
<param id="input"/>
<documentation><![CDATA[<div class="description"> Set data sets the data to be written out for this field. This function must be called<br/> every time an update is to be recorded into the activity recording. If this method is called<br/> before the a message is dropped into the activity, the previous value specified will be lost. Do not<br/> for time sensitive data with sub second granularity.<br/> @raise UnexpectedTypeException Thrown if input does not match the type specified at definition.<br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getFontAscent" parent="Graphics">
<param id="font"/>
<documentation><![CDATA[<div class="description"> Gets the recommended distance above the baseline for single<br/> spaced text. The base line is the line on which the text sits.<br/> <div class="param"> [Number] font Font to use</div><br/> <div class="returns">Returns  [Number] The ascent of the font</div><br/> @since 1.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getFontDescent" parent="Graphics">
<param id="font"/>
<documentation><![CDATA[<div class="description"> Gets the recommended distance below the baseline for single<br/> spaced text. The base line is the line on which the text sits.<br/> <div class="param"> [Number] font Font to use</div><br/> <div class="returns">Returns  [Number] The descent of the font</div><br/> @since 1.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getFontHeight" parent="Graphics">
<param id="font"/>
<documentation><![CDATA[<div class="description"> Gets the height (ascent plus descent) of the given font.<br/> <div class="param"> [Number] font Font to use</div><br/> <div class="returns">Returns  [Number] The height of the font</div><br/> @since 1.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="Dc">
<documentation/>
</functionEntry>
<functionEntry name="clear" parent="Dc">
<documentation><![CDATA[<div class="description"> Erase the screen using the background color by calling clear().<br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="drawCircle" parent="Dc">
<param id="x"/>
<param id="y"/>
<param id="radius"/>
<documentation><![CDATA[<div class="description"> Use drawCircle() to draw a circle around a point.<br/> <div class="param"> [Number] x X location of circle center</div><br/> <div class="param"> [Number] y Y location of circle center</div><br/> <div class="param"> [Number] radius Radius of circle</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="drawEllipse" parent="Dc">
<param id="x"/>
<param id="y"/>
<param id="a"/>
<param id="b"/>
<documentation><![CDATA[<div class="description"> Use drawEllispe() to draw an ellipse around a point.<br/> <div class="param"> [Number] x X location of ellipse center</div><br/> <div class="param"> [Number] y Y location of ellipse center</div><br/> <div class="param"> [Number] a The radius of the ellipse along the x axis</div><br/> <div class="param"> [Number] b The radius of the ellipse along the y axis</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="drawPoint" parent="Dc">
<param id="x"/>
<param id="y"/>
<documentation><![CDATA[<div class="description"> Draw a point on the screen with drawPoint().<br/> <div class="param"> [Number] x X location of point</div><br/> <div class="param"> [Number] y Y location of point</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="drawRectangle" parent="Dc">
<param id="x"/>
<param id="y"/>
<param id="width"/>
<param id="height"/>
<documentation><![CDATA[<div class="description"> Draw a rectangle with drawRectangle().<br/> <div class="param"> [Number] x X location of upper corner</div><br/> <div class="param"> [Number] y Y location of upper corner</div><br/> <div class="param"> [Number] width Width value of rectangle</div><br/> <div class="param"> [Number] height Height value of rectangle</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="drawRoundedRectangle" parent="Dc">
<param id="x"/>
<param id="y"/>
<param id="width"/>
<param id="height"/>
<param id="radius"/>
<documentation><![CDATA[<div class="description"> Draw a rounded rectangle with drawRoundedRectangle().<br/> <div class="param"> [Number] x X location of upper corner</div><br/> <div class="param"> [Number] y Y location of upper corner</div><br/> <div class="param"> [Number] width Width value of rectangle</div><br/> <div class="param"> [Number] height Height value of rectangle</div><br/> <div class="param"> [Number] radius Radius of rounding.</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="drawBitmap" parent="Dc">
<param id="x"/>
<param id="y"/>
<param id="rez"/>
<documentation><![CDATA[<div class="description"> Draw a bitmap to the screen with drawBitmap().<br/> <div class="param"> [Number] x Top left X coordinate to begin the draw</div><br/> <div class="param"> [Number] y Top left Y coordinate to begin the draw</div><br/> <div class="param"> [BitmapResource] rez The bitmap resource to draw</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="drawLine" parent="Dc">
<param id="x1"/>
<param id="y1"/>
<param id="x2"/>
<param id="y2"/>
<documentation><![CDATA[<div class="description"> Draw a line between two points using drawLine().<br/> <div class="param"> [Number] x1 First x coord</div><br/> <div class="param"> [Number] y1 First y coord</div><br/> <div class="param"> [Number] x2 Second x coord</div><br/> <div class="param"> [Number] y2 Second y coord</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="fillCircle" parent="Dc">
<param id="x"/>
<param id="y"/>
<param id="radius"/>
<documentation><![CDATA[<div class="description"> Fill a circle with the foreground color using fillCircle().<br/> <div class="param"> [Number] x X location of circle center</div><br/> <div class="param"> [Number] y Y location of circle center</div><br/> <div class="param"> [Number] radius Radius of circle</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="fillEllipse" parent="Dc">
<param id="x"/>
<param id="y"/>
<param id="a"/>
<param id="b"/>
<documentation><![CDATA[<div class="description"> Fill an ellipse with the foreground color using fillEllipse().<br/> <div class="param"> [Number] x X location of ellipse center</div><br/> <div class="param"> [Number] y Y location of ellipse center</div><br/> <div class="param"> [Number] a The radius of the ellipse along the x axis</div><br/> <div class="param"> [Number] b The radius of the ellipse along the y axis</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="fillPolygon" parent="Dc">
<param id="pts"/>
<documentation><![CDATA[<div class="description"> To fill a polygon, use fillPolygon().<br/> <div class="param"> [Array] pts Array of coordinates with a 64 point limit</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="fillRectangle" parent="Dc">
<param id="x"/>
<param id="y"/>
<param id="width"/>
<param id="height"/>
<documentation><![CDATA[<div class="description"> Fill a rectangle with the foreground color using fillRectangle().<br/> <div class="param"> [Number] x X location of upper corner</div><br/> <div class="param"> [Number] y Y location of upper corner</div><br/> <div class="param"> [Number] width Width value of rectangle</div><br/> <div class="param"> [Number] height Height value of rectangle</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="fillRoundedRectangle" parent="Dc">
<param id="x"/>
<param id="y"/>
<param id="width"/>
<param id="height"/>
<param id="radius"/>
<documentation><![CDATA[<div class="description"> Fill a rounded rectangle with the foreground color using fillRoundedRectangle().<br/> <div class="param"> [Number] x X location of upper corner</div><br/> <div class="param"> [Number] y Y location of upper corner</div><br/> <div class="param"> [Number] width Width value of rectangle</div><br/> <div class="param"> [Number] height Height value of rectangle</div><br/> <div class="param"> [Number] radius Radius of rounding</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="drawText" parent="Dc">
<param id="x"/>
<param id="y"/>
<param id="font"/>
<param id="text"/>
<param id="justification"/>
<documentation><![CDATA[<div class="description"> Draw text at the given location using drawText().<br/> <div class="param"> [Number] x X location of text</div><br/> <div class="param"> [Number] y Y location of text</div><br/> <div class="param"> [FontResource] font Font to use. This can be a custom font loaded from resources or a Graphics.FONT_* value.</div><br/> <div class="param"> [String] text String to render. This can be a string loaded from resources or a hard coded string.</div><br/> <div class="param"> justification One of the Graphics.TEXT_JUSTIFY_XXX constants</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getTextDimensions" parent="Dc">
<param id="text"/>
<param id="font"/>
<documentation><![CDATA[<div class="description"> Get the width and height of a string. This takes new lines into account when<br/> determining the height. The width is the maximum width for a given line of the string.<br/> If a string has two \n in it, the height would be for three lines and the width would be the<br/> width of the longest string.<br/> <div class="param"> [String] text Text to get width for</div><br/> <div class="param"> [FontResource] font Graphics.FONT_* constant or font resource of the text to be measured</div><br/> <div class="returns">Returns  [Array] [width, height] of string in pixels</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="setColor" parent="Dc">
<param id="foreground"/>
<param id="background"/>
<documentation><![CDATA[<div class="description"> Use setColor() to set the current foreground and background colors.<br/> <div class="param"> [Number] foreground Graphics.COLOR_* constant or 24-bit integer of the form 0xRRGGBB</div><br/> <div class="param"> [Number] background Graphics.COLOR_* constant or 24-bit integer of the form 0xRRGGBB</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="setPenWidth" parent="Dc">
<param id="width"/>
<documentation><![CDATA[<div class="description"> Use setPenWidth() to set the width of a line<br/> <div class="param"> [Number] width in pixels</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getWidth" parent="Dc">
<documentation><![CDATA[<div class="description"> Use getWidth() to get the width of the display.<br/> <div class="returns">Returns  [Number] Width of display</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getHeight" parent="Dc">
<documentation><![CDATA[<div class="description"> Use getHeight() to get the height of the display.<br/> <div class="returns">Returns  [Number] Height of display</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getTextWidthInPixels" parent="Dc">
<param id="text"/>
<param id="font"/>
<documentation><![CDATA[<div class="description"> Get the width of a string with getTextWidthInPixels().<br/> <div class="param"> [String] text Text to get width for</div><br/> <div class="param"> [FontResource] font Graphics.FONT_* constant or font resource of the text to be measured</div><br/> <div class="returns">Returns  [Number] Width of string in pixels</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getFontHeight" parent="Dc">
<param id="font"/>
<documentation><![CDATA[<div class="description"> Get The Font Height by using getFontHeight().<br/> <div class="param"> [FontResource] font The font to measure</div><br/> <div class="returns">Returns  [Number] The height of the font</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="drawArc" parent="Dc">
<param id="x"/>
<param id="y"/>
<param id="r"/>
<param id="attr"/>
<param id="degreeStart"/>
<param id="degreeEnd"/>
<documentation><![CDATA[<div class="description"> Use drawArc() to draw an arc.<br/> 0 degree: 3 o'clock position.<br/> 90 degrees: 12 o'clock position.<br/> 180 degrees: 9 o'clock position.<br/> 270 degrees: 6 o'clock position.<br/> <div class="param"> [Number] x X location of arc center</div><br/> <div class="param"> [Number] y Y location of arc center</div><br/> <div class="param"> [Number] r radius of arc.</div><br/> <div class="param"> [Number] attr Arc drawing attributes. (ARC_COUNTER_CLOCKWISE or ARC_CLOCKWISE)</div><br/> <div class="param"> [Number] degreeStart The start angle of the arc by degrees.</div><br/> <div class="param"> [Number] degreeEnd The end angle of the arc by degrees.</div><br/> @since 1.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toString" parent="Object">
<documentation><![CDATA[<div class="description"> Use toString to convert an Object to a String.<br/> <div class="returns">Returns  [String] The String representation of the object</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="method" parent="Object">
<param id="symbol"/>
<documentation><![CDATA[<div class="description"> To retrieve the callback to the given method, use method(). This takes<br/> a Symbol and returns the associated Method object.<br/> <div class="param"> [Symbol] symbol Symbol of the method requested</div><br/> <div class="returns">Returns  [Method] Method object associated with the given method symbol</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="hashCode" parent="Object">
<documentation><![CDATA[<div class="description"> Use hashCode() to return a hash code value for the object.<br/> <div class="returns">Returns  [Number] Hash code for the object</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="equals" parent="Object">
<param id="that"/>
<documentation><![CDATA[<div class="description"> Test if this instance is equal to another instance of an object by using equals().<br/> <div class="param"> that That item to test against</div><br/> <div class="returns">Returns  [Boolean] true if objects are equal, false otherwise.</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="weak" parent="Object">
<documentation><![CDATA[<div class="description"> Get a weak reference to the object.<br/> <div class="returns">Returns  [WeakReference] Immutable types (Number, Float, Long, Double, Boolean, String) will return their values</div><br/>   Other object types will return a WeakReference object<br/> @since 1.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="abs" parent="Number">
<documentation><![CDATA[<div class="description"> Use abs() to get the Absolute value of the Number.<br/> <div class="returns">Returns  [Number] Absolute value of the Number</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toNumber" parent="Number">
<documentation><![CDATA[<div class="description"> Convert to a Number with toNumber().<br/> <div class="returns">Returns  [Number] A Number object</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toFloat" parent="Number">
<documentation><![CDATA[<div class="description"> Convert the Number to a Float with toFloat().<br/> <div class="returns">Returns  [Float] A Float object</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toLong" parent="Number">
<documentation><![CDATA[<div class="description"> Convert the Number to a Long with toLong().<br/> <div class="returns">Returns  [Long] A Long object</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toDouble" parent="Number">
<documentation><![CDATA[<div class="description"> Convert the Number to a Double with toDouble().<br/> <div class="returns">Returns  [Double] A Double object</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="format" parent="Number">
<param id="format"/>
<documentation><![CDATA[<div class="description"> Use format() to format the Number using the given formatting String.<br/> The format string is similar to the format string that can be<br/> passed in to printf in c stdio (the [length] option is not available):<br/>    "%[flags][width][.precision]specifier"<br/> The supported specifiers are: d, i, u, o, x, X, f, e, E.<br/> [flags] supports only + and 0<br/> [width] supports only numbers (* is not supported)<br/> [.precision] supports only numbers (* is not supported)<br/><br/> <div class="returns">Returns  [String] A formatted String</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toChar" parent="Number">
<documentation><![CDATA[<div class="description"> Convert the Number to a Char with toChar().<br/> <div class="returns">Returns  [Char] A Char object</div><br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="Long">
<documentation/>
</functionEntry>
<functionEntry name="abs" parent="Long">
<documentation><![CDATA[<div class="description"> Use abs() to get the Absolute value of the Long.<br/> <div class="returns">Returns  [Long] Absolute value of the Long</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toLong" parent="Long">
<documentation><![CDATA[<div class="description"> Convert to a Long with toLong().<br/> <div class="returns">Returns  [Long] A Long object</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toNumber" parent="Long">
<documentation><![CDATA[<div class="description"> Convert the Long to a Number with toNumber().<br/> <div class="returns">Returns  [Number] A Number object</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toFloat" parent="Long">
<documentation><![CDATA[<div class="description"> Convert the Long to a Float with toFloat().<br/> <div class="returns">Returns  [Float] A Float object</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toDouble" parent="Long">
<documentation><![CDATA[<div class="description"> Convert the Long to a Double with toDouble().<br/> <div class="returns">Returns  [Double] A Double object</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="format" parent="Long">
<param id="format"/>
<documentation><![CDATA[<div class="description"> Use format() to format the Long using the given formatting String.<br/> The format string is similar to the format string that can be<br/> passed in to printf in c stdio (the [length] option is not available):<br/>    "%[flags][width][.precision]specifier"<br/> The supported specifiers are: d, i, u, o, x, X, f, e, E.<br/> [flags] supports only + and 0<br/> [width] supports only numbers (* is not supported)<br/> [.precision] supports only numbers (* is not supported)<br/><br/> <div class="returns">Returns  [String] A formatted String</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toString" parent="Long">
<documentation><![CDATA[<div class="description"> Convert a Long to a String with toString().<br/> <div class="returns">Returns  [String] The String representation of the Long</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="equals" parent="Long">
<param id="that"/>
<documentation><![CDATA[<div class="description"> Test if this instance is equal to another instance of an Object with equals().<br/> <div class="param"> that That item to test against</div><br/> <div class="returns">Returns  [Boolean] true if the objects are equal, false otherwise</div><br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toFloat" parent="Float">
<documentation><![CDATA[<div class="description"> Convert to a Float with toFloat().<br/> <div class="returns">Returns  [Float] A Float object</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="abs" parent="Float">
<documentation><![CDATA[<div class="description"> Use abs() to get the Absolute value of the Float.<br/> <div class="returns">Returns  [Float] Absolute value of the Float</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toNumber" parent="Float">
<documentation><![CDATA[<div class="description"> Convert the Float to a Number with toNumber().<br/> Since the number is a float the value will be rounded<br/> toward 0. For example, 6.8 becomes 6 and -5.7 becomes -5.<br/> <div class="returns">Returns  [Number] A Number object</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toDouble" parent="Float">
<documentation><![CDATA[<div class="description"> Convert the Float to a Double with toDouble().<br/> <div class="returns">Returns  [Double] A Double object</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toLong" parent="Float">
<documentation><![CDATA[<div class="description"> Convert the Float to a Long with toLong().<br/> <div class="returns">Returns  [Long] A Long object</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="format" parent="Float">
<param id="format"/>
<documentation><![CDATA[<div class="description"> Use format() to format the Float using the given formatting String.<br/> The format string is similar to the format string that can be<br/> passed in to printf in c stdio (the [length] option is not available):<br/>    "%[flags][width][.precision]specifier"<br/> The supported specifiers are: d, i, u, o, x, X, f, e, E.<br/> [flags] supports only + and 0<br/> [width] supports only numbers (* is not supported)<br/> [.precision] supports only numbers (* is not supported)<br/><br/> <div class="returns">Returns  [String] A formatted String</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="Double">
<documentation/>
</functionEntry>
<functionEntry name="abs" parent="Double">
<documentation><![CDATA[<div class="description"> Use abs() to get the Absolute value of the Double.<br/> <div class="returns">Returns  [Double] Absolute value of the Double</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toDouble" parent="Double">
<documentation><![CDATA[<div class="description"> Convert to a Double with toDouble().<br/> <div class="returns">Returns  [Double] A Double object</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toNumber" parent="Double">
<documentation><![CDATA[<div class="description"> Convert the Double to a Number with toNumber().<br/> Since the number is a double the value will be rounded<br/> toward 0. For example, 6.8 becomes 6 and -5.7 becomes -5.<br/> <div class="returns">Returns  [Number] A Number object</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toFloat" parent="Double">
<documentation><![CDATA[<div class="description"> Convert the Double to a Float with toFloat().<br/> <div class="returns">Returns  [Float] A Float object</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toLong" parent="Double">
<documentation><![CDATA[<div class="description"> Convert the Double to a Long with toLong().<br/> <div class="returns">Returns  [Long] A Long object</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="format" parent="Double">
<param id="format"/>
<documentation><![CDATA[<div class="description"> Use format() to format the Double using the given formatting String.<br/> The format string is similar to the format string that can be<br/> passed in to printf in c stdio (the [length] option is not available):<br/>    "%[flags][width][.precision]specifier"<br/> The supported specifiers are: d, i, u, o, x, X, f, e, E.<br/> [flags] supports only + and 0<br/> [width] supports only numbers (* is not supported)<br/> [.precision] supports only numbers (* is not supported)<br/><br/> <div class="returns">Returns  [String] A formatted String</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toString" parent="Double">
<documentation><![CDATA[<div class="description"> Convert a Double to a String with toString().<br/> <div class="returns">Returns  [String] The String representation of the object</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="equals" parent="Double">
<param id="that"/>
<documentation><![CDATA[<div class="description"> Test if this instance is equal to another instance of an Object with equals().<br/> <div class="param"> that That item to test against</div><br/> <div class="returns">Returns  [Boolean] true if the objects are equal, false otherwise</div><br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toNumber" parent="String">
<documentation><![CDATA[<div class="description"> If a string is in a base 10 numeric form, e.g., "123" or "08", convert it to a Number object with toNumber().<br/> <div class="returns">Returns  [Number] A Number object, or error</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toNumberWithBase" parent="String">
<param id="base"/>
<documentation><![CDATA[<div class="description"> Convert a string to a number using the specified base.<br/> <div class="param"> base The base of the input string. If the value of base is zero,</div><br/>             the syntax expected is similar to that of integer constants,<br/>             which includes: An optional sign character (+ or -), An optional,<br/>             prefix for octal or hexadecimal ("0" or "0x"), and a sequence of<br/>             digits in the prefixed base, or decimal if none was specified.<br/>             If the base value is between 2 and 36, the format expected for<br/>             the number is valid digits and/or letters that represent integers<br/>             of the specified radix (from '0' to 'z'/'Z' for radix 36).<br/>             The sequence may be optionally prefixed with "0x" if base is 16.<br/> <div class="returns">Returns  [Number] A Number object</div><br/> @since 1.4.1<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toFloat" parent="String">
<documentation><![CDATA[<div class="description"> If a string is in the numeric form of "123" or "123.45", convert it to a Float object with toFloat().<br/> <div class="returns">Returns  [Float] A Float object, or error</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="hashCode" parent="String">
<documentation><![CDATA[<div class="description"> Use hasCode() to get a hash code value for the String.<br/> <div class="returns">Returns  [Number] Hash code for the String</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="length" parent="String">
<documentation><![CDATA[<div class="description"> Use length() to get the number of characters in the String<br/> <div class="returns">Returns  [Number] The length of the String</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="equals" parent="String">
<param id="that"/>
<documentation><![CDATA[<div class="description"> Test if this instance is equal to another instance of an Object with equals().<br/> <div class="param"> that That item to test against</div><br/> <div class="returns">Returns  [Boolean] true if the objects are equal, false otherwise</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="find" parent="String">
<param id="string"/>
<documentation><![CDATA[<div class="description"> Use find() to determine if the passed String exists in this String.<br/> <div class="param"> [String] string String to find</div><br/> <div class="returns">Returns  [Number] index Index of the start of string or null if not found</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="substring" parent="String">
<param id="startIndex"/>
<param id="endIndex"/>
<documentation><![CDATA[<div class="description"> Use subString() to create a new String that contains the contents of the current string from start position to end position, exclusive.<br/> <div class="param"> [Number] startIndex Zero based start index of the substring</div><br/> <div class="param"> [Number] endIndex End position of the substring, exclusive</div><br/> <div class="returns">Returns  [String] The substring of String or null on error</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toLower" parent="String">
<documentation><![CDATA[<div class="description"> Convert the String to lower case with toLower().<br/> <div class="returns">Returns  [String] A new lower case String</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toUpper" parent="String">
<documentation><![CDATA[<div class="description"> Convert the String to upper case with toUpper().<br/> <div class="returns">Returns  [String] A new upper case String</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toString" parent="String">
<documentation><![CDATA[<div class="description"> Convert to a String with toString().<br/> <div class="returns">Returns  String representation of String</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toCharArray" parent="String">
<documentation><![CDATA[<div class="description"> Convert the String to an Array of Chars.<br/> <div class="returns">Returns  [Array] A Char Array representation of the String, where each character in the String is an element in the Array</div><br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toUtf8Array" parent="String">
<documentation><![CDATA[<div class="description"> Convert the String to an Array of bytes.<br/> <div class="returns">Returns  [Array] An Array representation of the String, where each byte in the string is an element in the Array</div><br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toNumber" parent="Char">
<documentation><![CDATA[<div class="description"> Convert the Char to a Number with toNumber().<br/> <div class="returns">Returns  [Number] The sequence of bits of a Char interpreted as a Number</div><br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toString" parent="Char">
<documentation><![CDATA[<div class="description"> Use toString to convert an Char to a String.<br/> <div class="returns">Returns  [String] The String representation of the Char</div><br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toLower" parent="Char">
<documentation><![CDATA[<div class="description"> Convert the Char to lowercase with toLower().<br/> <div class="returns">Returns  [Char] A new lowercase Char</div><br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toUpper" parent="Char">
<documentation><![CDATA[<div class="description"> Convert the Char to uppercase with toUpper().<br/> <div class="returns">Returns  [Char] A new uppercase Char</div><br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="format" parent="Lang">
<param id="format"/>
<param id="params"/>
<documentation><![CDATA[<div class="description"> Use format() to create a formatted String by substituting the given parameters into the given format at the corresponding locations.<br/><br/> The given format:<br/>     "Your next meeting is at $1$:$2$ on $3$ $4$ in room $5$."<br/> Paired with the given parameters:<br/>     [2, 30, "Sep", 4, "6820"]<br/> Would result in the String:<br/>     "Your next meeting is at 2:30 on Sep 4 in room 6820."<br/><br/> <div class="param"> [String] format A string using $1$, $2$, $3$... as substitution identifiers</div><br/> <div class="param"> params [Array] Array of content to substitute in</div><br/> <div class="returns">Returns  [String] A new String with the substituted content</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toString" parent="Symbol">
<documentation><![CDATA[<div class="description"> Convert a Symbol to a String with toString().<br/> <div class="returns">Returns  [String] The String representation of the Symbol</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="add" parent="Array">
<param id="object"/>
<documentation><![CDATA[<div class="description"> Use add() to add an object to the end of an array. The array size is<br/> increased by one and the parameter passed to add is inserted at the new index.<br/> <div class="param"> object [Object] The object to be added to the end of the array</div><br/> <div class="returns">Returns  [Array] self</div><br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="addAll" parent="Array">
<param id="array"/>
<documentation><![CDATA[<div class="description"> Use addAll() to add an array of objects to the end of an array. The array is<br/> expanded by the size of the provided array, and all of the elements are added<br/> to the end of the array<br/> <div class="param"> array [Array] The array of objects to be added to the end of the array</div><br/> <div class="returns">Returns  [Array] self</div><br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="indexOf" parent="Array">
<param id="object"/>
<documentation><![CDATA[<div class="description"> Use indexOf to get the index of an object within the array.<br/> <div class="param"> object [Object] The object to find the index of in the array</div><br/> <div class="returns">Returns  [Number] the index of the provided object in the array. If the object</div><br/>                  is not found -1 is returned.<br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="remove" parent="Array">
<param id="object"/>
<documentation><![CDATA[<div class="description"> Use remove() to remove an object from an array. If the passed object is found,<br/> the array size is decreased by one and elements beyond it are shifted to<br/> the next lower index. If the array has multiple matches, the match at the<br/> lowest index will be removed<br/> <div class="param"> object [Object] The object to be removed from the array</div><br/> <div class="returns">Returns  [Boolean] false if no instances of the object are found, otherwise true</div><br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="removeAll" parent="Array">
<param id="object"/>
<documentation><![CDATA[<div class="description"> Use removeAll() to add an object from an array. For each instance of the<br/> passed object that is found, the array size is decreased by one and elements<br/> beyond it are shifted to the next lower index. If the array has multiple<br/> matches, the match at the lowest index will be removed<br/> <div class="param"> object [Object] The object to remove all instances of from the array</div><br/> <div class="returns">Returns  [Boolean] false if no instances of the object are found, otherwise true</div><br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="reverse" parent="Array">
<documentation><![CDATA[<div class="description"> reverse() will return a new array that contains the elements of the<br/> source array in reverse order.<br/> <div class="returns">Returns  [Array] A new array with elements in reversed order</div><br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="size" parent="Array">
<documentation><![CDATA[<div class="description"> Use size() to get the size of the Array.<br/> <div class="returns">Returns  [Number] The number of elements in Array</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="slice" parent="Array">
<param id="startIndex"/>
<param id="endIndex"/>
<documentation><![CDATA[<div class="description"> slice() returns a new array with a copy of the specifed elements<br/> <div class="param"> startIndex [Number] A zero-based index to the start of the new array. If a negative</div><br/>                            index is provided, it will offset from the end of the array.<br/>                            (-2 will start at the second to last element.) If startIndex<br/>                            is null, the slice will begin at 0. An out of bounds index will<br/>                            be truncated to the array limits.<br/> <div class="param"> endIndex [Number] A zero-based index to the end of the new array. Items are</div><br/>                          included up to, but not including endIndex. If a negative<br/>                          index is provided, it will offset from the end of the array.<br/>                          (-1 will end at the last element.) If endIndex is null, the<br/>                          the slice will end at the last element. An out of bounds index<br/>                          will be truncated to the array limits.<br/> <div class="returns">Returns  [Array] A new array containing the elements from startIndex to endIndex</div><br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toString" parent="Array">
<documentation><![CDATA[<div class="description"> Convert the array to a String representation with toString().<br/> Each elements' toString() method will be invoked.<br/> <div class="returns">Returns  [String] The String representation of the Array</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="Method">
<param id="aClass"/>
<param id="aMethod"/>
<documentation><![CDATA[<div class="description"> Constructor<br/> <div class="param"> aClass Classdef of method</div><br/> <div class="param"> [Symbol] aMethod Symbol of class object</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="invoke" parent="Method">
<documentation><![CDATA[<div class="description"> Invoke the method with invoke().<br/> <div class="param"> ... parameters</div><br/> <div class="returns">Returns  [Object] The return value from callback</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="hashCode" parent="Method">
<documentation><![CDATA[<div class="description"> Use hashCode() to get a hash code value for the Method.<br/> <div class="returns">Returns  [Number] Hash code for the Method</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="put" parent="Dictionary">
<param id="key"/>
<param id="value"/>
<documentation><![CDATA[<div class="description"> Use put() to place a value in the hash table with the given key.<br/> <div class="param"> key Key of the hash map</div><br/> <div class="param"> value Value to put in the hash map</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="get" parent="Dictionary">
<param id="key"/>
<documentation><![CDATA[<div class="description"> Use get() to retrieve a value for a given key.<br/> <div class="param"> key to retrieve</div><br/> <div class="returns">Returns  [Object] Value for key, or null if does not exist</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="hasKey" parent="Dictionary">
<param id="key"/>
<documentation><![CDATA[<div class="description"> Check if the given key exists with hasKey().<br/> <div class="param"> key Key to check for</div><br/> <div class="returns">Returns  [Boolean] true if key exists, false otherwise</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="remove" parent="Dictionary">
<param id="key"/>
<documentation><![CDATA[<div class="description"> Use remove() to delete an item from the hash table.<br/> <div class="param"> key to remove</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="size" parent="Dictionary">
<documentation><![CDATA[<div class="description"> Use size() to retrieve the number of elements in the Dictionary.<br/> <div class="returns">Returns  [Number] The number of elements in Dictionary</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="isEmpty" parent="Dictionary">
<documentation><![CDATA[<div class="description"> Use isEmpty() to determine it the Dictionary is empty.<br/> <div class="returns">Returns  [Boolean] true if empty, false otherwise</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="keys" parent="Dictionary">
<documentation><![CDATA[<div class="description"> Use keys() to retrieve the keys in the Dictionary.<br/> <div class="returns">Returns  [Array] Array of keys in the Dictionary</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="values" parent="Dictionary">
<documentation><![CDATA[<div class="description"> Use value() to retrieve the values in the Dictionary.<br/> <div class="returns">Returns  [Array] Array of values in the Dictionary</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toString" parent="Dictionary">
<documentation><![CDATA[<div class="description"> Convert to a String with toString().<br/> <div class="returns">Returns  String representation of dictionary</div><br/> @since 1.0.1<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="Exception">
<documentation><![CDATA[<div class="description"> Constructor. Sets up the callstack for printStackTrace().<br/> Must be called by classes that extend Exception.<br/> @since 1.1.2<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="printStackTrace" parent="Exception">
<documentation><![CDATA[<div class="description"> Print the stack trace of the thrown exception<br/> @since 1.1.2<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getErrorMessage" parent="Exception">
<documentation><![CDATA[<div class="description"> Get the error message for the exception<br/> <div class="returns">Returns  [String] The error message, or null if no message is given</div><br/> @since 1.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="UnexpectedTypeException">
<param id="expected"/>
<param id="given"/>
<param id="classString"/>
<documentation><![CDATA[<div class="description"> Constructor<br/> @since 1.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="SymbolNotAllowedException">
<param id="msg"/>
<documentation><![CDATA[<div class="description"> Constructor<br/> @since 2.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="stillAlive" parent="WeakReference">
<documentation><![CDATA[<div class="description"> Return if the reference is still alive.<br/> <div class="returns">Returns  [Boolean] true if object is still alive, false otherwise.</div><br/>    When you are dead I will be STILL ALIVE<br/>    I feel fantastic and I am STILL ALIVE<br/> @since 1.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="get" parent="WeakReference">
<documentation><![CDATA[<div class="description"> Get the object referenced.<br/> <div class="returns">Returns  [Object] Object referenced, or null if object is no longer live.</div><br/> @since 1.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="acos" parent="Math">
<param id="x"/>
<documentation><![CDATA[<div class="description"> Use acos() to get the arc cosine of a cosine.<br/> <div class="param"> [Float] x The cosine value</div><br/> <div class="returns">Returns  [Float] 0..PI in radians, or NaN if invalid</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="asin" parent="Math">
<param id="x"/>
<documentation><![CDATA[<div class="description"> Use asin() to get the arc sine of a sine.<br/> <div class="param"> [Float] x The sine value</div><br/> <div class="returns">Returns  [Float] -PI/2..PI/2 in radians, or NaN if invalid</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="atan" parent="Math">
<param id="x"/>
<documentation><![CDATA[<div class="description"> Use atan() to get the arc tangent of a tangent.<br/> <div class="param"> [Float] x The tangent value</div><br/> <div class="returns">Returns  [Float] -PI/2..PI/2 in radians, or NaN if invalid</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="atan2" parent="Math">
<param id="y"/>
<param id="x"/>
<documentation><![CDATA[<div class="description"> Use atan2() to get the arc tangent of y/x in radians.<br/> <div class="param"> [Float] y The proportion of the y coordinate</div><br/> <div class="param"> [Float] x The proportion of the x coordinate</div><br/> <div class="returns">Returns  [Float] The principal arc tangent of y/x, in the interval [-PI..PI] radians., or NaN if invalid</div><br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="ceil" parent="Math">
<param id="x"/>
<documentation><![CDATA[<div class="description"> Use ceil() to compute the ceiling of a value.<br/> <div class="param"> [Float] x A floating point value</div><br/> <div class="returns">Returns  [Float] The smallest integer greater than or equal to x</div><br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="cos" parent="Math">
<param id="x"/>
<documentation><![CDATA[<div class="description"> Use cos() to get the cosine of an angle.<br/> <div class="param"> [Float] x The angle in radians</div><br/> <div class="returns">Returns  [Float] Cosine value</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="floor" parent="Math">
<param id="x"/>
<documentation><![CDATA[<div class="description"> Use floor() to compute the floor of a value.<br/> <div class="param"> [Float] x A floating point value</div><br/> <div class="returns">Returns  [Float] The largest integer less or equal than x</div><br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="log" parent="Math">
<param id="x"/>
<param id="base"/>
<documentation><![CDATA[<div class="description"> Use log() to get logarithmic value of a value.<br/> <div class="param"> [Float] x The value for which to get logarithm</div><br/> <div class="param"> [Float] base Optional base value (E is assumed)</div><br/> <div class="returns">Returns  [Float] Logarithm of x</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="pow" parent="Math">
<param id="x"/>
<param id="y"/>
<documentation><![CDATA[<div class="description"> Use pow() to calculate x to the power of y.<br/> <div class="param"> [Float] x Base</div><br/> <div class="param"> [Float] y Exponent</div><br/> <div class="returns">Returns  [Float] x to the power of y</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="rand" parent="Math">
<documentation><![CDATA[<div class="description"> Use rand() to get a random number.<br/> <div class="returns">Returns  [Number] Non-negative random number</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="round" parent="Math">
<param id="x"/>
<documentation><![CDATA[<div class="description"> Use round() to round a value.<br/> <div class="param"> [Float] x A floating point value</div><br/> <div class="returns">Returns  [Float] The closest integer to x, with ties rounding up.</div><br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="sin" parent="Math">
<param id="x"/>
<documentation><![CDATA[<div class="description"> Use sin() to get the sine of an angle.<br/> <div class="param"> [Float] x The angle in radians</div><br/> <div class="returns">Returns  [Float] Sine of X</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="sqrt" parent="Math">
<param id="x"/>
<documentation><![CDATA[<div class="description"> Use sqrt() to calculate the square root of a value.<br/> <div class="param"> [Float] x The value for which to get the square root</div><br/> <div class="returns">Returns  [Float] Square root of X, or NaN if invalid</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="srand" parent="Math">
<param id="seed"/>
<documentation><![CDATA[<div class="description"> Use srand() to seed the random number generator.<br/> <div class="param"> [Number] seed The value used for seeding rand()</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="tan" parent="Math">
<param id="x"/>
<documentation><![CDATA[<div class="description"> Use tan() to get the tangent of an angle.<br/> <div class="param"> [Float] x The angle in radians</div><br/> <div class="returns">Returns  [Float] Tangent value of x</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toDegrees" parent="Math">
<param id="x"/>
<documentation><![CDATA[<div class="description"> Use toDegrees() to convert an angle from radians to degrees.<br/> <div class="param"> [Float] x The angle in radians</div><br/> <div class="returns">Returns  [Float] The angle of x in degrees</div><br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toRadians" parent="Math">
<param id="x"/>
<documentation><![CDATA[<div class="description"> Use toRadians() to convert an angle from degrees to radians.<br/> <div class="param"> [Float] x The angle in degrees</div><br/> <div class="returns">Returns  [Float] The angle of x in radians</div><br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="next" parent="Iterator">
<documentation><![CDATA[<div class="description"> Get the next item in the list<br/> @since 2.2.0<br/> <div class="returns">Returns  [Object] The next item, or null if end of list</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getCourses" parent="PersistedContent">
<documentation><![CDATA[<div class="description"> Get the courses installed on the system<br/> @since 2.2.0<br/> <div class="returns">Returns  [Iterator] Iterator of courses</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getRoutes" parent="PersistedContent">
<documentation><![CDATA[<div class="description"> Get the routes installed on the system<br/> @since 2.2.0<br/> <div class="returns">Returns  [Iterator] Iterator of Routes</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getTracks" parent="PersistedContent">
<documentation><![CDATA[<div class="description"> Get the tracks installed on the system<br/> @since 2.2.0<br/> <div class="returns">Returns  [Iterator] Iterator of Tracks</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getWaypoints" parent="PersistedContent">
<documentation><![CDATA[<div class="description"> Get the waypoints installed on the system<br/> @since 2.2.0<br/> <div class="returns">Returns  [Iterator] Iterator of waypoints from the routes list</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getWorkouts" parent="PersistedContent">
<documentation><![CDATA[<div class="description"> Get the workouts installed on the system<br/> @since 2.2.0<br/> <div class="returns">Returns  [Iterator] Iterator of Workouts</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="saveWaypoint" parent="PersistedContent">
<param id="location"/>
<param id="options"/>
<documentation><![CDATA[<div class="description"> Save a waypoint (location) to the device's location list<br/> <div class="param"> location [Location] Location object to persist</div><br/> <div class="param"> options [Dictionary] Dictionary of options, or null to accept defaults</div><br/> @option :name [String] Name to assign to the waypoint. If not specified will be auto-named.<br/> @since 2.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getName" parent="Course">
<documentation><![CDATA[<div class="description"> Gets a readable name for the content<br/> @since 2.2.0<br/> <div class="returns">Returns  [String] Readable name</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getId" parent="Course">
<documentation><![CDATA[<div class="description"> Gets a unique serializable id<br/> @since 2.2.0<br/> <div class="returns">Returns  [Number] Unique serializable id</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toIntent" parent="Course">
<documentation><![CDATA[<div class="description"> Gets a system intent for the content<br/> @since 2.2.0<br/> <div class="returns">Returns  [Intent] System intent for the content</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getName" parent="Route">
<documentation><![CDATA[<div class="description"> Gets a readable name for the content<br/> @since 2.2.0<br/> <div class="returns">Returns  [String] Readable name</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getId" parent="Route">
<documentation><![CDATA[<div class="description"> Gets a unique serializable id<br/> @since 2.2.0<br/> <div class="returns">Returns  [Number] Unique serializable id</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toIntent" parent="Route">
<documentation><![CDATA[<div class="description"> Gets a system intent for the content<br/> @since 2.2.0<br/> <div class="returns">Returns  [Intent] System intent for the content</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getName" parent="Track">
<documentation><![CDATA[<div class="description"> Gets a readable name for the content<br/> @since 2.2.0<br/> <div class="returns">Returns  [String] Readable name</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getId" parent="Track">
<documentation><![CDATA[<div class="description"> Gets a unique serializable id<br/> @since 2.2.0<br/> <div class="returns">Returns  [Number] Unique serializable id</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toIntent" parent="Track">
<documentation><![CDATA[<div class="description"> Gets a system intent for the content<br/> @since 2.2.0<br/> <div class="returns">Returns  [Intent] System intent for the content</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getName" parent="Waypoint">
<documentation><![CDATA[<div class="description"> Gets a readable name for the content<br/> @since 2.2.0<br/> <div class="returns">Returns  [String] Readable name</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getId" parent="Waypoint">
<documentation><![CDATA[<div class="description"> Gets a unique serializable id<br/> @since 2.2.0<br/> <div class="returns">Returns  [Number] Unique serializable id</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toIntent" parent="Waypoint">
<documentation><![CDATA[<div class="description"> Gets a system intent for the content<br/> @since 2.2.0<br/> <div class="returns">Returns  [Intent] System intent for the content</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getName" parent="Workout">
<documentation><![CDATA[<div class="description"> Gets a readable name for the content<br/> @since 2.2.0<br/> <div class="returns">Returns  [String] Readable name</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getId" parent="Workout">
<documentation><![CDATA[<div class="description"> Gets a unique serializable id<br/> @since 2.2.0<br/> <div class="returns">Returns  [Number] Unique serializable id</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toIntent" parent="Workout">
<documentation><![CDATA[<div class="description"> Gets a system intent for the content<br/> @since 2.2.0<br/> <div class="returns">Returns  [Intent] System intent for the content</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="persistLocation" parent="PersistedLocations">
<param id="location"/>
<param id="options"/>
<documentation><![CDATA[<div class="description"> Save a location (waypoint) to the device's location list<br/> <div class="param"> location [Location] Location object to persist</div><br/> <div class="param"> options [Dictionary] Dictionary of options, or null to accept defaults</div><br/> @option :name [String] Name to assign to the waypoint. If not specified will be auto-named.<br/> @deprecated This function will be dropped in Connect IQ 4.0.0. @see PersistedContent.saveWaypoint instead.<br/> @since 1.0.2<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="Location">
<param id="options"/>
<documentation><![CDATA[<div class="description"> Constructor: create a coordinate based off an options hash table<br/> <div class="param"> [Dictionary] options Hash table of options</div><br/> @option options [Number] :latitude The latitude<br/> @option options [Number] :longitude The longitude<br/> @option options [Symbol] :format The format of lat/long (possible values are :degrees, :radians, or :semicircles)<br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toDegrees" parent="Location">
<documentation><![CDATA[<div class="description"> Use toDegrees() to retrieve the coordinate back as an Array of degree values.<br/> <div class="returns">Returns  [Array] An Array of the latitude and the longitude in degree format</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toRadians" parent="Location">
<documentation><![CDATA[<div class="description"> Use toRadians() to retrieve the coordinate back as an Array of radian values.<br/> <div class="returns">Returns  [Array] An Array of the latitude and the longitude in radian format</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toGeoString" parent="Location">
<param id="format"/>
<documentation><![CDATA[<div class="description"> Use toGeoString() to get a String representation of the coordinate.<br/> <div class="param"> format Coordinate format to which coordinate should be converted (GEO constant)</div><br/> <div class="returns">Returns  [String] Formatted coordinate String</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="parse" parent="Position">
<param id="input"/>
<param id="format"/>
<documentation><![CDATA[<div class="description"> Use parse() to parse an input string and convert it into a Location.<br/> <div class="param"> [String] input String to parse</div><br/> <div class="param"> format Coordinate format to use for parsing (Position.GEO_XXX constant)</div><br/> <div class="returns">Returns  [Location] The Location object</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="enableLocationEvents" parent="Position">
<param id="type"/>
<param id="listener"/>
<documentation><![CDATA[<div class="description"> Request a location event with enableLocationEvents().<br/> <div class="param"> type LOCATION_ONE_SHOT for a single location request,</div><br/>      LOCATION_CONTINUOUS to enable location tracking, and<br/>      LOCATION_DISABLE to turn off location tracking<br/> <div class="param"> [Method] listener Method object to call with location updates;</div><br/>      receives a Position.Info as an argument<br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getInfo" parent="Position">
<documentation><![CDATA[<div class="description"> Use getInfo() to retrieve the current Location.Info.<br/> <div class="returns">Returns  [Location.Info] The Info object containing the current information</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="testInfoString" parent="Position">
<param id="info"/>
<documentation><![CDATA[<div class="description"> Turn Info into a string<br/> <div class="returns">Returns  [String] representation of Info</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="setEnabledSensors" parent="Sensor">
<param id="sensors"/>
<documentation><![CDATA[<div class="description"> Use setEnabledSensors() to request system sensors.<br/> This will also enable the system sensors if possible.<br/> <div class="param"> [Array] sensors Array of Sensor types to enable, or [] to disable all sensors</div><br/> <div class="returns">Returns  [Array] Array of requested sensors that were available</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="enableSensorEvents" parent="Sensor">
<param id="listener"/>
<documentation><![CDATA[<div class="description"> Use enableSensorEvents() to request a sensor event.<br/> This enables sensor events at 1Hz.<br/> <div class="param"> [Method] listener Method Object to call with sensor updates. Null for no listener</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getInfo" parent="Sensor">
<documentation><![CDATA[<div class="description"> Use getInfo() to retrieve the current Sensor.Info<br/> <div class="returns">Returns  [Sensor.Info] object with current information.</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="SensorHistoryIterator">
<documentation/>
</functionEntry>
<functionEntry name="next" parent="SensorHistoryIterator">
<documentation><![CDATA[<div class="description"> Get the next entry in the iterator. This must be called to get the initial<br/> data from the iterator.<br/> @since 2.1.0<br/> <div class="returns">Returns  [SensorHistorySample] returns the next SensorHistorySample,</div><br/>                               or null if there are no more samples<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getMax" parent="SensorHistoryIterator">
<documentation><![CDATA[<div class="description"> Get the maximium sensor sample contained in this iterator.<br/> @since 2.1.0<br/> <div class="returns">Returns  [Number] the maximum sample</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getMin" parent="SensorHistoryIterator">
<documentation><![CDATA[<div class="description"> Get the minimium sample contained in this iterator.<br/> @since 2.1.0<br/> <div class="returns">Returns  [Number] the minimum sample</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getNewestSampleTime" parent="SensorHistoryIterator">
<documentation><![CDATA[<div class="description"> Get the time of the newest sample in this iterator.<br/> @since 2.1.0<br/> <div class="returns">Returns  [Moment] the time of the newest sample</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getOldestSampleTime" parent="SensorHistoryIterator">
<documentation><![CDATA[<div class="description"> Get the time of the oldest sample in this iterator.<br/> @since 2.1.0<br/> <div class="returns">Returns  [Moment] the time of the oldest sample</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getHeartRateHistory" parent="SensorHistory">
<param id="options"/>
<documentation><![CDATA[<div class="description"> Retrieve the heart rate history for the given period, up to the last power cycle. This function always<br/> returns the most recent heart rate samples. The time between each SensorHistorySample in the iterator<br/> may be device dependent.<br/> @since 2.1.0<br/> <div class="param"> [Dictionary] options Dictionary of options. Can be null.</div><br/> @option options [Number]/[Duration] :period If period is not provided, the entire available history is<br/>                                             retrieved. If period is a Duration, then the history for the<br/>                                             given Duration is retrieved. If period is a Number, then the<br/>                                             last Number entries are retrieved.<br/> @option options [Boolean] :order If order is not provided, the samples will be newest first. Use the ORDER<br/>                                  enumeration to explicitly select "newest first" or "oldest first"<br/> <div class="returns">Returns  [SensorHistory.SensorHistoryIterator] an iterator for the heart rate history for the given period</div><br/>                                               Samples returned by this iterator are in beats per minute.<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getTemperatureHistory" parent="SensorHistory">
<param id="options"/>
<documentation><![CDATA[<div class="description"> Retrieve the temperature history for the given period, up to the last power cycle. This function always<br/> returns the most recent temperature samples. The time between each SensorHistorySample in the iterator<br/> may be device dependent.<br/> @since 2.1.0<br/> <div class="param"> [Dictionary] options Dictionary of options. Can be null.</div><br/> @option options [Number]/[Duration] :period If period is not provided, the entire available history is<br/>                                             retrieved. If period is a Duration, then the history for the<br/>                                             given Duration is retrieved. If period is a Number, then the<br/>                                             last Number entries are retrieved.<br/> @option options [Boolean] :order If order is not provided, the samples will be newest first. Use the ORDER<br/>                                  enumeration to explicitly select "newest first" or "oldest first"<br/> <div class="returns">Returns  [SensorHistory.SensorHistoryIterator] an iterator for the temperature history for the given period</div><br/>                                               Samples returned by this iterator are in degrees Celcius.<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getPressureHistory" parent="SensorHistory">
<param id="options"/>
<documentation><![CDATA[<div class="description"> Retrieve the pressure history for the given period, up to the last power cycle. This function always<br/> returns the most recent pressure samples. The time between each SensorHistorySample in the iterator<br/> may be device dependent.<br/> @since 2.1.0<br/> <div class="param"> [Dictionary] options Dictionary of options. Can be null.</div><br/> @option options [Number]/[Duration] :period If period is not provided, the entire available history is<br/>                                             retrieved. If period is a Duration, then the history for the<br/>                                             given Duration is retrieved. If period is a Number, then the<br/>                                             last Number entries are retrieved.<br/> @option options [Boolean] :order If order is not provided, the samples will be newest first. Use the ORDER<br/>                                  enumeration to explicitly select "newest first" or "oldest first"<br/> <div class="returns">Returns  [SensorHistory.SensorHistoryIterator] an iterator for the pressure history for the given period</div><br/>                                               Samples returned by this iterator are in Pascals.<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getElevationHistory" parent="SensorHistory">
<param id="options"/>
<documentation><![CDATA[<div class="description"> Retrieve the elevation history for the given period, up to the last power cycle. This function always<br/> returns the most recent elevation samples. The time between each SensorHistorySample in the iterator<br/> may be device dependent.<br/> @since 2.1.0<br/> <div class="param"> [Dictionary] options Dictionary of options. Can be null.</div><br/> @option options [Number]/[Duration] :period If period is not provided, the entire available history is<br/>                                             retrieved. If period is a Duration, then the history for the<br/>                                             given Duration is retrieved. If period is a Number, then the<br/>                                             last Number entries are retrieved.<br/> @option options [Boolean] :order If order is not provided, the samples will be newest first. Use the ORDER<br/>                                  enumeration to explicitly select "newest first" or "oldest first"<br/> <div class="returns">Returns  [SensorHistory.SensorHistoryIterator] an iterator for the elevation history for the given period</div><br/>                                               Samples returned by this iterator are in meters.<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="charArrayToString" parent="StringUtil">
<param id="charArray"/>
<documentation><![CDATA[<div class="description"> Given an Array of Chars, return the String equivalent<br/> <div class="param"> [Array] charArray Array of Chars</div><br/> <div class="returns">Returns  [String] String representation of the input Array</div><br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="utf8ArrayToString" parent="StringUtil">
<param id="utf8Array"/>
<documentation><![CDATA[<div class="description"> Given an Array of UTF-8 bytes, return the String equivalent<br/> <div class="param"> [Array] utf8Array Array of UTF-8 bytes</div><br/> <div class="returns">Returns  [String] String representation of the input Array</div><br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="encodeBase64" parent="StringUtil">
<param id="string"/>
<documentation><![CDATA[<div class="description"> Encodes a string in base 64<br/> <div class="param"> [String] string The string to encode</div><br/> <div class="returns">Returns  [String] A base 64 encoded String</div><br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="Intent">
<param id="aURI"/>
<param id="aArgs"/>
<documentation><![CDATA[<div class="description"> Create an Intent<br/> <div class="param"> [String] aURI URI that specifies receiver of intent</div><br/> <div class="param"> [Dictionary] aArgs Parameters to pass to the target URI</div><br/> @since 2.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="println" parent="System">
<param id="a"/>
<documentation><![CDATA[<div class="description"> Use println() to print to the console with a line terminator.<br/> <div class="param"> a Object or string to display</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="print" parent="System">
<param id="x"/>
<documentation><![CDATA[<div class="description"> Use print() to print to the console<br/> <div class="param"> x Object or string to displays</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getTimer" parent="System">
<documentation><![CDATA[<div class="description"> Use getTimer() to get the current millisecond timer.<br/> <div class="returns">Returns  [Number] System millisecond timer</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getClockTime" parent="System">
<documentation><![CDATA[<div class="description"> Get the current clock time with getClockTime().<br/> <div class="returns">Returns  [System.ClockTime] Current clock time</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getDeviceSettings" parent="System">
<documentation><![CDATA[<div class="description"> Get the device settings with getDeviceSettings().<br/> <div class="returns">Returns  [DeviceSetting] The current device settings</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getSystemStats" parent="System">
<documentation><![CDATA[<div class="description"> Get the current system stats with getSystemStats().<br/> <div class="returns">Returns  [System.Stats] Current system stats</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="trap" parent="System">
<documentation><![CDATA[<div class="description"> In future versions of the SDK trap() will break<br/> into the debugger.<br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="exit" parent="System">
<documentation><![CDATA[<div class="description"> To end execution of the current system cleanly from any point in the app.<br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="error" parent="System">
<param id="msg"/>
<documentation><![CDATA[<div class="description"> Call error() to cause an error. This will exit the system.<br/> <div class="param"> [String] msg Error message to output</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="exitTo" parent="System">
<param id="content"/>
<documentation><![CDATA[<div class="description"> Exit the current app and launch a new app. This is an asynchronous request.<br/> If the user chooses to launch the Intent then the app will be shut down. Otherwise<br/> the app will continue to run. This can only be called by watch-apps and widgets.<br/> <div class="param"> [Intent] content The Intent to trigger</div><br/> @raise [UnexpectedAppTypeException] If the app requested is not a watch-app or widget<br/> @raise [AppNotInstalledException] If the application requested is not installed<br/> @raise [PreviousOperationNotCompleteException] If exitTo is called a second time before completing<br/> @since 2.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="UnexpectedAppTypeException">
<param id="msg"/>
<documentation><![CDATA[<div class="description"> Constructor<br/> @since 2.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="AppNotInstalledException">
<documentation><![CDATA[<div class="description"> Constructor<br/> @since 2.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="PreviousOperationNotCompleteException">
<param id="msg"/>
<documentation><![CDATA[<div class="description"> Constructor<br/> @since 2.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="debug" parent="Logger">
<param id="str"/>
<documentation><![CDATA[<div class="description"> Write a debug string to the output stream. The String is prefixed with [DEBUG] and time stamp<br/> <div class="param"> [String] str Output string</div><br/> @since 2.1.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="warning" parent="Logger">
<param id="str"/>
<documentation><![CDATA[<div class="description"> Write a warning string to the output stream. The String is prefixed with [WARNING] and time stamp<br/> <div class="param"> [String] str Output string</div><br/> @since 2.1.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="error" parent="Logger">
<param id="str"/>
<documentation><![CDATA[<div class="description"> Write an error string to the output stream. The String is prefixed with [ERROR] and time stam;<br/> <div class="param"> [String] str Error string</div><br/> @since 2.1.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="assert" parent="Test">
<param id="test"/>
<documentation><![CDATA[<div class="description"> Assert throws an exception if the test is false<br/> <div class="param"> [Boolean] test Expression to test for true</div><br/> @since 2.1.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="assertMessage" parent="Test">
<param id="test"/>
<param id="message"/>
<documentation><![CDATA[<div class="description"> Assert throws an exception if the test is false<br/> <div class="param"> [Boolean] test Expression to test for true</div><br/> <div class="param"> [String] message The identifying message for the assert</div><br/> @since 2.1.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="assertEqual" parent="Test">
<param id="value1"/>
<param id="value2"/>
<documentation><![CDATA[<div class="description"> Throws an exception if value1 and value2 are not equal. The objects<br/> passed to this function must implement the equals() method.<br/> <div class="param"> [Object] value1 Value to test for equality</div><br/> <div class="param"> [Object] value2 Value to test for equality</div><br/> @since 2.1.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="assertEqualMessage" parent="Test">
<param id="value1"/>
<param id="value2"/>
<param id="message"/>
<documentation><![CDATA[<div class="description"> Throws an exception if value1 and value2 are not equal. The objects<br/> passed to this function must implement the equals() method.<br/> <div class="param"> [Object] value1 Value to test for equality</div><br/> <div class="param"> [Object] value2 Value to test for equality</div><br/> <div class="param"> [String] message The identifying message for the assert</div><br/> @since 2.1.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="assertNotEqual" parent="Test">
<param id="value1"/>
<param id="value2"/>
<documentation><![CDATA[<div class="description"> Throws an exception if value1 and value2 are equal. The objects<br/> passed to this function must implement the equals() method.<br/> <div class="param"> [Object] value1 Value to test for equality</div><br/> <div class="param"> [Object] value2 Value to test for equality</div><br/> @since 2.1.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="assertNotEqualMessage" parent="Test">
<param id="value1"/>
<param id="value2"/>
<param id="message"/>
<documentation><![CDATA[<div class="description"> Throws an exception if value1 and value2 are equal. The objects<br/> passed to this function must implement the equals() method.<br/> <div class="param"> [Object] value1 Value to test for equality</div><br/> <div class="param"> [Object] value2 Value to test for equality</div><br/> <div class="param"> [String] message The identifying message for the assert</div><br/> @since 2.1.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="AssertException">
<param id="message"/>
<documentation/>
</functionEntry>
<functionEntry name="initialize" parent="Moment">
<param id="value"/>
<documentation><![CDATA[<div class="description"> @since 1.1.2<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="add" parent="Moment">
<param id="time"/>
<documentation><![CDATA[<div class="description"> Use add() to add a Duration to a Moment.<br/> <div class="param"> [Duration] time Duration delta to add to Moment</div><br/> <div class="returns">Returns  [Moment] The result of Moment + Duration</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="subtract" parent="Moment">
<param id="date"/>
<documentation><![CDATA[<div class="description"> Use subtract() to compute the delta between two Moments.<br/> <div class="param"> [Moment] date Moment object used to find delta</div><br/> <div class="returns">Returns  [Duration] Delta between date and the Moment object</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="compare" parent="Moment">
<param id="date"/>
<documentation><![CDATA[<div class="description"> Use compare() to determine if a Moment is before or after another Moment.<br/> <div class="param"> [Moment] date Moment object to compare to this Moment</div><br/> <div class="returns">Returns  [Number] Negative if this < that, positive if this > that, 0 if this == that</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="lessThan" parent="Moment">
<param id="date"/>
<documentation><![CDATA[<div class="description"> Use lessThan() to determine if a Moment is less than another Moment.<br/> <div class="param"> [Moment] date Moment object to compare to this Moment</div><br/> <div class="returns">Returns  [Boolean] true if this is less than that, false otherwise</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="greaterThan" parent="Moment">
<param id="date"/>
<documentation><![CDATA[<div class="description"> Use greaterThan() to determine if a Moment is greater than another Moment.<br/> <div class="param"> [Moment] date Moment object to compare to this Moment</div><br/> <div class="returns">Returns  [Boolean] true if this is greater than that, false otherwise</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="value" parent="Moment">
<documentation><![CDATA[<div class="description"> Get the UTC value of this date with value().<br/> <div class="returns">Returns  [Number] UTC date in seconds since UNIX epoch</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="Duration">
<param id="value"/>
<documentation><![CDATA[<div class="description"> Creates a Duration object.<br/> <div class="param"> [Number] value Number of seconds to initialize the Duration to</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="add" parent="Duration">
<param id="time"/>
<documentation><![CDATA[<div class="description"> Use add() to add a Moment or another Duration to a Duration.<br/> <div class="param"> time Duration or Moment to add to Duration</div><br/> <div class="returns">Returns  Duration + Moment = Moment, Duration + Duration = Duration</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="subtract" parent="Duration">
<param id="time"/>
<documentation><![CDATA[<div class="description"> Use subtract() to compute the delta between two Durations.<br/> <div class="param"> [Duration] time Duration object used to find delta</div><br/> <div class="returns">Returns  [Duration] Duration object of Duration - time</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="multiply" parent="Duration">
<param id="value"/>
<documentation><![CDATA[<div class="description"> Use multiply() to multiply a Duration by a value.<br/> <div class="param"> value Number or Float to multiply with Duration</div><br/> <div class="returns">Returns  [Duration] Result object of Duration * value</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="divide" parent="Duration">
<param id="value"/>
<documentation><![CDATA[<div class="description"> Use divide() to divide a Duration by a value.<br/> <div class="param"> value Number or Float to divide Duration</div><br/> <div class="returns">Returns  [Duration] Result object of Duration / value</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="compare" parent="Duration">
<param id="time"/>
<documentation><![CDATA[<div class="description"> Use compare() to determine if a Duration is shorter or longer than another Duration.<br/> <div class="param"> [Duration] time Duration to compare to this Duration</div><br/> <div class="returns">Returns  [Number] Negative if this < that, positive if this > that, 0 if this == that</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="lessThan" parent="Duration">
<param id="time"/>
<documentation><![CDATA[<div class="description"> Use lessThan() to determine if a Duration is shorter than another Duration.<br/> <div class="param"> [Duration] time Duration to compare to this Duration</div><br/> <div class="returns">Returns  [Boolean] true if this is less than that, false otherwise</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="greaterThan" parent="Duration">
<param id="time"/>
<documentation><![CDATA[<div class="description"> Use lessThan() to determine if a Duration is longer than another Duration.<br/> <div class="param"> [Duration] time Duration to compare to this Duration</div><br/> <div class="returns">Returns  [Boolean] true if this is greater than that, false otherwise</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="value" parent="Duration">
<documentation><![CDATA[<div class="description"> Get the Duration value with value().<br/> <div class="returns">Returns  [Number] Duration in seconds</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="now" parent="Time">
<documentation><![CDATA[<div class="description"> Use now() to get a Moment for the current moment in time.<br/> <div class="returns">Returns  [Moment] The current moment in time</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="today" parent="Time">
<documentation><![CDATA[<div class="description"> Use today() to get a Moment for the beginning of today based on your current GPS location.<br/> <div class="returns">Returns  [Moment] The beginning of today</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getMonthHash" parent="Gregorian">
<documentation/>
</functionEntry>
<functionEntry name="getDayHash" parent="Gregorian">
<documentation/>
</functionEntry>
<functionEntry name="moment" parent="Gregorian">
<param id="options"/>
<documentation><![CDATA[<div class="description"> Create a Moment object from a hash table of options with moment(). The Moment is<br/> created from the current time. For instance, if the current day is April 1 and you<br/> pass in a :day value of 1 the returned Moment's day will be April 2.<br/> <div class="param"> [Dictionary] options Hash table of options</div><br/> @option options [Number] :year The year<br/> @option options [Number] :month The month<br/> @option options [Number] :day The day<br/> @option options [Number] :hour The hour<br/> @option options [Number] :minute The minute<br/> @option options [Number] :second The second<br/> <div class="returns">Returns  [Moment] The Moment object created using the options</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="momentNative" parent="Gregorian">
<param id="year"/>
<param id="month"/>
<param id="day"/>
<param id="hour"/>
<param id="minute"/>
<param id="second"/>
<documentation><![CDATA[<div class="description"> Parameterized version of moment. Given all parameters as integers,<br/> return back a Moment object of the given date.<br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="duration" parent="Gregorian">
<param id="options"/>
<documentation><![CDATA[<div class="description"> Create a Duration object from a hash of options using duration().<br/> <div class="param"> [Dictionary] options Hash table of options</div><br/> @option options [Number] :years The number of years<br/> @option options [Number] :days The number of days<br/> @option options [Number] :hours The number of hours<br/> @option options [Number] :minutes The number of minutes<br/> @option options [Number] :seconds The number of seconds<br/> <div class="returns">Returns  [Duration] The Duration object created using the options</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="info" parent="Gregorian">
<param id="date"/>
<param id="format"/>
<documentation><![CDATA[<div class="description"> Use info() to retrieve a Gregorian.Info for a date converted to local time.<br/> <div class="param"> [Moment] date Moment object to get Info from</div><br/> <div class="param"> [Number] format Time FORMAT_XXX constant to use</div><br/> <div class="returns">Returns  [Info] For FORMAT_SHORT, all values in Info are integers. For FORMAT_MEDIUM and</div><br/>    FORMAT_LONG, the month/day fields have the strings for the date in question. The time<br/>    returned has been converted to local time.<br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="utcInfo" parent="Gregorian">
<param id="date"/>
<param id="format"/>
<documentation><![CDATA[<div class="description"> Use utcInfo() to retrieve a Gregorian.Info for a date converted to UTC.<br/> <div class="param"> [Moment] date Moment object to get Info from</div><br/> <div class="param"> [Number] format Time FORMAT_XXX constant to use</div><br/> <div class="returns">Returns  [Info] For FORMAT_SHORT, all values in Info are integers. For FORMAT_MEDIUM and</div><br/>    FORMAT_LONG, the month/day fields have the strings for the date in question. The time<br/>    returned has been converted to UTC.<br/> @since 2.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="start" parent="Timer">
<param id="callback"/>
<param id="time"/>
<param id="repeat"/>
<documentation><![CDATA[<div class="description"> Use start() to start the timer. The given callback will be called<br/> no sooner than the given number of milliseconds. This will cause<br/> an error if too many timers are set. The number of available timers<br/> (default of 3) and the minimum time value (default of 50ms) depends<br/> on the host system.<br/> <div class="param"> [Method] callback A function to call after the timer completes</div><br/> <div class="param"> [Number] time The number of milliseconds to wait before invoking callback</div><br/> <div class="param"> [Boolean] repeat Set to true to have the timer repeat until stop() is called</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="stop" parent="Timer">
<documentation><![CDATA[<div class="description"> Use stop() to stop the timer from running. This only<br/> needs to be called for repeating timers.<br/> The Timer can be started again by calling<br/> start().<br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getProfile" parent="UserProfile">
<documentation><![CDATA[<div class="description"> Use getProfile() to retrieve the current User Profile.<br/> <div class="returns">Returns  [UserProfile.Profile] The Profile object for the user</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getHeartRateZones" parent="UserProfile">
<param id="sport"/>
<documentation><![CDATA[<div class="description"> <div class="param"> [Number] sport The sport that zones are being requested from. Should be a HR_ZONE_SPORT_XXX value.</div><br/> <div class="returns">Returns  [Array] Array of zone thresholds for the requested sport.</div><br/>                 The returned array contains zone values as follows:<br/>                 [min zone 1, max zone 1, max zone 2, max zone 3, max zone 4, max zone 5]<br/> @since 1.2.6<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getCurrentSport" parent="UserProfile">
<documentation><![CDATA[<div class="description"> Returns the sport that the HR_ZONE SPORT_XXX enum that the current<br/> activity uses heart rate zones from. If the active sport does not have<br/> sport specific zones, it will retrun HR_ZONE_SPORT_GENERIC.<br/> <div class="returns">Returns  [Number] Returns the current HR zone sport from the HR_ZONE_SPORT_XXX enum.</div><br/> @since 1.2.6<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="KeyEvent">
<param id="keyValue"/>
<param id="keyPressType"/>
<documentation><![CDATA[<div class="description"> Constructor<br/> <div class="param"> keyValue A Toybox.WatchUi.KEY_* value</div><br/> <div class="param"> keyPressType The PRESS_TYPE for this event (since 1.1.2)</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getKey" parent="KeyEvent">
<documentation><![CDATA[<div class="description"> Use getKey() to get the key value of this event.<br/> <div class="returns">Returns  A Toybox.WatchUi.KEY_* value</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getType" parent="KeyEvent">
<documentation><![CDATA[<div class="description"> Get the type of click event.<br/> <div class="returns">Returns  The WATCH_UI.PRESS_TYPE_* value</div><br/> @since 1.1.2<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="ClickEvent">
<param id="x"/>
<param id="y"/>
<param id="type"/>
<documentation><![CDATA[<div class="description"> Constructor<br/> <div class="param"> [Number] x The x-coordinate of the click</div><br/> <div class="param"> [Number] y The y-coordinate of the click</div><br/> <div class="param"> type The CLICK_TYPE for this event</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getCoordinates" parent="ClickEvent">
<documentation><![CDATA[<div class="description"> Get the coordinates of the press with getCoordinates<br/> <div class="returns">Returns  [Array] The press coordinates as an array of [x, y]</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getType" parent="ClickEvent">
<documentation><![CDATA[<div class="description"> Get the type of click event.<br/> <div class="returns">Returns  The WATCH_UI.CLICK_TYPE_* value</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="SwipeEvent">
<param id="direction"/>
<documentation><![CDATA[<div class="description"> Constructor<br/> <div class="param"> direction The WatchUi.SWIPE_* value</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getDirection" parent="SwipeEvent">
<documentation><![CDATA[<div class="description"> Get the direction of the swipe with getDirection().<br/> <div class="returns">Returns  The WatchUi.SWIPE_* value</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="SelectableEvent">
<param id="instance"/>
<param id="previousState"/>
<documentation><![CDATA[<div class="description"> Constructor<br/> <div class="param"> [Selectable] instance The Selectable that generated the event</div><br/> <div class="param"> [Symbol] previousState The previous Selectable state (stateDefault, stateHighlighted, etc)</div><br/> @since 2.1.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getPreviousState" parent="SelectableEvent">
<documentation><![CDATA[<div class="description"> Get the previous state of the Selectable that generated the event.<br/> <div class="returns">Returns  [Symbol] The previous Selectable state (stateDefault, stateHighlighted, etc)</div><br/> @since 2.1.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getInstance" parent="SelectableEvent">
<documentation><![CDATA[<div class="description"> Get the instance of the manipulated Selectable.<br/> <div class="returns">Returns  The Reference to the Selectable manipulated</div><br/> @since 2.1.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="animate" parent="WatchUi">
<param id="drawable"/>
<param id="property"/>
<param id="type"/>
<param id="start"/>
<param id="stop"/>
<param id="period"/>
<param id="callback"/>
<documentation><![CDATA[<div class="description"> Use animate() to animate a property over a given period of time. The animation starts<br/> after the call and runs the length of the specified period. During<br/> this time the View's draw callback will be called.<br/> <div class="param"> [Drawable] drawable Drawable to animate</div><br/> <div class="param"> [Symbol] property Symbol of property to animate over time</div><br/> <div class="param"> type Toybox.WatchUi.ANIM_TYPE_* value</div><br/> <div class="param"> [Number] start Initial value of property</div><br/> <div class="param"> [Number] stop Final value of property after animation</div><br/> <div class="param"> [Float] period Time in seconds for animation to run</div><br/> <div class="param"> [Method] callback Method object to call when complete, or null</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="loadResource" parent="WatchUi">
<param id="resource"/>
<documentation><![CDATA[<div class="description"> Load a resource from the executable with loadResource().<br/> <div class="param"> [Symbol] resource Rez identifier from resources.xml to load</div><br/> <div class="returns">Returns  A Font, Bitmap, or String resource</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onKey" parent="InputDelegate">
<param id="evt"/>
<documentation><![CDATA[<div class="description"> When a hard key is pressed, onKey() is called.<br/> <div class="param"> [KeyEvent] evt The KeyEvent that occured. Call evt.getKey() to get the WatchUi.KEY_* enum value.</div><br/> <div class="returns">Returns  [Boolean] true if handled, false otherwise</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onKeyPressed" parent="InputDelegate">
<param id="evt"/>
<documentation><![CDATA[<div class="description"> When a hard key is pressed down, onKeyPressed() is called.<br/> <div class="param"> [KeyEvent] evt The KeyEvent that occured. Call evt.getKey() to get the WatchUi.KEY_* enum value.</div><br/> <div class="returns">Returns  [Boolean] true if handled, false otherwise</div><br/> @since 1.1.2<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onKeyReleased" parent="InputDelegate">
<param id="evt"/>
<documentation><![CDATA[<div class="description"> When a hard key is released, onKeyReleased() is called.<br/> <div class="param"> [KeyEvent] evt The KeyEvent that occured. Call evt.getKey() to get the WatchUi.KEY_* enum value.</div><br/> <div class="returns">Returns  [Boolean] true if handled, false otherwise</div><br/> @since 1.1.2<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onTap" parent="InputDelegate">
<param id="evt"/>
<documentation><![CDATA[<div class="description"> When a screen tap event occurs, onTap() is called. This is sent if the user taps<br/> (quickly presses and releases) the screen.<br/> <div class="param"> [ClickEvent] evt A ClickEvent object containing information about the tap</div><br/> <div class="returns">Returns  [Boolean] true if handled, false otherwise</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onHold" parent="InputDelegate">
<param id="evt"/>
<documentation><![CDATA[<div class="description"> When a screen hold event occurs, onHold() is called. This is sent if user touches<br/> and holds on the screen.<br/> <div class="param"> [ClickEvent] evt A ClickEvent object containing information about the hold</div><br/> <div class="returns">Returns  [Boolean] true if handled, false otherwise</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onRelease" parent="InputDelegate">
<param id="evt"/>
<documentation><![CDATA[<div class="description"> When a screen release event occurs, onRelease() is called. This is only sent after an<br/> onHold event when the user stops touching the screen.<br/> <div class="param"> [ClickEvent] evt A ClickEvent object containing information about the release</div><br/> <div class="returns">Returns  [Boolean] true if handled, false otherwise</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onSwipe" parent="InputDelegate">
<param id="evt"/>
<documentation><![CDATA[<div class="description"> When a swipe event occurs, onSwipe() is called. This is sent when the user swipes the screen.<br/> <div class="param"> [SwipeEvent] evt A SwipeEvent object containing information about the swipe</div><br/> <div class="returns">Returns  [Boolean] true if handled, false otherwise</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onSelectable" parent="InputDelegate">
<param id="evt"/>
<documentation><![CDATA[<div class="description"> When the state of a Selectable changes, onSelectable() is called. The instance of the<br/> associated Selectable is passed so that its current state may be determined.<br/> <div class="param"> [SelectableEvent] evt A SelectableEvent object containing information about selectable</div><br/> <div class="returns">Returns  [Boolean] true if handled, false otherwise</div><br/> @since 2.1.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="handleEvent" parent="InputDelegate">
<param id="evt"/>
<documentation><![CDATA[<div class="description"> This is the function that maps low level events to delegate events. DO NOT OVERRIDE.<br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="BehaviorDelegate">
<documentation><![CDATA[<div class="description"> Constructor<br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onNextPage" parent="BehaviorDelegate">
<documentation><![CDATA[<div class="description"> When a next page behavior occurs, onNextPage() is called.<br/> <div class="returns">Returns  [Boolean] true if handled, false otherwise</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onPreviousPage" parent="BehaviorDelegate">
<documentation><![CDATA[<div class="description"> When a previous page behavior occurs, onPreviousPage() is called.<br/> <div class="returns">Returns  [Boolean] true if handled, false otherwise</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onMenu" parent="BehaviorDelegate">
<documentation><![CDATA[<div class="description"> When a menu behavior occurs, onMenu() is called.<br/> <div class="returns">Returns  [Boolean] true if handled, false otherwise</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onBack" parent="BehaviorDelegate">
<documentation><![CDATA[<div class="description"> When a back behavior occurs, onBack() is called.<br/> <div class="returns">Returns  [Boolean] true if handled, false otherwise</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onNextMode" parent="BehaviorDelegate">
<documentation><![CDATA[<div class="description"> When a next mode behavior occurs, onNextMode() is called.<br/> <div class="returns">Returns  [Boolean] true if handled, false otherwise</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onPreviousMode" parent="BehaviorDelegate">
<documentation><![CDATA[<div class="description"> When a previous mode behavior occurs, onPreviousMode() is called.<br/> <div class="returns">Returns  [Boolean] true if handled, false otherwise</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onSelect" parent="BehaviorDelegate">
<documentation><![CDATA[<div class="description"> When the selection behavior occurs, onSelect() is called<br/> <div class="returns">Returns  [Boolean] true if handled, false otherwise</div><br/> @since 1.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="handleEvent" parent="BehaviorDelegate">
<param id="evt"/>
<documentation><![CDATA[<div class="description"> This is the function that maps low level events<br/> to delegate events. DO NOT OVERRIDE.<br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="View">
<documentation><![CDATA[<div class="description"> Constructor<br/> @since 2.1.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="findDrawableById" parent="View">
<param id="id"/>
<documentation><![CDATA[<div class="description"> Find a Drawable by its ID.<br/> <div class="param"> [String] id The ID of the Drawable to find</div><br/> <div class="returns">Returns  [WatchUi.Drawable] The Drawable if found, null otherwise</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onLayout" parent="View">
<param id="dc"/>
<documentation><![CDATA[<div class="description"> The entry point for the View is onLayout(). This is called before the<br/> View is shown to load resources and set up the layout of the View.<br/> <div class="param"> [Graphics.Dc] dc The drawing context</div><br/> <div class="returns">Returns  [Boolean] true if handled, false otherwise</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onShow" parent="View">
<documentation><![CDATA[<div class="description"> When the View is brought into the foreground, onShow() is called. This is<br/> where you should load resources into system memory for use in this view.<br/> <div class="returns">Returns  [Boolean] true if handled, false otherwise</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onUpdate" parent="View">
<param id="dc"/>
<documentation><![CDATA[<div class="description"> When a View is active, onUpdate() is used to update<br/> dynamic content. This function is called when<br/> the View is brought to the foreground. For widgets and<br/> watch-apps it is also called when WatchUi.requestUpdate()<br/> is called. For watchfaces it is called once a minute and<br/> for datafields it is called once a second. If a class that<br/> extends View does not implement this function then any<br/> Drawables contained in the View will automatically be drawn.<br/> <div class="param"> [Graphics.Dc] dc The drawing context</div><br/> <div class="returns">Returns  [Boolean] true if handled, false otherwise</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onHide" parent="View">
<documentation><![CDATA[<div class="description"> Before the View is removed from the foreground, onHide() is called. Here<br/> you should free resources from memory if you are planning on leaving this<br/> view on the page stack.<br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="setLayout" parent="View">
<param id="layout"/>
<documentation><![CDATA[<div class="description"> Use setLayout() to set the layout for the View. If the extending class<br/> does not override onUpdate(), then all Drawables contained in layout will<br/> automatically be drawn by the View.<br/> <div class="param"> [Array] layout An array of Drawables</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="setKeyToSelectableInteraction" parent="View">
<param id="enabled"/>
<documentation><![CDATA[<div class="description"> Set the state of the keys to Selectable interaction mode. In this mode the<br/> keys are used to cycle through the on screen Selectable objects. The first<br/> registered Selectable in the current layout will be highlighted.<br/> <div class="param"> [Boolean] enabled If the mode should be enabled</div><br/> @since 2.1.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="WatchFace">
<documentation><![CDATA[<div class="description"> Constructor<br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onEnterSleep" parent="WatchFace">
<documentation><![CDATA[<div class="description"> onEnterSleep() is called when the watch is entering sleep mode.<br/> Terminate any active timers and prepare for slow updates.<br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onExitSleep" parent="WatchFace">
<documentation><![CDATA[<div class="description"> onExitSleep() is called when the watch is exiting sleep mode.<br/> Timers and animations may be started here.<br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="DataField">
<documentation><![CDATA[<div class="description"> Constructor<br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="compute" parent="DataField">
<param id="info"/>
<documentation><![CDATA[<div class="description"> To retrieve Activity.Info data for DataFields, it is necessary to override compute().<br/> This is the method that is called to update the field information.<br/> <div class="param"> [Activity.Info] info The updated Activity.Info object</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onTimerStart" parent="DataField">
<documentation><![CDATA[<div class="description"> The function onTimerStart will be called when the activity timer goes from the<br/> stopped state to the started state. If the activity timer is running when the<br/> app is loaded, this event will run immediately after startup.<br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onTimerStop" parent="DataField">
<documentation><![CDATA[<div class="description"> The function onTimerStop will be called when the activity timer goes from the<br/> running state to the stopped state.<br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onTimerPause" parent="DataField">
<documentation><![CDATA[<div class="description"> The function onTimerPause will be called when the activity timer goes from the<br/> running state to the paused state. The paused state will occur when the<br/> auto-pause feature pauses the timer. If the activity timer is paused when the<br/> app is loaded, this event will run immediately after startup<br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onTimerResume" parent="DataField">
<documentation><![CDATA[<div class="description"> The function onTimerResume will be called when the activity timer goes from the<br/> paused state to the running state.<br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onTimerLap" parent="DataField">
<documentation><![CDATA[<div class="description"> The function onTimerLap will be called when a lap is added to the current activity.<br/> This notification is fired after the lap record has been written to the FIT file.<br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onTimerReset" parent="DataField">
<documentation><![CDATA[<div class="description"> The function onTimerReset will be called when the current activity is ended<br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getObscurityFlags" parent="DataField">
<documentation><![CDATA[<div class="description"> <div class="returns">Returns  [Number] mask of OBSCURE_X values giving the sides of the display that</div><br/>         that are obscured by a round screen.  Valid during onUpdate.<br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getBackgroundColor" parent="DataField">
<documentation><![CDATA[<div class="description"> <div class="returns">Returns  [Number] the current background color for data fields, which is either</div><br/>         Graphics.COLOR_WHITE or Graphics.COLOR_BLACK<br/> @since 1.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="createField" parent="DataField">
<param id="name"/>
<param id="fieldId"/>
<param id="type"/>
<param id="options"/>
<documentation><![CDATA[<div class="description"> Used to create a new field. Field is updated in the FIT file by changing the the value of the data within the Field.<br/> This method is to allow data fields access to FIT recording without giving them access to the session.<br/> <div class="param"> [String] name The name of the Field as a string</div><br/> <div class="param"> [Number] fieldId The unique Field Identifier for the Field</div><br/> <div class="param"> [type] type The type definiton for the field from the DATA_TYPE_ enumeration</div><br/> <div class="param"> [Dictionary] options Optional parameters that can be specified for field creation</div><br/>   @option [:count] The number of elements to add to the field if it is an array.<br/>                    This is also the maximum combined size of strings plus null<br/>                    terminators if the type is DATA_TYPE_STRING (Default 1)<br/>   @option [:mesgType] Optional. The message type that this field should be added to. Defaults to MESG_TYPE_RECORD if not provided.<br/>                       Note that if mesgType == MESG_TYPE_RECORD, DATA_TYPE_STRING cannot be used as the field type.<br/>   @option [:units] Optional. The display units as a String. This should use the current device language.<br/>   @option [:nativeNum] Optional. If this field can be treated equivalently to a field that is included in the FIT SDK use this to<br/>                        indicate the Field Number that is specified by the FIT Profile.<br/>                        For reference see: Messages Sheet in Profile.xlsx included in the FIT SDK available at https://www.thisisant.com/resources/fit<br/> <div class="returns">Returns  [Field] the resulting field object</div><br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="SimpleDataField">
<documentation><![CDATA[<div class="description"> Constructor<br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="compute" parent="SimpleDataField">
<param id="info"/>
<documentation><![CDATA[<div class="description"> To retrieve Activity.Info data for DataFields, it is necessary to override compute().<br/> This is the method that is called to update the field information.<br/> <div class="param"> [Activity.Info] info The updated Activity.Info object</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="requestUpdate" parent="WatchUi">
<documentation><![CDATA[<div class="description"> Use requestUpdate() to request that onUpdate() method be called for the current View.<br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="MenuItem">
<param id="n"/>
<param id="i"/>
<documentation/>
</functionEntry>
<functionEntry name="setTitle" parent="Menu">
<param id="title"/>
<documentation><![CDATA[<div class="description"> Set a title for the menu.<br/> <div class="param"> [String] title The title text or the Rez ID of a string resource</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="addItem" parent="Menu">
<param id="name"/>
<param id="id"/>
<documentation><![CDATA[<div class="description"> Add an entry to a Menu with addItem().<br/> <div class="param"> [String] name The item text or the Rez ID of a string resource</div><br/> <div class="param"> [Symbol] id A symbol representing the Menu item value</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onMenuItem" parent="MenuInputDelegate">
<param id="item"/>
<documentation><![CDATA[<div class="description"> When a Menu item is chosen, onMenuItem() is called.<br/> <div class="param"> [Symbol] item The id of the chosen Menu item</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="Confirmation">
<param id="message"/>
<documentation><![CDATA[<div class="description"> Constructor<br/> <div class="param"> [String] message A textual confirmation message</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onResponse" parent="ConfirmationDelegate">
<param id="response"/>
<documentation><![CDATA[<div class="description"> When a response is chosen, onResponse() is called, passing<br/> the response of CONFIRM_NO or CONFIRM_YES<br/> <div class="param"> response The response of the confirmation of CONFIRM_NO or CONFIRM_YES</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="NumberPicker">
<param id="mode"/>
<param id="initialValue"/>
<documentation><![CDATA[<div class="description"> Constructor<br/> <div class="param"> mode An enum value of type NUMBER_PICKER_*</div><br/> <div class="param"> initialValue The initial value for the Number Picker, type depends on mode</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onNumberPicked" parent="NumberPickerDelegate">
<param id="value"/>
<documentation><![CDATA[<div class="description"> When a number is chosen, onNumberPicked() is called, passing the chosen value.<br/> <div class="param"> value The chosen number, type depends on the NumberPicker mode</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="ProgressBar">
<param id="displayString"/>
<param id="startValue"/>
<documentation><![CDATA[<div class="description"> Constructor<br/> <div class="param"> [String] displayString The string to display on the progress bar view</div><br/> <div class="param"> [Float] startValue The initial value for the progress bar (0-100), null for "busy"</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="setProgress" parent="ProgressBar">
<param id="progressValue"/>
<documentation><![CDATA[<div class="description"> Use setProgress() to set the value of the progress bar.<br/> <div class="param"> [Float] progressValue The value for the progress bar (0-100), null for "busy"</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="setDisplayString" parent="ProgressBar">
<param id="displayString"/>
<documentation><![CDATA[<div class="description"> Use setDisplayString() to set the string displayed on the progress bar view.<br/> <div class="param"> [String] displayString The string to display on the progress bar view</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="TextPicker">
<param id="initialText"/>
<documentation><![CDATA[<div class="description"> Constructor<br/> <div class="param"> initialText The initial text for the Number Picker, type depends on mode</div><br/> @since 1.1.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onTextEntered" parent="TextPickerDelegate">
<param id="text"/>
<param id="changed"/>
<documentation><![CDATA[<div class="description"> When text is entered, onTextEntered() is called, passing the entered text.<br/> <div class="param"> [String] text The entered text</div><br/> <div class="param"> [Boolean] changed If the entered text was modified</div><br/> @since 1.1.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onCancel" parent="TextPickerDelegate">
<documentation><![CDATA[<div class="description"> When the user cancels entering text, onCancel() is called.<br/> @since 1.1.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="pushView" parent="WatchUi">
<param id="view"/>
<param id="delegate"/>
<param id="transition"/>
<documentation><![CDATA[<div class="description"> Push a View onto the View stack with pushView().<br/> <div class="param"> [View] view View to push</div><br/> <div class="param"> delegate The input delegate to handle input for the View</div><br/> <div class="param"> transition View transition of type SLIDE_*</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="popView" parent="WatchUi">
<param id="transition"/>
<documentation><![CDATA[<div class="description"> Pop a View from the View stack with popView().<br/> <div class="param"> transition View transition of type SLIDE_*</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="switchToView" parent="WatchUi">
<param id="view"/>
<param id="delegate"/>
<param id="transition"/>
<documentation><![CDATA[<div class="description"> Use switchToView() to pop the current View and push the new one.<br/> Native views (e.g. progress bars, confirmation dialogues,<br/> number pickers, etc.) may not be passed as an input parameter.<br/> switchToView() only supports switching to non-native views.<br/> <div class="param"> [View] view View object to push</div><br/> <div class="param"> delegate the input delegate to handle input for the View</div><br/> <div class="param"> transition View transition of type SLIDE_*</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="FontResource">
<documentation/>
</functionEntry>
<functionEntry name="initialize" parent="BitmapResource">
<documentation/>
</functionEntry>
<functionEntry name="getHeight" parent="BitmapResource">
<documentation><![CDATA[<div class="description"> Use getHeight() to get the height of the bitmap.<br/> <div class="returns">Returns  [Number] Height of bitmap</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getWidth" parent="BitmapResource">
<documentation><![CDATA[<div class="description"> Use getWidth() to get the width of the bitmap.<br/> <div class="returns">Returns  [Number] Width of bitmap</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toString" parent="BitmapResource">
<documentation><![CDATA[<div class="description"> Use toString() to print info about this object.<br/> <div class="returns">Returns  [String] A String representation of BitmapResource</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="pageCtrlNative" parent="WatchUi">
<param id="cmd"/>
<param id="view"/>
<param id="delegate"/>
<param id="transition"/>
<documentation/>
</functionEntry>
<functionEntry name="initialize" parent="Drawable">
<param id="dictionary"/>
<documentation><![CDATA[<div class="description"> Constructor<br/> <div class="param"> [Dictionary] dictionary A Dictionary containing the settings</div><br/> @option dictionary [String] :identifier The identifier for the Drawable<br/> @option dictionary [Number] :locX The absolute screen x-coordinate for the Drawable<br/> @option dictionary [Number] :locY The absolute screen y-coordinate for the Drawable<br/> @option dictionary [Number] :width The clip width of the Drawable<br/> @option dictionary [Number] :height The clip height of the Drawable<br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="draw" parent="Drawable">
<param id="dc"/>
<documentation><![CDATA[<div class="description"> Draw the object to the display context with draw(). Assume that the<br/> device context has already been configured to the proper settings.<br/> <div class="param"> [Graphics.Dc] dc The device context</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="setLocation" parent="Drawable">
<param id="x"/>
<param id="y"/>
<documentation><![CDATA[<div class="description"> Set the location for this Drawable object with setLocation().<br/> <div class="param"> [Number] x Horizontal position on the screen</div><br/> <div class="param"> [Number] y Vertical position on the screen</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="setSize" parent="Drawable">
<param id="w"/>
<param id="h"/>
<documentation><![CDATA[<div class="description"> Set the size of this Drawable object with setSize().<br/> <div class="param"> [Number] w Width of the Drawable object</div><br/> <div class="param"> [Number] h Height of the Drawable object</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="Bitmap">
<param id="dictionary"/>
<documentation><![CDATA[<div class="description"> Constructor<br/> <div class="param"> [Dictionary] dictionary A Dictionary containing the settings</div><br/> @option dictionary [Symbol] :rezId The Rez identifier for the bitmap<br/> @see Drawable#initialize<br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getDimensions" parent="Bitmap">
<documentation><![CDATA[<div class="description"> Get the dimensions of the bitmap with getDimensions().<br/> <div class="returns">Returns  [Array] A two element array with the contents [width, height]</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="draw" parent="Bitmap">
<param id="dc"/>
<documentation><![CDATA[<div class="description"> Draw the bitmap with draw().<br/> <div class="param"> [Graphics.Dc] dc The device context</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="setBitmap" parent="Bitmap">
<param id="rezId"/>
<documentation><![CDATA[<div class="description"> Use setBitmap() to set the resource associated with the Bitmap.<br/> <div class="param"> [Symbol] rezId The Rez identifier for the bitmap</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="Text">
<param id="dictionary"/>
<documentation><![CDATA[<div class="description"> Constructor<br/> <div class="param"> [Dictionary] dictionary A Dictionary containing the settings</div><br/> @option dictionary :text The text string or the Rez ID of a string resource<br/> @option dictionary :color The text color of type Graphics.COLOR_*<br/> @option dictionary :backgroundColor The background color of type Graphics.COLOR_*<br/> @option dictionary :font The font to use of type Graphics.FONT_*<br/> @option dictionary :justification The text justification of type Graphics.TEXT_JUSTIFY_*<br/> @see Drawable#initializes<br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="draw" parent="Text">
<param id="dc"/>
<documentation><![CDATA[<div class="description"> Draw the Text resource with draw().<br/> <div class="param"> [Graphics.Dc] dc The draw context</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="setColor" parent="Text">
<param id="color"/>
<documentation><![CDATA[<div class="description"> Use setColor() to set the text color.<br/> <div class="param"> color The text color of type Graphics.COLOR_*</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="setBackgroundColor" parent="Text">
<param id="color"/>
<documentation><![CDATA[<div class="description"> Use setBackgroundColor() to set the text's background color.<br/> <div class="param"> color The background color of type Graphics.COLOR_*</div><br/> @since 1.3.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="setFont" parent="Text">
<param id="font"/>
<documentation><![CDATA[<div class="description"> Use setFont() to set the text font.<br/> <div class="param"> font The font to use of type Graphics.FONT_* or from WatchUi.loadResource()</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="setJustification" parent="Text">
<param id="justification"/>
<documentation><![CDATA[<div class="description"> Use setJustification() to set the text justification.<br/> <div class="param"> justification The text justification of type Graphics.TEXT_JUSTIFY_*</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="setText" parent="Text">
<param id="text"/>
<documentation><![CDATA[<div class="description"> Use setText() to set the text string.<br/> <div class="param"> [String] text The text string or the Rez ID of a string resource</div><br/> @since 1.0.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="InvalidSelectableStateException">
<documentation><![CDATA[<div class="description"> Constructor<br/> @since 2.1.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="Selectable">
<param id="options"/>
<documentation><![CDATA[<div class="description"> Constructor<br/> <div class="param"> [Dictionary] options Parameters to specify in Selectable creation</div><br/> @option options [Number] :locX @see Drawable#initialize. Required.<br/> @option options [Number] :locY @see Drawable#initialize. Required.<br/> @option options [Number] :width @see Drawable#initialize. Required.<br/> @option options [Number] :height @see Drawable#initialize. Required.<br/> @option options [Object] :stateDefault Drawable to display in default state. Optional.<br/> @option options [Object] :stateHighlighted Drawable to display in disable state. Optional.<br/> @option options [Object] :stateSelected Drawable to display in highlight state. Optional.<br/> @option options [Object] :stateDisabled Drawable to display in selected state. Optional.<br/> @since 2.1.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getState" parent="Selectable">
<documentation><![CDATA[<div class="description"> Get the current state.<br/> <div class="returns">Returns  [Symbol] The current state (:stateDefault, :stateHighlighted, etc).</div><br/> @since 2.1.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="setState" parent="Selectable">
<param id="state"/>
<documentation><![CDATA[<div class="description"> Set the current state.<br/> <div class="param"> [Symbol] state The desired state (:stateDefault, :stateHighlighted, etc) to make current.</div><br/> @since 2.1.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="draw" parent="Selectable">
<param id="dc"/>
<documentation><![CDATA[<div class="description"> Draw the object to the display context with draw(). Assume that the<br/> device context has already been configured to the proper settings.<br/> <div class="param"> [Graphics.Dc] dc The device context</div><br/> @since 2.1.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="Button">
<param id="options"/>
<documentation><![CDATA[<div class="description"> Constructor<br/> Initialize the Button foreground, background, and behavior. The Button must be registered via a<br/> setLayout() call in order to be usable. Accepts the standard Selectable symbols and<br/> also includes its requirements.<br/> <div class="param"> options [Dictionary] Parameters to specify in Button creation</div><br/> @option options [Method] :behavior Method object to call when selected, or null to use a SelectableEvent. Optional.<br/> @option options [Object] :background Drawable, Graphics.COLOR_* constant, or 24-bit integer of the form 0xRRGGBB. Optional.<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="draw" parent="Button">
<param id="dc"/>
<documentation><![CDATA[<div class="description"> Draw the object to the display context with draw(). Assume that the<br/> device context has already been configured to the proper settings.<br/> <div class="param"> [Graphics.Dc] dc The device context</div><br/> @since 2.1.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getDrawable" parent="PickerFactory">
<param id="item"/>
<param id="isSelected"/>
<documentation><![CDATA[<div class="description"> Generate a Drawable instance for a given item<br/> <div class="param"> [Number] item Item index</div><br/> <div class="param"> [Boolean] isSelected true if the current item is the selected item, false otherwise</div><br/> <div class="returns">Returns  [Drawable] object to be rendered</div><br/> @since 1.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getValue" parent="PickerFactory">
<param id="item"/>
<documentation><![CDATA[<div class="description"> Return a representative value for this item<br/> <div class="param"> [Number] item Item index</div><br/> <div class="returns">Returns  [Object] Representative item for the given index</div><br/> @since 1.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getSize" parent="PickerFactory">
<documentation><![CDATA[<div class="description"> Get the number of items in the factory<br/> <div class="returns">Returns  [Number] number of items in the factory</div><br/> @since 1.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onAccept" parent="PickerDelegate">
<param id="values"/>
<documentation><![CDATA[<div class="description"> Handle a confirm event from a [Picker]<br/> <div class="param"> [Array] values The chosen values from the Picker. For [Drawable] entries, null will be returned for that value.</div><br/> @since 1.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onCancel" parent="PickerDelegate">
<documentation><![CDATA[<div class="description"> Handle a cancel event from a [Picker]<br/> @since 1.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="Picker">
<param id="options"/>
<documentation><![CDATA[<div class="description"> Constructor<br/> <div class="param"> [Dictionary] options @see Picker#setOptions</div><br/> @since 1.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="setOptions" parent="Picker">
<param id="options"/>
<documentation><![CDATA[<div class="description"> Set the options for the Picker.<br/> <div class="param"> [Dictionary] options the options for the Picker</div><br/> @option options [Drawable] :title the title for the Picker. Required.<br/> @option options [Array] :pattern an Array of [Object] for the Picker to display. If the Array entry is a PickerFactory then it is presented to the user to make a choice. If it is a Drawable then it is display only. Required.<br/> @option options [Array] :defaults an Array of [Number] indicating the starting index for each entry in :pattern. Optional.<br/> @option options [Drawable] :nextArrow a custom next icon for the Picker. Optional.<br/> @option options [Drawable] :previousArrow a custom previous icon for the Picker. Optional.<br/> @option options [Drawable] :confirm a custom confirm icon for the Picker. Optional.<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initResources" parent="WatchUi">
<param id="rezModule"/>
<documentation/>
</functionEntry>
<functionEntry name="initialize" parent="BatteryStatus">
<documentation><![CDATA[<div class="description"> Constructor<br/> @since 2.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="ManufacturerInfo">
<documentation><![CDATA[<div class="description"> Constructor<br/> @since 2.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="ProductInfo">
<documentation><![CDATA[<div class="description"> Constructor<br/> @since 2.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getBatteryStatus" parent="Device">
<param id="identifier"/>
<documentation><![CDATA[<div class="description"> Retrieve battery status for provided component identifier.<br/> @since 2.2.0<br/> <div class="param">  [Number] identifier  The component identifier to retrieve battery status for. NULL if single-component. Light index for bike lights.</div><br/> <div class="returns">Returns  [BatteryStatus] The current battery status for this identifier. NULL if unknown identifier.</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getComponentIdentifiers" parent="Device">
<documentation><![CDATA[<div class="description"> Retrieve a list of known component identifiers for this Device. This list may update<br/> over time as ANT+ devices with >1 component periodically send information about each<br/> of their components. The device reports its total number of components in<br/> CommonData.NumComponents. The returned array will only contain entries for components<br/> that the ANT+ device has provided a component identifier for.<br/> @since 2.2.0<br/> <div class="returns">Returns  [Array] A list of known component identifiers. NULL if there are no known component identifiers.</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getManufacturerInfo" parent="Device">
<param id="identifier"/>
<documentation><![CDATA[<div class="description"> Retrieve manufacturer information for provided component identifier.<br/> @since 2.2.0<br/> <div class="param">  [Number] identifier  The component identifier to retrieve manufacturer information for. NULL if single-component. Light index for bike lights.</div><br/> <div class="returns">Returns  [ManufacturerInfo] The current manufacturer information for this identifier. NULL if unknown identifier.</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getProductInfo" parent="Device">
<param id="identifier"/>
<documentation><![CDATA[<div class="description"> Retrieve product information for provided component identifier.<br/> @since 2.2.0<br/> <div class="param">  [Number] identifier  The component identifier to retrieve product information for. NULL if single-component. Light index for bike lights.</div><br/> <div class="returns">Returns  [ProductInfo] The current product information for this identifier. NULL if unknown identifier.</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getDeviceState" parent="Device">
<documentation><![CDATA[<div class="description"> Retrieve the state of the device.<br/> @since 2.2.0<br/> <div class="returns">Returns  [DeviceState] Current device state</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="Device">
<param id="deviceType"/>
<param id="listener"/>
<documentation><![CDATA[<div class="description"> Constructor for the Device object<br/> @since 2.2.0<br/> <div class="param"> [Number] deviceType  ANT+ device type of the device</div><br/> <div class="param"> [Class] listener  An extension of one of the device-specific listener classes.</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="setListener" parent="Device">
<param id="listener"/>
<documentation><![CDATA[<div class="description"> To set the listener for the device, use setListener().<br/> @since 2.2.0<br/> <div class="param"> [Class] listener  Class object to call with device info updates. Must be an extension of DeviceListener.</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onBatteryStatusUpdate" parent="DeviceListener">
<param id="data"/>
<documentation><![CDATA[<div class="description"> Callback when battery status is received.<br/> @since 2.2.0<br/> <div class="param"> [BatteryStatus] data  Data with battery status information.</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onManufacturerInfoUpdate" parent="DeviceListener">
<param id="data"/>
<documentation><![CDATA[<div class="description"> Callback when manufacturer's information is received.<br/> @since 2.2.0<br/> <div class="param"> [ManufacturerInfo] data  Data with manufacturer's information.</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onProductInfoUpdate" parent="DeviceListener">
<param id="data"/>
<documentation><![CDATA[<div class="description"> Callback when product information is received.<br/> @since 2.2.0<br/> <div class="param"> [ProductInfo] data  Data with product information.</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onDeviceStateUpdate" parent="DeviceListener">
<param id="data"/>
<documentation><![CDATA[<div class="description"> Callback when device state is updated.<br/> @since 2.2.0<br/> <div class="param"> [DeviceState] data  Data with updated device state information.</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="BikeLight">
<documentation><![CDATA[<div class="description"> Constructor<br/> @since 2.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getCapableModes" parent="BikeLight">
<documentation><![CDATA[<div class="description"> Get a list of the standard and custom light modes that a bike light supports.<br/> @since 2.2.0<br/> <div class="returns">Returns  [Array] list of supported LIGHT_MODE_* values, null if unknown</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="setMode" parent="BikeLight">
<param id="mode"/>
<documentation><![CDATA[<div class="description"> Tell this light to enter a new mode.<br/> You should check the capable modes before sending light modes as lights<br/> will ignore commands to go into modes that they do not support. Lights<br/> whose modes are set here will not be controlled by the Light Network Mode<br/> until they are restored OR until the user changes the Light Network Mode<br/> outside of ConnectIQ.<br/> @since 2.2.0<br/> <div class="param"> mode  [Number] LIGHT_MODE* enum value</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getNetworkMode" parent="LightNetwork">
<documentation><![CDATA[<div class="description"> Get the light network mode<br/> @since 2.2.0<br/> <div class="returns">Returns  [Number] LIGHT_NETWORK_MODE_* enum value</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getNetworkState" parent="LightNetwork">
<documentation><![CDATA[<div class="description"> Get the light network state<br/> @since 2.2.0<br/> <div class="returns">Returns  [Number] LIGHT_NETWORK_STATE_* enum value</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getBikeLights" parent="LightNetwork">
<documentation><![CDATA[<div class="description"> Get a list of lights in the network<br/> @since 2.2.0<br/> <div class="returns">Returns  [Array] List of lights that are part of the network, null if light network state is not LIGHT_NETWORK_STATE_FORMED</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="restoreHeadlightsNetworkModeControl" parent="LightNetwork">
<documentation><![CDATA[<div class="description"> Bring all headlights under the control of whichever<br/> light network mode has been chosen by the user.<br/> @since 2.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="restoreTaillightsNetworkModeControl" parent="LightNetwork">
<documentation><![CDATA[<div class="description"> Bring all taillights under the control of whichever<br/> light network mode has been chosen by the user.<br/> @since 2.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="setHeadlightsMode" parent="LightNetwork">
<param id="mode"/>
<documentation><![CDATA[<div class="description"> Tell all headlights to enter the same mode.<br/> You should check the capable modes of each headlight in the<br/> network before sending light modes, as lights will ignore<br/> commands to go into modes that they do not support.<br/> Lights whose modes are set here will not be controlled by<br/> the Light Network Mode until they are restored OR until the<br/> user changes the Light Network Mode outside of ConnectIQ.<br/> @since 2.2.0<br/> <div class="param"> mode [Number] LIGHT_MODE* enum value</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="setTaillightsMode" parent="LightNetwork">
<param id="mode"/>
<documentation><![CDATA[<div class="description"> Tell all taillights to enter the same mode.<br/> You should check the capable modes of each taillight in the<br/> network before sending light modes, as lights will ignore<br/> commands to go into modes that they do not support.<br/> Lights whose modes are set here will not be controlled by<br/> the Light Network Mode until they are restored OR until the<br/> user changes the Light Network Mode outside of ConnectIQ.<br/> @since 2.2.0<br/> <div class="param"> mode [Number] LIGHT_MODE* enum value</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="toggleSignalLight" parent="LightNetwork">
<param id="left"/>
<documentation><![CDATA[<div class="description"> If signal light is engaged, disengage it.<br/> If signal lgiht is disengaged, engage it.<br/> This will automatically disengage the opposite<br/> signal if it is currently engaged.<br/> @since 2.2.0<br/> <div class="param"> left [Boolean] TRUE to control left signal, FALSE to control right signal</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="LightNetwork">
<param id="listener"/>
<documentation><![CDATA[<div class="description"> Constructor for the LightNetwork object<br/> @since 2.2.0<br/> <div class="param"> [LightNetworkListener] listener  An extension of the LightNetworkListener class.</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="LightNetworkListener">
<documentation><![CDATA[<div class="description"> Constructor<br/> @since 2.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onLightNetworkStateUpdate" parent="LightNetworkListener">
<param id="data"/>
<documentation><![CDATA[<div class="description"> Callback when the light network state changes<br/> @since 2.2.0<br/> <div class="param"> data [Number] LIGHT_NETWORK_STATE_* enum value</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onBikeLightUpdate" parent="LightNetworkListener">
<param id="data"/>
<documentation><![CDATA[<div class="description"> Callback when a bike light's data is updated (max freq. 1Hz)<br/> @since 2.2.0<br/> <div class="param"> data [BikeLight] updated light information</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getCalculatedCadence" parent="BikePower">
<documentation><![CDATA[<div class="description"> Use getCalculatedCadence() to get the current calculated crank cadence.<br/> @since 2.2.0<br/> <div class="returns">Returns  [CalculatedCadence] Current calculated crank cadence</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getCalculatedPower" parent="BikePower">
<documentation><![CDATA[<div class="description"> Use getCalculatedPower() to retrieve the current calculated power.<br/> @since 2.2.0<br/> <div class="returns">Returns  [CalculatedPower] Current calculated power</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getCalculatedWheelDistance" parent="BikePower">
<documentation><![CDATA[<div class="description"> Use getCalculatedWheelDistance() to retrieve the current calculated wheel distance.<br/> @since 2.2.0<br/> <div class="returns">Returns  [CalculatedWheelDistance] Current calculated wheel distance</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getCalculatedWheelSpeed" parent="BikePower">
<documentation><![CDATA[<div class="description"> Use getCalculatedWheelSpeed() to get the current calculated wheel speed.<br/> @since 2.2.0<br/> <div class="returns">Returns  [CalculatedWheelSpeed] Current calculated wheel speed</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getPedalPowerBalance" parent="BikePower">
<documentation><![CDATA[<div class="description"> Use getPedalPowerBalance() to get the current pedal power balance.<br/> @since 2.2.0<br/> <div class="returns">Returns  [PedalPowerBalance] Pedal power balance</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="getTorqueEffectivenessPedalSmoothness" parent="BikePower">
<documentation><![CDATA[<div class="description"> Use getTorqueEffectivenessPedalSmoothness() to retrieve the current torque effectiveness<br/> and pedal smoothness.<br/> @since 2.2.0<br/> <div class="returns">Returns  [TorqueEffectivenessPedalSmoothness] Current torque effectiveness & pedal smoothness</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="BikePower">
<param id="listener"/>
<documentation><![CDATA[<div class="description"> Constructor for the BikePower object<br/> @since 2.2.0<br/> <div class="param"> [BikePowerListener] listener  An extension of the BikePowerListener class.</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="initialize" parent="BikePowerListener">
<documentation><![CDATA[<div class="description"> Constructor<br/> @since 2.2.0<br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onCalculatedCadenceUpdate" parent="BikePowerListener">
<param id="data"/>
<documentation><![CDATA[<div class="description"> Callback when calculated cadence is updated (max freq 1Hz)<br/> @since 2.2.0<br/> <div class="param"> [CalculatedCadence] data   Data with updated cadence information.</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onCalculatedPowerUpdate" parent="BikePowerListener">
<param id="data"/>
<documentation><![CDATA[<div class="description"> Callback when calculated power is updated (max freq 1Hz)<br/> @since 2.2.0<br/> <div class="param"> [CalculatedPower] data   Data with updated power information.</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onCalculatedWheelDistanceUpdate" parent="BikePowerListener">
<param id="data"/>
<documentation><![CDATA[<div class="description"> Callback when calculated wheel distance is updated (max freq 1Hz)<br/> @since 2.2.0<br/> <div class="param"> [CalculatedWheelDistance] data   Data with updated distance information.</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onCalculatedWheelSpeedUpdate" parent="BikePowerListener">
<param id="data"/>
<documentation><![CDATA[<div class="description"> Callback when calculated wheel speed is updated (max freq 1Hz)<br/> @since 2.2.0<br/> <div class="param"> [CalculatedWheelSpeed] data   Data with updated speed information.</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onPedalPowerBalanceUpdate" parent="BikePowerListener">
<param id="data"/>
<documentation><![CDATA[<div class="description"> Callback when power balance is updated (max freq 1Hz)<br/> @since 2.2.0<br/> <div class="param"> [PedalPowerBalance] data   Data with updated balance information.</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="onTorqueEffectivenessPedalSmoothnessUpdate" parent="BikePowerListener">
<param id="data"/>
<documentation><![CDATA[<div class="description"> Callback when torque effectiveness & pedal smoothness are updated (max freq 1Hz)<br/> @since 2.2.0<br/> <div class="param"> [TorqueEffectivenessPedalSmoothness] data   Data with updated torque effectiveness & pedal smoothness information.</div><br/></div>]]></documentation>
</functionEntry>
<functionEntry name="testLocationRadians" parent="APITest">
<param id="lat"/>
<param id="lon"/>
<documentation/>
</functionEntry>
<functionEntry name="testLocationDegree" parent="APITest">
<param id="lat"/>
<param id="lon"/>
<documentation/>
</functionEntry>
<functionEntry name="testLocationSemicircles" parent="APITest">
<param id="lat"/>
<param id="lon"/>
<documentation/>
</functionEntry>
<functionEntry name="testSystemError" parent="APITest">
<documentation/>
</functionEntry>
<functionEntry name="testDuration" parent="APITest">
<documentation/>
</functionEntry>
<functionEntry name="testMoment" parent="APITest">
<documentation/>
</functionEntry>
<functionEntry name="start" parent="Timer">
<documentation/>
</functionEntry>
<functionEntry name="callback1" parent="Timer">
<documentation/>
</functionEntry>
<functionEntry name="callback2" parent="Timer">
<documentation/>
</functionEntry>
<functionEntry name="start" parent="TimerStop">
<documentation/>
</functionEntry>
<functionEntry name="callback1" parent="TimerStop">
<documentation/>
</functionEntry>
<functionEntry name="start" parent="TimerStart">
<documentation/>
</functionEntry>
<functionEntry name="callback1" parent="TimerStart">
<documentation/>
</functionEntry>
<functionEntry name="callback2" parent="TimerStart">
<documentation/>
</functionEntry>
<functionEntry name="testUserProfile" parent="Test">
<documentation/>
</functionEntry>
</functions>
</debugInfo>
